// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yoshiso/hypersync/ent/delegate"
)

// Delegate is the model entity for the Delegate schema.
type Delegate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Validator holds the value of the "validator" field.
	Validator string `json:"validator,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount string `json:"amount,omitempty"`
	// IsUndelegate holds the value of the "is_undelegate" field.
	IsUndelegate bool `json:"is_undelegate,omitempty"`
	// Time holds the value of the "time" field.
	Time int64 `json:"time,omitempty"`
	// Address holds the value of the "address" field.
	Address      string `json:"address,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Delegate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case delegate.FieldIsUndelegate:
			values[i] = new(sql.NullBool)
		case delegate.FieldID, delegate.FieldTime:
			values[i] = new(sql.NullInt64)
		case delegate.FieldValidator, delegate.FieldAmount, delegate.FieldAddress:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Delegate fields.
func (d *Delegate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case delegate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case delegate.FieldValidator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field validator", values[i])
			} else if value.Valid {
				d.Validator = value.String
			}
		case delegate.FieldAmount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				d.Amount = value.String
			}
		case delegate.FieldIsUndelegate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_undelegate", values[i])
			} else if value.Valid {
				d.IsUndelegate = value.Bool
			}
		case delegate.FieldTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				d.Time = value.Int64
			}
		case delegate.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				d.Address = value.String
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Delegate.
// This includes values selected through modifiers, order, etc.
func (d *Delegate) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// Update returns a builder for updating this Delegate.
// Note that you need to call Delegate.Unwrap() before calling this method if this Delegate
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Delegate) Update() *DelegateUpdateOne {
	return NewDelegateClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Delegate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Delegate) Unwrap() *Delegate {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Delegate is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Delegate) String() string {
	var builder strings.Builder
	builder.WriteString("Delegate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("validator=")
	builder.WriteString(d.Validator)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(d.Amount)
	builder.WriteString(", ")
	builder.WriteString("is_undelegate=")
	builder.WriteString(fmt.Sprintf("%v", d.IsUndelegate))
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(fmt.Sprintf("%v", d.Time))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(d.Address)
	builder.WriteByte(')')
	return builder.String()
}

// Delegates is a parsable slice of Delegate.
type Delegates []*Delegate
