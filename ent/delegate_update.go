// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/delegate"
	"github.com/yoshiso/hypersync/ent/predicate"
)

// DelegateUpdate is the builder for updating Delegate entities.
type DelegateUpdate struct {
	config
	hooks    []Hook
	mutation *DelegateMutation
}

// Where appends a list predicates to the DelegateUpdate builder.
func (du *DelegateUpdate) Where(ps ...predicate.Delegate) *DelegateUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetValidator sets the "validator" field.
func (du *DelegateUpdate) SetValidator(s string) *DelegateUpdate {
	du.mutation.SetValidator(s)
	return du
}

// SetNillableValidator sets the "validator" field if the given value is not nil.
func (du *DelegateUpdate) SetNillableValidator(s *string) *DelegateUpdate {
	if s != nil {
		du.SetValidator(*s)
	}
	return du
}

// SetAmount sets the "amount" field.
func (du *DelegateUpdate) SetAmount(s string) *DelegateUpdate {
	du.mutation.SetAmount(s)
	return du
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (du *DelegateUpdate) SetNillableAmount(s *string) *DelegateUpdate {
	if s != nil {
		du.SetAmount(*s)
	}
	return du
}

// SetIsUndelegate sets the "is_undelegate" field.
func (du *DelegateUpdate) SetIsUndelegate(b bool) *DelegateUpdate {
	du.mutation.SetIsUndelegate(b)
	return du
}

// SetNillableIsUndelegate sets the "is_undelegate" field if the given value is not nil.
func (du *DelegateUpdate) SetNillableIsUndelegate(b *bool) *DelegateUpdate {
	if b != nil {
		du.SetIsUndelegate(*b)
	}
	return du
}

// SetTime sets the "time" field.
func (du *DelegateUpdate) SetTime(i int64) *DelegateUpdate {
	du.mutation.ResetTime()
	du.mutation.SetTime(i)
	return du
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (du *DelegateUpdate) SetNillableTime(i *int64) *DelegateUpdate {
	if i != nil {
		du.SetTime(*i)
	}
	return du
}

// AddTime adds i to the "time" field.
func (du *DelegateUpdate) AddTime(i int64) *DelegateUpdate {
	du.mutation.AddTime(i)
	return du
}

// SetAddress sets the "address" field.
func (du *DelegateUpdate) SetAddress(s string) *DelegateUpdate {
	du.mutation.SetAddress(s)
	return du
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (du *DelegateUpdate) SetNillableAddress(s *string) *DelegateUpdate {
	if s != nil {
		du.SetAddress(*s)
	}
	return du
}

// Mutation returns the DelegateMutation object of the builder.
func (du *DelegateUpdate) Mutation() *DelegateMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DelegateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DelegateUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DelegateUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DelegateUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DelegateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(delegate.Table, delegate.Columns, sqlgraph.NewFieldSpec(delegate.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Validator(); ok {
		_spec.SetField(delegate.FieldValidator, field.TypeString, value)
	}
	if value, ok := du.mutation.Amount(); ok {
		_spec.SetField(delegate.FieldAmount, field.TypeString, value)
	}
	if value, ok := du.mutation.IsUndelegate(); ok {
		_spec.SetField(delegate.FieldIsUndelegate, field.TypeBool, value)
	}
	if value, ok := du.mutation.Time(); ok {
		_spec.SetField(delegate.FieldTime, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedTime(); ok {
		_spec.AddField(delegate.FieldTime, field.TypeInt64, value)
	}
	if value, ok := du.mutation.Address(); ok {
		_spec.SetField(delegate.FieldAddress, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delegate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DelegateUpdateOne is the builder for updating a single Delegate entity.
type DelegateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DelegateMutation
}

// SetValidator sets the "validator" field.
func (duo *DelegateUpdateOne) SetValidator(s string) *DelegateUpdateOne {
	duo.mutation.SetValidator(s)
	return duo
}

// SetNillableValidator sets the "validator" field if the given value is not nil.
func (duo *DelegateUpdateOne) SetNillableValidator(s *string) *DelegateUpdateOne {
	if s != nil {
		duo.SetValidator(*s)
	}
	return duo
}

// SetAmount sets the "amount" field.
func (duo *DelegateUpdateOne) SetAmount(s string) *DelegateUpdateOne {
	duo.mutation.SetAmount(s)
	return duo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (duo *DelegateUpdateOne) SetNillableAmount(s *string) *DelegateUpdateOne {
	if s != nil {
		duo.SetAmount(*s)
	}
	return duo
}

// SetIsUndelegate sets the "is_undelegate" field.
func (duo *DelegateUpdateOne) SetIsUndelegate(b bool) *DelegateUpdateOne {
	duo.mutation.SetIsUndelegate(b)
	return duo
}

// SetNillableIsUndelegate sets the "is_undelegate" field if the given value is not nil.
func (duo *DelegateUpdateOne) SetNillableIsUndelegate(b *bool) *DelegateUpdateOne {
	if b != nil {
		duo.SetIsUndelegate(*b)
	}
	return duo
}

// SetTime sets the "time" field.
func (duo *DelegateUpdateOne) SetTime(i int64) *DelegateUpdateOne {
	duo.mutation.ResetTime()
	duo.mutation.SetTime(i)
	return duo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (duo *DelegateUpdateOne) SetNillableTime(i *int64) *DelegateUpdateOne {
	if i != nil {
		duo.SetTime(*i)
	}
	return duo
}

// AddTime adds i to the "time" field.
func (duo *DelegateUpdateOne) AddTime(i int64) *DelegateUpdateOne {
	duo.mutation.AddTime(i)
	return duo
}

// SetAddress sets the "address" field.
func (duo *DelegateUpdateOne) SetAddress(s string) *DelegateUpdateOne {
	duo.mutation.SetAddress(s)
	return duo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (duo *DelegateUpdateOne) SetNillableAddress(s *string) *DelegateUpdateOne {
	if s != nil {
		duo.SetAddress(*s)
	}
	return duo
}

// Mutation returns the DelegateMutation object of the builder.
func (duo *DelegateUpdateOne) Mutation() *DelegateMutation {
	return duo.mutation
}

// Where appends a list predicates to the DelegateUpdate builder.
func (duo *DelegateUpdateOne) Where(ps ...predicate.Delegate) *DelegateUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DelegateUpdateOne) Select(field string, fields ...string) *DelegateUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Delegate entity.
func (duo *DelegateUpdateOne) Save(ctx context.Context) (*Delegate, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DelegateUpdateOne) SaveX(ctx context.Context) *Delegate {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DelegateUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DelegateUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DelegateUpdateOne) sqlSave(ctx context.Context) (_node *Delegate, err error) {
	_spec := sqlgraph.NewUpdateSpec(delegate.Table, delegate.Columns, sqlgraph.NewFieldSpec(delegate.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Delegate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, delegate.FieldID)
		for _, f := range fields {
			if !delegate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != delegate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Validator(); ok {
		_spec.SetField(delegate.FieldValidator, field.TypeString, value)
	}
	if value, ok := duo.mutation.Amount(); ok {
		_spec.SetField(delegate.FieldAmount, field.TypeString, value)
	}
	if value, ok := duo.mutation.IsUndelegate(); ok {
		_spec.SetField(delegate.FieldIsUndelegate, field.TypeBool, value)
	}
	if value, ok := duo.mutation.Time(); ok {
		_spec.SetField(delegate.FieldTime, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedTime(); ok {
		_spec.AddField(delegate.FieldTime, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.Address(); ok {
		_spec.SetField(delegate.FieldAddress, field.TypeString, value)
	}
	_node = &Delegate{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delegate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
