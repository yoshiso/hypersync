// Code generated by ent, DO NOT EDIT.

package delegatorreward

import (
	"entgo.io/ent/dialect/sql"
	"github.com/yoshiso/hypersync/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldLTE(FieldID, id))
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldEQ(FieldSource, v))
}

// TotalAmount applies equality check predicate on the "total_amount" field. It's identical to TotalAmountEQ.
func TotalAmount(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldEQ(FieldTotalAmount, v))
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v int64) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldEQ(FieldTime, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldEQ(FieldAddress, v))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldNotIn(FieldSource, vs...))
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldGT(FieldSource, v))
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldGTE(FieldSource, v))
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldLT(FieldSource, v))
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldLTE(FieldSource, v))
}

// SourceContains applies the Contains predicate on the "source" field.
func SourceContains(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldContains(FieldSource, v))
}

// SourceHasPrefix applies the HasPrefix predicate on the "source" field.
func SourceHasPrefix(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldHasPrefix(FieldSource, v))
}

// SourceHasSuffix applies the HasSuffix predicate on the "source" field.
func SourceHasSuffix(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldHasSuffix(FieldSource, v))
}

// SourceEqualFold applies the EqualFold predicate on the "source" field.
func SourceEqualFold(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldEqualFold(FieldSource, v))
}

// SourceContainsFold applies the ContainsFold predicate on the "source" field.
func SourceContainsFold(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldContainsFold(FieldSource, v))
}

// TotalAmountEQ applies the EQ predicate on the "total_amount" field.
func TotalAmountEQ(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldEQ(FieldTotalAmount, v))
}

// TotalAmountNEQ applies the NEQ predicate on the "total_amount" field.
func TotalAmountNEQ(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldNEQ(FieldTotalAmount, v))
}

// TotalAmountIn applies the In predicate on the "total_amount" field.
func TotalAmountIn(vs ...string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldIn(FieldTotalAmount, vs...))
}

// TotalAmountNotIn applies the NotIn predicate on the "total_amount" field.
func TotalAmountNotIn(vs ...string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldNotIn(FieldTotalAmount, vs...))
}

// TotalAmountGT applies the GT predicate on the "total_amount" field.
func TotalAmountGT(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldGT(FieldTotalAmount, v))
}

// TotalAmountGTE applies the GTE predicate on the "total_amount" field.
func TotalAmountGTE(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldGTE(FieldTotalAmount, v))
}

// TotalAmountLT applies the LT predicate on the "total_amount" field.
func TotalAmountLT(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldLT(FieldTotalAmount, v))
}

// TotalAmountLTE applies the LTE predicate on the "total_amount" field.
func TotalAmountLTE(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldLTE(FieldTotalAmount, v))
}

// TotalAmountContains applies the Contains predicate on the "total_amount" field.
func TotalAmountContains(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldContains(FieldTotalAmount, v))
}

// TotalAmountHasPrefix applies the HasPrefix predicate on the "total_amount" field.
func TotalAmountHasPrefix(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldHasPrefix(FieldTotalAmount, v))
}

// TotalAmountHasSuffix applies the HasSuffix predicate on the "total_amount" field.
func TotalAmountHasSuffix(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldHasSuffix(FieldTotalAmount, v))
}

// TotalAmountEqualFold applies the EqualFold predicate on the "total_amount" field.
func TotalAmountEqualFold(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldEqualFold(FieldTotalAmount, v))
}

// TotalAmountContainsFold applies the ContainsFold predicate on the "total_amount" field.
func TotalAmountContainsFold(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldContainsFold(FieldTotalAmount, v))
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v int64) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldEQ(FieldTime, v))
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v int64) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldNEQ(FieldTime, v))
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...int64) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldIn(FieldTime, vs...))
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...int64) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldNotIn(FieldTime, vs...))
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v int64) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldGT(FieldTime, v))
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v int64) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldGTE(FieldTime, v))
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v int64) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldLT(FieldTime, v))
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v int64) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldLTE(FieldTime, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.FieldContainsFold(FieldAddress, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DelegatorReward) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DelegatorReward) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DelegatorReward) predicate.DelegatorReward {
	return predicate.DelegatorReward(sql.NotPredicates(p))
}
