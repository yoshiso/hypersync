// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/delegatorreward"
)

// DelegatorRewardCreate is the builder for creating a DelegatorReward entity.
type DelegatorRewardCreate struct {
	config
	mutation *DelegatorRewardMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSource sets the "source" field.
func (drc *DelegatorRewardCreate) SetSource(s string) *DelegatorRewardCreate {
	drc.mutation.SetSource(s)
	return drc
}

// SetTotalAmount sets the "total_amount" field.
func (drc *DelegatorRewardCreate) SetTotalAmount(s string) *DelegatorRewardCreate {
	drc.mutation.SetTotalAmount(s)
	return drc
}

// SetTime sets the "time" field.
func (drc *DelegatorRewardCreate) SetTime(i int64) *DelegatorRewardCreate {
	drc.mutation.SetTime(i)
	return drc
}

// SetAddress sets the "address" field.
func (drc *DelegatorRewardCreate) SetAddress(s string) *DelegatorRewardCreate {
	drc.mutation.SetAddress(s)
	return drc
}

// Mutation returns the DelegatorRewardMutation object of the builder.
func (drc *DelegatorRewardCreate) Mutation() *DelegatorRewardMutation {
	return drc.mutation
}

// Save creates the DelegatorReward in the database.
func (drc *DelegatorRewardCreate) Save(ctx context.Context) (*DelegatorReward, error) {
	return withHooks(ctx, drc.sqlSave, drc.mutation, drc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (drc *DelegatorRewardCreate) SaveX(ctx context.Context) *DelegatorReward {
	v, err := drc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drc *DelegatorRewardCreate) Exec(ctx context.Context) error {
	_, err := drc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drc *DelegatorRewardCreate) ExecX(ctx context.Context) {
	if err := drc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drc *DelegatorRewardCreate) check() error {
	if _, ok := drc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "DelegatorReward.source"`)}
	}
	if _, ok := drc.mutation.TotalAmount(); !ok {
		return &ValidationError{Name: "total_amount", err: errors.New(`ent: missing required field "DelegatorReward.total_amount"`)}
	}
	if _, ok := drc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "DelegatorReward.time"`)}
	}
	if _, ok := drc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "DelegatorReward.address"`)}
	}
	return nil
}

func (drc *DelegatorRewardCreate) sqlSave(ctx context.Context) (*DelegatorReward, error) {
	if err := drc.check(); err != nil {
		return nil, err
	}
	_node, _spec := drc.createSpec()
	if err := sqlgraph.CreateNode(ctx, drc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	drc.mutation.id = &_node.ID
	drc.mutation.done = true
	return _node, nil
}

func (drc *DelegatorRewardCreate) createSpec() (*DelegatorReward, *sqlgraph.CreateSpec) {
	var (
		_node = &DelegatorReward{config: drc.config}
		_spec = sqlgraph.NewCreateSpec(delegatorreward.Table, sqlgraph.NewFieldSpec(delegatorreward.FieldID, field.TypeInt))
	)
	_spec.OnConflict = drc.conflict
	if value, ok := drc.mutation.Source(); ok {
		_spec.SetField(delegatorreward.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := drc.mutation.TotalAmount(); ok {
		_spec.SetField(delegatorreward.FieldTotalAmount, field.TypeString, value)
		_node.TotalAmount = value
	}
	if value, ok := drc.mutation.Time(); ok {
		_spec.SetField(delegatorreward.FieldTime, field.TypeInt64, value)
		_node.Time = value
	}
	if value, ok := drc.mutation.Address(); ok {
		_spec.SetField(delegatorreward.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DelegatorReward.Create().
//		SetSource(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DelegatorRewardUpsert) {
//			SetSource(v+v).
//		}).
//		Exec(ctx)
func (drc *DelegatorRewardCreate) OnConflict(opts ...sql.ConflictOption) *DelegatorRewardUpsertOne {
	drc.conflict = opts
	return &DelegatorRewardUpsertOne{
		create: drc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DelegatorReward.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (drc *DelegatorRewardCreate) OnConflictColumns(columns ...string) *DelegatorRewardUpsertOne {
	drc.conflict = append(drc.conflict, sql.ConflictColumns(columns...))
	return &DelegatorRewardUpsertOne{
		create: drc,
	}
}

type (
	// DelegatorRewardUpsertOne is the builder for "upsert"-ing
	//  one DelegatorReward node.
	DelegatorRewardUpsertOne struct {
		create *DelegatorRewardCreate
	}

	// DelegatorRewardUpsert is the "OnConflict" setter.
	DelegatorRewardUpsert struct {
		*sql.UpdateSet
	}
)

// SetSource sets the "source" field.
func (u *DelegatorRewardUpsert) SetSource(v string) *DelegatorRewardUpsert {
	u.Set(delegatorreward.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *DelegatorRewardUpsert) UpdateSource() *DelegatorRewardUpsert {
	u.SetExcluded(delegatorreward.FieldSource)
	return u
}

// SetTotalAmount sets the "total_amount" field.
func (u *DelegatorRewardUpsert) SetTotalAmount(v string) *DelegatorRewardUpsert {
	u.Set(delegatorreward.FieldTotalAmount, v)
	return u
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *DelegatorRewardUpsert) UpdateTotalAmount() *DelegatorRewardUpsert {
	u.SetExcluded(delegatorreward.FieldTotalAmount)
	return u
}

// SetTime sets the "time" field.
func (u *DelegatorRewardUpsert) SetTime(v int64) *DelegatorRewardUpsert {
	u.Set(delegatorreward.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *DelegatorRewardUpsert) UpdateTime() *DelegatorRewardUpsert {
	u.SetExcluded(delegatorreward.FieldTime)
	return u
}

// AddTime adds v to the "time" field.
func (u *DelegatorRewardUpsert) AddTime(v int64) *DelegatorRewardUpsert {
	u.Add(delegatorreward.FieldTime, v)
	return u
}

// SetAddress sets the "address" field.
func (u *DelegatorRewardUpsert) SetAddress(v string) *DelegatorRewardUpsert {
	u.Set(delegatorreward.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *DelegatorRewardUpsert) UpdateAddress() *DelegatorRewardUpsert {
	u.SetExcluded(delegatorreward.FieldAddress)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.DelegatorReward.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DelegatorRewardUpsertOne) UpdateNewValues() *DelegatorRewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DelegatorReward.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DelegatorRewardUpsertOne) Ignore() *DelegatorRewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DelegatorRewardUpsertOne) DoNothing() *DelegatorRewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DelegatorRewardCreate.OnConflict
// documentation for more info.
func (u *DelegatorRewardUpsertOne) Update(set func(*DelegatorRewardUpsert)) *DelegatorRewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DelegatorRewardUpsert{UpdateSet: update})
	}))
	return u
}

// SetSource sets the "source" field.
func (u *DelegatorRewardUpsertOne) SetSource(v string) *DelegatorRewardUpsertOne {
	return u.Update(func(s *DelegatorRewardUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *DelegatorRewardUpsertOne) UpdateSource() *DelegatorRewardUpsertOne {
	return u.Update(func(s *DelegatorRewardUpsert) {
		s.UpdateSource()
	})
}

// SetTotalAmount sets the "total_amount" field.
func (u *DelegatorRewardUpsertOne) SetTotalAmount(v string) *DelegatorRewardUpsertOne {
	return u.Update(func(s *DelegatorRewardUpsert) {
		s.SetTotalAmount(v)
	})
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *DelegatorRewardUpsertOne) UpdateTotalAmount() *DelegatorRewardUpsertOne {
	return u.Update(func(s *DelegatorRewardUpsert) {
		s.UpdateTotalAmount()
	})
}

// SetTime sets the "time" field.
func (u *DelegatorRewardUpsertOne) SetTime(v int64) *DelegatorRewardUpsertOne {
	return u.Update(func(s *DelegatorRewardUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *DelegatorRewardUpsertOne) AddTime(v int64) *DelegatorRewardUpsertOne {
	return u.Update(func(s *DelegatorRewardUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *DelegatorRewardUpsertOne) UpdateTime() *DelegatorRewardUpsertOne {
	return u.Update(func(s *DelegatorRewardUpsert) {
		s.UpdateTime()
	})
}

// SetAddress sets the "address" field.
func (u *DelegatorRewardUpsertOne) SetAddress(v string) *DelegatorRewardUpsertOne {
	return u.Update(func(s *DelegatorRewardUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *DelegatorRewardUpsertOne) UpdateAddress() *DelegatorRewardUpsertOne {
	return u.Update(func(s *DelegatorRewardUpsert) {
		s.UpdateAddress()
	})
}

// Exec executes the query.
func (u *DelegatorRewardUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DelegatorRewardCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DelegatorRewardUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DelegatorRewardUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DelegatorRewardUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DelegatorRewardCreateBulk is the builder for creating many DelegatorReward entities in bulk.
type DelegatorRewardCreateBulk struct {
	config
	err      error
	builders []*DelegatorRewardCreate
	conflict []sql.ConflictOption
}

// Save creates the DelegatorReward entities in the database.
func (drcb *DelegatorRewardCreateBulk) Save(ctx context.Context) ([]*DelegatorReward, error) {
	if drcb.err != nil {
		return nil, drcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(drcb.builders))
	nodes := make([]*DelegatorReward, len(drcb.builders))
	mutators := make([]Mutator, len(drcb.builders))
	for i := range drcb.builders {
		func(i int, root context.Context) {
			builder := drcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DelegatorRewardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, drcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = drcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, drcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, drcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (drcb *DelegatorRewardCreateBulk) SaveX(ctx context.Context) []*DelegatorReward {
	v, err := drcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drcb *DelegatorRewardCreateBulk) Exec(ctx context.Context) error {
	_, err := drcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drcb *DelegatorRewardCreateBulk) ExecX(ctx context.Context) {
	if err := drcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DelegatorReward.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DelegatorRewardUpsert) {
//			SetSource(v+v).
//		}).
//		Exec(ctx)
func (drcb *DelegatorRewardCreateBulk) OnConflict(opts ...sql.ConflictOption) *DelegatorRewardUpsertBulk {
	drcb.conflict = opts
	return &DelegatorRewardUpsertBulk{
		create: drcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DelegatorReward.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (drcb *DelegatorRewardCreateBulk) OnConflictColumns(columns ...string) *DelegatorRewardUpsertBulk {
	drcb.conflict = append(drcb.conflict, sql.ConflictColumns(columns...))
	return &DelegatorRewardUpsertBulk{
		create: drcb,
	}
}

// DelegatorRewardUpsertBulk is the builder for "upsert"-ing
// a bulk of DelegatorReward nodes.
type DelegatorRewardUpsertBulk struct {
	create *DelegatorRewardCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DelegatorReward.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DelegatorRewardUpsertBulk) UpdateNewValues() *DelegatorRewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DelegatorReward.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DelegatorRewardUpsertBulk) Ignore() *DelegatorRewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DelegatorRewardUpsertBulk) DoNothing() *DelegatorRewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DelegatorRewardCreateBulk.OnConflict
// documentation for more info.
func (u *DelegatorRewardUpsertBulk) Update(set func(*DelegatorRewardUpsert)) *DelegatorRewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DelegatorRewardUpsert{UpdateSet: update})
	}))
	return u
}

// SetSource sets the "source" field.
func (u *DelegatorRewardUpsertBulk) SetSource(v string) *DelegatorRewardUpsertBulk {
	return u.Update(func(s *DelegatorRewardUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *DelegatorRewardUpsertBulk) UpdateSource() *DelegatorRewardUpsertBulk {
	return u.Update(func(s *DelegatorRewardUpsert) {
		s.UpdateSource()
	})
}

// SetTotalAmount sets the "total_amount" field.
func (u *DelegatorRewardUpsertBulk) SetTotalAmount(v string) *DelegatorRewardUpsertBulk {
	return u.Update(func(s *DelegatorRewardUpsert) {
		s.SetTotalAmount(v)
	})
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *DelegatorRewardUpsertBulk) UpdateTotalAmount() *DelegatorRewardUpsertBulk {
	return u.Update(func(s *DelegatorRewardUpsert) {
		s.UpdateTotalAmount()
	})
}

// SetTime sets the "time" field.
func (u *DelegatorRewardUpsertBulk) SetTime(v int64) *DelegatorRewardUpsertBulk {
	return u.Update(func(s *DelegatorRewardUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *DelegatorRewardUpsertBulk) AddTime(v int64) *DelegatorRewardUpsertBulk {
	return u.Update(func(s *DelegatorRewardUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *DelegatorRewardUpsertBulk) UpdateTime() *DelegatorRewardUpsertBulk {
	return u.Update(func(s *DelegatorRewardUpsert) {
		s.UpdateTime()
	})
}

// SetAddress sets the "address" field.
func (u *DelegatorRewardUpsertBulk) SetAddress(v string) *DelegatorRewardUpsertBulk {
	return u.Update(func(s *DelegatorRewardUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *DelegatorRewardUpsertBulk) UpdateAddress() *DelegatorRewardUpsertBulk {
	return u.Update(func(s *DelegatorRewardUpsert) {
		s.UpdateAddress()
	})
}

// Exec executes the query.
func (u *DelegatorRewardUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DelegatorRewardCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DelegatorRewardCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DelegatorRewardUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
