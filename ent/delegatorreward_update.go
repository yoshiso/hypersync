// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/delegatorreward"
	"github.com/yoshiso/hypersync/ent/predicate"
)

// DelegatorRewardUpdate is the builder for updating DelegatorReward entities.
type DelegatorRewardUpdate struct {
	config
	hooks    []Hook
	mutation *DelegatorRewardMutation
}

// Where appends a list predicates to the DelegatorRewardUpdate builder.
func (dru *DelegatorRewardUpdate) Where(ps ...predicate.DelegatorReward) *DelegatorRewardUpdate {
	dru.mutation.Where(ps...)
	return dru
}

// SetSource sets the "source" field.
func (dru *DelegatorRewardUpdate) SetSource(s string) *DelegatorRewardUpdate {
	dru.mutation.SetSource(s)
	return dru
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (dru *DelegatorRewardUpdate) SetNillableSource(s *string) *DelegatorRewardUpdate {
	if s != nil {
		dru.SetSource(*s)
	}
	return dru
}

// SetTotalAmount sets the "total_amount" field.
func (dru *DelegatorRewardUpdate) SetTotalAmount(s string) *DelegatorRewardUpdate {
	dru.mutation.SetTotalAmount(s)
	return dru
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (dru *DelegatorRewardUpdate) SetNillableTotalAmount(s *string) *DelegatorRewardUpdate {
	if s != nil {
		dru.SetTotalAmount(*s)
	}
	return dru
}

// SetTime sets the "time" field.
func (dru *DelegatorRewardUpdate) SetTime(i int64) *DelegatorRewardUpdate {
	dru.mutation.ResetTime()
	dru.mutation.SetTime(i)
	return dru
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (dru *DelegatorRewardUpdate) SetNillableTime(i *int64) *DelegatorRewardUpdate {
	if i != nil {
		dru.SetTime(*i)
	}
	return dru
}

// AddTime adds i to the "time" field.
func (dru *DelegatorRewardUpdate) AddTime(i int64) *DelegatorRewardUpdate {
	dru.mutation.AddTime(i)
	return dru
}

// SetAddress sets the "address" field.
func (dru *DelegatorRewardUpdate) SetAddress(s string) *DelegatorRewardUpdate {
	dru.mutation.SetAddress(s)
	return dru
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (dru *DelegatorRewardUpdate) SetNillableAddress(s *string) *DelegatorRewardUpdate {
	if s != nil {
		dru.SetAddress(*s)
	}
	return dru
}

// Mutation returns the DelegatorRewardMutation object of the builder.
func (dru *DelegatorRewardUpdate) Mutation() *DelegatorRewardMutation {
	return dru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dru *DelegatorRewardUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dru.sqlSave, dru.mutation, dru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dru *DelegatorRewardUpdate) SaveX(ctx context.Context) int {
	affected, err := dru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dru *DelegatorRewardUpdate) Exec(ctx context.Context) error {
	_, err := dru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dru *DelegatorRewardUpdate) ExecX(ctx context.Context) {
	if err := dru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dru *DelegatorRewardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(delegatorreward.Table, delegatorreward.Columns, sqlgraph.NewFieldSpec(delegatorreward.FieldID, field.TypeInt))
	if ps := dru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dru.mutation.Source(); ok {
		_spec.SetField(delegatorreward.FieldSource, field.TypeString, value)
	}
	if value, ok := dru.mutation.TotalAmount(); ok {
		_spec.SetField(delegatorreward.FieldTotalAmount, field.TypeString, value)
	}
	if value, ok := dru.mutation.Time(); ok {
		_spec.SetField(delegatorreward.FieldTime, field.TypeInt64, value)
	}
	if value, ok := dru.mutation.AddedTime(); ok {
		_spec.AddField(delegatorreward.FieldTime, field.TypeInt64, value)
	}
	if value, ok := dru.mutation.Address(); ok {
		_spec.SetField(delegatorreward.FieldAddress, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delegatorreward.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dru.mutation.done = true
	return n, nil
}

// DelegatorRewardUpdateOne is the builder for updating a single DelegatorReward entity.
type DelegatorRewardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DelegatorRewardMutation
}

// SetSource sets the "source" field.
func (druo *DelegatorRewardUpdateOne) SetSource(s string) *DelegatorRewardUpdateOne {
	druo.mutation.SetSource(s)
	return druo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (druo *DelegatorRewardUpdateOne) SetNillableSource(s *string) *DelegatorRewardUpdateOne {
	if s != nil {
		druo.SetSource(*s)
	}
	return druo
}

// SetTotalAmount sets the "total_amount" field.
func (druo *DelegatorRewardUpdateOne) SetTotalAmount(s string) *DelegatorRewardUpdateOne {
	druo.mutation.SetTotalAmount(s)
	return druo
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (druo *DelegatorRewardUpdateOne) SetNillableTotalAmount(s *string) *DelegatorRewardUpdateOne {
	if s != nil {
		druo.SetTotalAmount(*s)
	}
	return druo
}

// SetTime sets the "time" field.
func (druo *DelegatorRewardUpdateOne) SetTime(i int64) *DelegatorRewardUpdateOne {
	druo.mutation.ResetTime()
	druo.mutation.SetTime(i)
	return druo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (druo *DelegatorRewardUpdateOne) SetNillableTime(i *int64) *DelegatorRewardUpdateOne {
	if i != nil {
		druo.SetTime(*i)
	}
	return druo
}

// AddTime adds i to the "time" field.
func (druo *DelegatorRewardUpdateOne) AddTime(i int64) *DelegatorRewardUpdateOne {
	druo.mutation.AddTime(i)
	return druo
}

// SetAddress sets the "address" field.
func (druo *DelegatorRewardUpdateOne) SetAddress(s string) *DelegatorRewardUpdateOne {
	druo.mutation.SetAddress(s)
	return druo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (druo *DelegatorRewardUpdateOne) SetNillableAddress(s *string) *DelegatorRewardUpdateOne {
	if s != nil {
		druo.SetAddress(*s)
	}
	return druo
}

// Mutation returns the DelegatorRewardMutation object of the builder.
func (druo *DelegatorRewardUpdateOne) Mutation() *DelegatorRewardMutation {
	return druo.mutation
}

// Where appends a list predicates to the DelegatorRewardUpdate builder.
func (druo *DelegatorRewardUpdateOne) Where(ps ...predicate.DelegatorReward) *DelegatorRewardUpdateOne {
	druo.mutation.Where(ps...)
	return druo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (druo *DelegatorRewardUpdateOne) Select(field string, fields ...string) *DelegatorRewardUpdateOne {
	druo.fields = append([]string{field}, fields...)
	return druo
}

// Save executes the query and returns the updated DelegatorReward entity.
func (druo *DelegatorRewardUpdateOne) Save(ctx context.Context) (*DelegatorReward, error) {
	return withHooks(ctx, druo.sqlSave, druo.mutation, druo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (druo *DelegatorRewardUpdateOne) SaveX(ctx context.Context) *DelegatorReward {
	node, err := druo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (druo *DelegatorRewardUpdateOne) Exec(ctx context.Context) error {
	_, err := druo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (druo *DelegatorRewardUpdateOne) ExecX(ctx context.Context) {
	if err := druo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (druo *DelegatorRewardUpdateOne) sqlSave(ctx context.Context) (_node *DelegatorReward, err error) {
	_spec := sqlgraph.NewUpdateSpec(delegatorreward.Table, delegatorreward.Columns, sqlgraph.NewFieldSpec(delegatorreward.FieldID, field.TypeInt))
	id, ok := druo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DelegatorReward.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := druo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, delegatorreward.FieldID)
		for _, f := range fields {
			if !delegatorreward.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != delegatorreward.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := druo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := druo.mutation.Source(); ok {
		_spec.SetField(delegatorreward.FieldSource, field.TypeString, value)
	}
	if value, ok := druo.mutation.TotalAmount(); ok {
		_spec.SetField(delegatorreward.FieldTotalAmount, field.TypeString, value)
	}
	if value, ok := druo.mutation.Time(); ok {
		_spec.SetField(delegatorreward.FieldTime, field.TypeInt64, value)
	}
	if value, ok := druo.mutation.AddedTime(); ok {
		_spec.AddField(delegatorreward.FieldTime, field.TypeInt64, value)
	}
	if value, ok := druo.mutation.Address(); ok {
		_spec.SetField(delegatorreward.FieldAddress, field.TypeString, value)
	}
	_node = &DelegatorReward{config: druo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, druo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delegatorreward.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	druo.mutation.done = true
	return _node, nil
}
