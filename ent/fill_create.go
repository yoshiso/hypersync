// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/fill"
)

// FillCreate is the builder for creating a Fill entity.
type FillCreate struct {
	config
	mutation *FillMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCoin sets the "coin" field.
func (fc *FillCreate) SetCoin(s string) *FillCreate {
	fc.mutation.SetCoin(s)
	return fc
}

// SetAddress sets the "address" field.
func (fc *FillCreate) SetAddress(s string) *FillCreate {
	fc.mutation.SetAddress(s)
	return fc
}

// SetPx sets the "px" field.
func (fc *FillCreate) SetPx(s string) *FillCreate {
	fc.mutation.SetPx(s)
	return fc
}

// SetSz sets the "sz" field.
func (fc *FillCreate) SetSz(s string) *FillCreate {
	fc.mutation.SetSz(s)
	return fc
}

// SetSide sets the "side" field.
func (fc *FillCreate) SetSide(s string) *FillCreate {
	fc.mutation.SetSide(s)
	return fc
}

// SetTime sets the "time" field.
func (fc *FillCreate) SetTime(i int64) *FillCreate {
	fc.mutation.SetTime(i)
	return fc
}

// SetStartPosition sets the "start_position" field.
func (fc *FillCreate) SetStartPosition(s string) *FillCreate {
	fc.mutation.SetStartPosition(s)
	return fc
}

// SetDir sets the "dir" field.
func (fc *FillCreate) SetDir(s string) *FillCreate {
	fc.mutation.SetDir(s)
	return fc
}

// SetHash sets the "hash" field.
func (fc *FillCreate) SetHash(s string) *FillCreate {
	fc.mutation.SetHash(s)
	return fc
}

// SetCrossed sets the "crossed" field.
func (fc *FillCreate) SetCrossed(b bool) *FillCreate {
	fc.mutation.SetCrossed(b)
	return fc
}

// SetFee sets the "fee" field.
func (fc *FillCreate) SetFee(s string) *FillCreate {
	fc.mutation.SetFee(s)
	return fc
}

// SetOid sets the "oid" field.
func (fc *FillCreate) SetOid(i int64) *FillCreate {
	fc.mutation.SetOid(i)
	return fc
}

// SetTid sets the "tid" field.
func (fc *FillCreate) SetTid(i int64) *FillCreate {
	fc.mutation.SetTid(i)
	return fc
}

// SetFeeToken sets the "fee_token" field.
func (fc *FillCreate) SetFeeToken(s string) *FillCreate {
	fc.mutation.SetFeeToken(s)
	return fc
}

// SetBuilderFee sets the "builder_fee" field.
func (fc *FillCreate) SetBuilderFee(s string) *FillCreate {
	fc.mutation.SetBuilderFee(s)
	return fc
}

// SetNillableBuilderFee sets the "builder_fee" field if the given value is not nil.
func (fc *FillCreate) SetNillableBuilderFee(s *string) *FillCreate {
	if s != nil {
		fc.SetBuilderFee(*s)
	}
	return fc
}

// Mutation returns the FillMutation object of the builder.
func (fc *FillCreate) Mutation() *FillMutation {
	return fc.mutation
}

// Save creates the Fill in the database.
func (fc *FillCreate) Save(ctx context.Context) (*Fill, error) {
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FillCreate) SaveX(ctx context.Context) *Fill {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FillCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FillCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FillCreate) check() error {
	if _, ok := fc.mutation.Coin(); !ok {
		return &ValidationError{Name: "coin", err: errors.New(`ent: missing required field "Fill.coin"`)}
	}
	if _, ok := fc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Fill.address"`)}
	}
	if _, ok := fc.mutation.Px(); !ok {
		return &ValidationError{Name: "px", err: errors.New(`ent: missing required field "Fill.px"`)}
	}
	if _, ok := fc.mutation.Sz(); !ok {
		return &ValidationError{Name: "sz", err: errors.New(`ent: missing required field "Fill.sz"`)}
	}
	if _, ok := fc.mutation.Side(); !ok {
		return &ValidationError{Name: "side", err: errors.New(`ent: missing required field "Fill.side"`)}
	}
	if _, ok := fc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "Fill.time"`)}
	}
	if _, ok := fc.mutation.StartPosition(); !ok {
		return &ValidationError{Name: "start_position", err: errors.New(`ent: missing required field "Fill.start_position"`)}
	}
	if _, ok := fc.mutation.Dir(); !ok {
		return &ValidationError{Name: "dir", err: errors.New(`ent: missing required field "Fill.dir"`)}
	}
	if _, ok := fc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Fill.hash"`)}
	}
	if _, ok := fc.mutation.Crossed(); !ok {
		return &ValidationError{Name: "crossed", err: errors.New(`ent: missing required field "Fill.crossed"`)}
	}
	if _, ok := fc.mutation.Fee(); !ok {
		return &ValidationError{Name: "fee", err: errors.New(`ent: missing required field "Fill.fee"`)}
	}
	if _, ok := fc.mutation.Oid(); !ok {
		return &ValidationError{Name: "oid", err: errors.New(`ent: missing required field "Fill.oid"`)}
	}
	if _, ok := fc.mutation.Tid(); !ok {
		return &ValidationError{Name: "tid", err: errors.New(`ent: missing required field "Fill.tid"`)}
	}
	if _, ok := fc.mutation.FeeToken(); !ok {
		return &ValidationError{Name: "fee_token", err: errors.New(`ent: missing required field "Fill.fee_token"`)}
	}
	return nil
}

func (fc *FillCreate) sqlSave(ctx context.Context) (*Fill, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FillCreate) createSpec() (*Fill, *sqlgraph.CreateSpec) {
	var (
		_node = &Fill{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(fill.Table, sqlgraph.NewFieldSpec(fill.FieldID, field.TypeInt))
	)
	_spec.OnConflict = fc.conflict
	if value, ok := fc.mutation.Coin(); ok {
		_spec.SetField(fill.FieldCoin, field.TypeString, value)
		_node.Coin = value
	}
	if value, ok := fc.mutation.Address(); ok {
		_spec.SetField(fill.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := fc.mutation.Px(); ok {
		_spec.SetField(fill.FieldPx, field.TypeString, value)
		_node.Px = value
	}
	if value, ok := fc.mutation.Sz(); ok {
		_spec.SetField(fill.FieldSz, field.TypeString, value)
		_node.Sz = value
	}
	if value, ok := fc.mutation.Side(); ok {
		_spec.SetField(fill.FieldSide, field.TypeString, value)
		_node.Side = value
	}
	if value, ok := fc.mutation.Time(); ok {
		_spec.SetField(fill.FieldTime, field.TypeInt64, value)
		_node.Time = value
	}
	if value, ok := fc.mutation.StartPosition(); ok {
		_spec.SetField(fill.FieldStartPosition, field.TypeString, value)
		_node.StartPosition = value
	}
	if value, ok := fc.mutation.Dir(); ok {
		_spec.SetField(fill.FieldDir, field.TypeString, value)
		_node.Dir = value
	}
	if value, ok := fc.mutation.Hash(); ok {
		_spec.SetField(fill.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := fc.mutation.Crossed(); ok {
		_spec.SetField(fill.FieldCrossed, field.TypeBool, value)
		_node.Crossed = value
	}
	if value, ok := fc.mutation.Fee(); ok {
		_spec.SetField(fill.FieldFee, field.TypeString, value)
		_node.Fee = value
	}
	if value, ok := fc.mutation.Oid(); ok {
		_spec.SetField(fill.FieldOid, field.TypeInt64, value)
		_node.Oid = value
	}
	if value, ok := fc.mutation.Tid(); ok {
		_spec.SetField(fill.FieldTid, field.TypeInt64, value)
		_node.Tid = value
	}
	if value, ok := fc.mutation.FeeToken(); ok {
		_spec.SetField(fill.FieldFeeToken, field.TypeString, value)
		_node.FeeToken = value
	}
	if value, ok := fc.mutation.BuilderFee(); ok {
		_spec.SetField(fill.FieldBuilderFee, field.TypeString, value)
		_node.BuilderFee = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Fill.Create().
//		SetCoin(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FillUpsert) {
//			SetCoin(v+v).
//		}).
//		Exec(ctx)
func (fc *FillCreate) OnConflict(opts ...sql.ConflictOption) *FillUpsertOne {
	fc.conflict = opts
	return &FillUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Fill.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *FillCreate) OnConflictColumns(columns ...string) *FillUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FillUpsertOne{
		create: fc,
	}
}

type (
	// FillUpsertOne is the builder for "upsert"-ing
	//  one Fill node.
	FillUpsertOne struct {
		create *FillCreate
	}

	// FillUpsert is the "OnConflict" setter.
	FillUpsert struct {
		*sql.UpdateSet
	}
)

// SetCoin sets the "coin" field.
func (u *FillUpsert) SetCoin(v string) *FillUpsert {
	u.Set(fill.FieldCoin, v)
	return u
}

// UpdateCoin sets the "coin" field to the value that was provided on create.
func (u *FillUpsert) UpdateCoin() *FillUpsert {
	u.SetExcluded(fill.FieldCoin)
	return u
}

// SetAddress sets the "address" field.
func (u *FillUpsert) SetAddress(v string) *FillUpsert {
	u.Set(fill.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *FillUpsert) UpdateAddress() *FillUpsert {
	u.SetExcluded(fill.FieldAddress)
	return u
}

// SetPx sets the "px" field.
func (u *FillUpsert) SetPx(v string) *FillUpsert {
	u.Set(fill.FieldPx, v)
	return u
}

// UpdatePx sets the "px" field to the value that was provided on create.
func (u *FillUpsert) UpdatePx() *FillUpsert {
	u.SetExcluded(fill.FieldPx)
	return u
}

// SetSz sets the "sz" field.
func (u *FillUpsert) SetSz(v string) *FillUpsert {
	u.Set(fill.FieldSz, v)
	return u
}

// UpdateSz sets the "sz" field to the value that was provided on create.
func (u *FillUpsert) UpdateSz() *FillUpsert {
	u.SetExcluded(fill.FieldSz)
	return u
}

// SetSide sets the "side" field.
func (u *FillUpsert) SetSide(v string) *FillUpsert {
	u.Set(fill.FieldSide, v)
	return u
}

// UpdateSide sets the "side" field to the value that was provided on create.
func (u *FillUpsert) UpdateSide() *FillUpsert {
	u.SetExcluded(fill.FieldSide)
	return u
}

// SetTime sets the "time" field.
func (u *FillUpsert) SetTime(v int64) *FillUpsert {
	u.Set(fill.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *FillUpsert) UpdateTime() *FillUpsert {
	u.SetExcluded(fill.FieldTime)
	return u
}

// AddTime adds v to the "time" field.
func (u *FillUpsert) AddTime(v int64) *FillUpsert {
	u.Add(fill.FieldTime, v)
	return u
}

// SetStartPosition sets the "start_position" field.
func (u *FillUpsert) SetStartPosition(v string) *FillUpsert {
	u.Set(fill.FieldStartPosition, v)
	return u
}

// UpdateStartPosition sets the "start_position" field to the value that was provided on create.
func (u *FillUpsert) UpdateStartPosition() *FillUpsert {
	u.SetExcluded(fill.FieldStartPosition)
	return u
}

// SetDir sets the "dir" field.
func (u *FillUpsert) SetDir(v string) *FillUpsert {
	u.Set(fill.FieldDir, v)
	return u
}

// UpdateDir sets the "dir" field to the value that was provided on create.
func (u *FillUpsert) UpdateDir() *FillUpsert {
	u.SetExcluded(fill.FieldDir)
	return u
}

// SetHash sets the "hash" field.
func (u *FillUpsert) SetHash(v string) *FillUpsert {
	u.Set(fill.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *FillUpsert) UpdateHash() *FillUpsert {
	u.SetExcluded(fill.FieldHash)
	return u
}

// SetCrossed sets the "crossed" field.
func (u *FillUpsert) SetCrossed(v bool) *FillUpsert {
	u.Set(fill.FieldCrossed, v)
	return u
}

// UpdateCrossed sets the "crossed" field to the value that was provided on create.
func (u *FillUpsert) UpdateCrossed() *FillUpsert {
	u.SetExcluded(fill.FieldCrossed)
	return u
}

// SetFee sets the "fee" field.
func (u *FillUpsert) SetFee(v string) *FillUpsert {
	u.Set(fill.FieldFee, v)
	return u
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *FillUpsert) UpdateFee() *FillUpsert {
	u.SetExcluded(fill.FieldFee)
	return u
}

// SetOid sets the "oid" field.
func (u *FillUpsert) SetOid(v int64) *FillUpsert {
	u.Set(fill.FieldOid, v)
	return u
}

// UpdateOid sets the "oid" field to the value that was provided on create.
func (u *FillUpsert) UpdateOid() *FillUpsert {
	u.SetExcluded(fill.FieldOid)
	return u
}

// AddOid adds v to the "oid" field.
func (u *FillUpsert) AddOid(v int64) *FillUpsert {
	u.Add(fill.FieldOid, v)
	return u
}

// SetTid sets the "tid" field.
func (u *FillUpsert) SetTid(v int64) *FillUpsert {
	u.Set(fill.FieldTid, v)
	return u
}

// UpdateTid sets the "tid" field to the value that was provided on create.
func (u *FillUpsert) UpdateTid() *FillUpsert {
	u.SetExcluded(fill.FieldTid)
	return u
}

// AddTid adds v to the "tid" field.
func (u *FillUpsert) AddTid(v int64) *FillUpsert {
	u.Add(fill.FieldTid, v)
	return u
}

// SetFeeToken sets the "fee_token" field.
func (u *FillUpsert) SetFeeToken(v string) *FillUpsert {
	u.Set(fill.FieldFeeToken, v)
	return u
}

// UpdateFeeToken sets the "fee_token" field to the value that was provided on create.
func (u *FillUpsert) UpdateFeeToken() *FillUpsert {
	u.SetExcluded(fill.FieldFeeToken)
	return u
}

// SetBuilderFee sets the "builder_fee" field.
func (u *FillUpsert) SetBuilderFee(v string) *FillUpsert {
	u.Set(fill.FieldBuilderFee, v)
	return u
}

// UpdateBuilderFee sets the "builder_fee" field to the value that was provided on create.
func (u *FillUpsert) UpdateBuilderFee() *FillUpsert {
	u.SetExcluded(fill.FieldBuilderFee)
	return u
}

// ClearBuilderFee clears the value of the "builder_fee" field.
func (u *FillUpsert) ClearBuilderFee() *FillUpsert {
	u.SetNull(fill.FieldBuilderFee)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Fill.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FillUpsertOne) UpdateNewValues() *FillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Fill.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FillUpsertOne) Ignore() *FillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FillUpsertOne) DoNothing() *FillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FillCreate.OnConflict
// documentation for more info.
func (u *FillUpsertOne) Update(set func(*FillUpsert)) *FillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FillUpsert{UpdateSet: update})
	}))
	return u
}

// SetCoin sets the "coin" field.
func (u *FillUpsertOne) SetCoin(v string) *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.SetCoin(v)
	})
}

// UpdateCoin sets the "coin" field to the value that was provided on create.
func (u *FillUpsertOne) UpdateCoin() *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.UpdateCoin()
	})
}

// SetAddress sets the "address" field.
func (u *FillUpsertOne) SetAddress(v string) *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *FillUpsertOne) UpdateAddress() *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.UpdateAddress()
	})
}

// SetPx sets the "px" field.
func (u *FillUpsertOne) SetPx(v string) *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.SetPx(v)
	})
}

// UpdatePx sets the "px" field to the value that was provided on create.
func (u *FillUpsertOne) UpdatePx() *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.UpdatePx()
	})
}

// SetSz sets the "sz" field.
func (u *FillUpsertOne) SetSz(v string) *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.SetSz(v)
	})
}

// UpdateSz sets the "sz" field to the value that was provided on create.
func (u *FillUpsertOne) UpdateSz() *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.UpdateSz()
	})
}

// SetSide sets the "side" field.
func (u *FillUpsertOne) SetSide(v string) *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.SetSide(v)
	})
}

// UpdateSide sets the "side" field to the value that was provided on create.
func (u *FillUpsertOne) UpdateSide() *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.UpdateSide()
	})
}

// SetTime sets the "time" field.
func (u *FillUpsertOne) SetTime(v int64) *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *FillUpsertOne) AddTime(v int64) *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *FillUpsertOne) UpdateTime() *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.UpdateTime()
	})
}

// SetStartPosition sets the "start_position" field.
func (u *FillUpsertOne) SetStartPosition(v string) *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.SetStartPosition(v)
	})
}

// UpdateStartPosition sets the "start_position" field to the value that was provided on create.
func (u *FillUpsertOne) UpdateStartPosition() *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.UpdateStartPosition()
	})
}

// SetDir sets the "dir" field.
func (u *FillUpsertOne) SetDir(v string) *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.SetDir(v)
	})
}

// UpdateDir sets the "dir" field to the value that was provided on create.
func (u *FillUpsertOne) UpdateDir() *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.UpdateDir()
	})
}

// SetHash sets the "hash" field.
func (u *FillUpsertOne) SetHash(v string) *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *FillUpsertOne) UpdateHash() *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.UpdateHash()
	})
}

// SetCrossed sets the "crossed" field.
func (u *FillUpsertOne) SetCrossed(v bool) *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.SetCrossed(v)
	})
}

// UpdateCrossed sets the "crossed" field to the value that was provided on create.
func (u *FillUpsertOne) UpdateCrossed() *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.UpdateCrossed()
	})
}

// SetFee sets the "fee" field.
func (u *FillUpsertOne) SetFee(v string) *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.SetFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *FillUpsertOne) UpdateFee() *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.UpdateFee()
	})
}

// SetOid sets the "oid" field.
func (u *FillUpsertOne) SetOid(v int64) *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.SetOid(v)
	})
}

// AddOid adds v to the "oid" field.
func (u *FillUpsertOne) AddOid(v int64) *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.AddOid(v)
	})
}

// UpdateOid sets the "oid" field to the value that was provided on create.
func (u *FillUpsertOne) UpdateOid() *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.UpdateOid()
	})
}

// SetTid sets the "tid" field.
func (u *FillUpsertOne) SetTid(v int64) *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.SetTid(v)
	})
}

// AddTid adds v to the "tid" field.
func (u *FillUpsertOne) AddTid(v int64) *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.AddTid(v)
	})
}

// UpdateTid sets the "tid" field to the value that was provided on create.
func (u *FillUpsertOne) UpdateTid() *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.UpdateTid()
	})
}

// SetFeeToken sets the "fee_token" field.
func (u *FillUpsertOne) SetFeeToken(v string) *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.SetFeeToken(v)
	})
}

// UpdateFeeToken sets the "fee_token" field to the value that was provided on create.
func (u *FillUpsertOne) UpdateFeeToken() *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.UpdateFeeToken()
	})
}

// SetBuilderFee sets the "builder_fee" field.
func (u *FillUpsertOne) SetBuilderFee(v string) *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.SetBuilderFee(v)
	})
}

// UpdateBuilderFee sets the "builder_fee" field to the value that was provided on create.
func (u *FillUpsertOne) UpdateBuilderFee() *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.UpdateBuilderFee()
	})
}

// ClearBuilderFee clears the value of the "builder_fee" field.
func (u *FillUpsertOne) ClearBuilderFee() *FillUpsertOne {
	return u.Update(func(s *FillUpsert) {
		s.ClearBuilderFee()
	})
}

// Exec executes the query.
func (u *FillUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FillCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FillUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FillUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FillUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FillCreateBulk is the builder for creating many Fill entities in bulk.
type FillCreateBulk struct {
	config
	err      error
	builders []*FillCreate
	conflict []sql.ConflictOption
}

// Save creates the Fill entities in the database.
func (fcb *FillCreateBulk) Save(ctx context.Context) ([]*Fill, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Fill, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FillMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FillCreateBulk) SaveX(ctx context.Context) []*Fill {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FillCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FillCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Fill.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FillUpsert) {
//			SetCoin(v+v).
//		}).
//		Exec(ctx)
func (fcb *FillCreateBulk) OnConflict(opts ...sql.ConflictOption) *FillUpsertBulk {
	fcb.conflict = opts
	return &FillUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Fill.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *FillCreateBulk) OnConflictColumns(columns ...string) *FillUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FillUpsertBulk{
		create: fcb,
	}
}

// FillUpsertBulk is the builder for "upsert"-ing
// a bulk of Fill nodes.
type FillUpsertBulk struct {
	create *FillCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Fill.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FillUpsertBulk) UpdateNewValues() *FillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Fill.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FillUpsertBulk) Ignore() *FillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FillUpsertBulk) DoNothing() *FillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FillCreateBulk.OnConflict
// documentation for more info.
func (u *FillUpsertBulk) Update(set func(*FillUpsert)) *FillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FillUpsert{UpdateSet: update})
	}))
	return u
}

// SetCoin sets the "coin" field.
func (u *FillUpsertBulk) SetCoin(v string) *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.SetCoin(v)
	})
}

// UpdateCoin sets the "coin" field to the value that was provided on create.
func (u *FillUpsertBulk) UpdateCoin() *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.UpdateCoin()
	})
}

// SetAddress sets the "address" field.
func (u *FillUpsertBulk) SetAddress(v string) *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *FillUpsertBulk) UpdateAddress() *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.UpdateAddress()
	})
}

// SetPx sets the "px" field.
func (u *FillUpsertBulk) SetPx(v string) *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.SetPx(v)
	})
}

// UpdatePx sets the "px" field to the value that was provided on create.
func (u *FillUpsertBulk) UpdatePx() *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.UpdatePx()
	})
}

// SetSz sets the "sz" field.
func (u *FillUpsertBulk) SetSz(v string) *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.SetSz(v)
	})
}

// UpdateSz sets the "sz" field to the value that was provided on create.
func (u *FillUpsertBulk) UpdateSz() *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.UpdateSz()
	})
}

// SetSide sets the "side" field.
func (u *FillUpsertBulk) SetSide(v string) *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.SetSide(v)
	})
}

// UpdateSide sets the "side" field to the value that was provided on create.
func (u *FillUpsertBulk) UpdateSide() *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.UpdateSide()
	})
}

// SetTime sets the "time" field.
func (u *FillUpsertBulk) SetTime(v int64) *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *FillUpsertBulk) AddTime(v int64) *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *FillUpsertBulk) UpdateTime() *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.UpdateTime()
	})
}

// SetStartPosition sets the "start_position" field.
func (u *FillUpsertBulk) SetStartPosition(v string) *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.SetStartPosition(v)
	})
}

// UpdateStartPosition sets the "start_position" field to the value that was provided on create.
func (u *FillUpsertBulk) UpdateStartPosition() *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.UpdateStartPosition()
	})
}

// SetDir sets the "dir" field.
func (u *FillUpsertBulk) SetDir(v string) *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.SetDir(v)
	})
}

// UpdateDir sets the "dir" field to the value that was provided on create.
func (u *FillUpsertBulk) UpdateDir() *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.UpdateDir()
	})
}

// SetHash sets the "hash" field.
func (u *FillUpsertBulk) SetHash(v string) *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *FillUpsertBulk) UpdateHash() *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.UpdateHash()
	})
}

// SetCrossed sets the "crossed" field.
func (u *FillUpsertBulk) SetCrossed(v bool) *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.SetCrossed(v)
	})
}

// UpdateCrossed sets the "crossed" field to the value that was provided on create.
func (u *FillUpsertBulk) UpdateCrossed() *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.UpdateCrossed()
	})
}

// SetFee sets the "fee" field.
func (u *FillUpsertBulk) SetFee(v string) *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.SetFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *FillUpsertBulk) UpdateFee() *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.UpdateFee()
	})
}

// SetOid sets the "oid" field.
func (u *FillUpsertBulk) SetOid(v int64) *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.SetOid(v)
	})
}

// AddOid adds v to the "oid" field.
func (u *FillUpsertBulk) AddOid(v int64) *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.AddOid(v)
	})
}

// UpdateOid sets the "oid" field to the value that was provided on create.
func (u *FillUpsertBulk) UpdateOid() *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.UpdateOid()
	})
}

// SetTid sets the "tid" field.
func (u *FillUpsertBulk) SetTid(v int64) *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.SetTid(v)
	})
}

// AddTid adds v to the "tid" field.
func (u *FillUpsertBulk) AddTid(v int64) *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.AddTid(v)
	})
}

// UpdateTid sets the "tid" field to the value that was provided on create.
func (u *FillUpsertBulk) UpdateTid() *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.UpdateTid()
	})
}

// SetFeeToken sets the "fee_token" field.
func (u *FillUpsertBulk) SetFeeToken(v string) *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.SetFeeToken(v)
	})
}

// UpdateFeeToken sets the "fee_token" field to the value that was provided on create.
func (u *FillUpsertBulk) UpdateFeeToken() *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.UpdateFeeToken()
	})
}

// SetBuilderFee sets the "builder_fee" field.
func (u *FillUpsertBulk) SetBuilderFee(v string) *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.SetBuilderFee(v)
	})
}

// UpdateBuilderFee sets the "builder_fee" field to the value that was provided on create.
func (u *FillUpsertBulk) UpdateBuilderFee() *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.UpdateBuilderFee()
	})
}

// ClearBuilderFee clears the value of the "builder_fee" field.
func (u *FillUpsertBulk) ClearBuilderFee() *FillUpsertBulk {
	return u.Update(func(s *FillUpsert) {
		s.ClearBuilderFee()
	})
}

// Exec executes the query.
func (u *FillUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FillCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FillCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FillUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
