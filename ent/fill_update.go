// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/fill"
	"github.com/yoshiso/hypersync/ent/predicate"
)

// FillUpdate is the builder for updating Fill entities.
type FillUpdate struct {
	config
	hooks    []Hook
	mutation *FillMutation
}

// Where appends a list predicates to the FillUpdate builder.
func (fu *FillUpdate) Where(ps ...predicate.Fill) *FillUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetCoin sets the "coin" field.
func (fu *FillUpdate) SetCoin(s string) *FillUpdate {
	fu.mutation.SetCoin(s)
	return fu
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (fu *FillUpdate) SetNillableCoin(s *string) *FillUpdate {
	if s != nil {
		fu.SetCoin(*s)
	}
	return fu
}

// SetAddress sets the "address" field.
func (fu *FillUpdate) SetAddress(s string) *FillUpdate {
	fu.mutation.SetAddress(s)
	return fu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (fu *FillUpdate) SetNillableAddress(s *string) *FillUpdate {
	if s != nil {
		fu.SetAddress(*s)
	}
	return fu
}

// SetPx sets the "px" field.
func (fu *FillUpdate) SetPx(s string) *FillUpdate {
	fu.mutation.SetPx(s)
	return fu
}

// SetNillablePx sets the "px" field if the given value is not nil.
func (fu *FillUpdate) SetNillablePx(s *string) *FillUpdate {
	if s != nil {
		fu.SetPx(*s)
	}
	return fu
}

// SetSz sets the "sz" field.
func (fu *FillUpdate) SetSz(s string) *FillUpdate {
	fu.mutation.SetSz(s)
	return fu
}

// SetNillableSz sets the "sz" field if the given value is not nil.
func (fu *FillUpdate) SetNillableSz(s *string) *FillUpdate {
	if s != nil {
		fu.SetSz(*s)
	}
	return fu
}

// SetSide sets the "side" field.
func (fu *FillUpdate) SetSide(s string) *FillUpdate {
	fu.mutation.SetSide(s)
	return fu
}

// SetNillableSide sets the "side" field if the given value is not nil.
func (fu *FillUpdate) SetNillableSide(s *string) *FillUpdate {
	if s != nil {
		fu.SetSide(*s)
	}
	return fu
}

// SetTime sets the "time" field.
func (fu *FillUpdate) SetTime(i int64) *FillUpdate {
	fu.mutation.ResetTime()
	fu.mutation.SetTime(i)
	return fu
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (fu *FillUpdate) SetNillableTime(i *int64) *FillUpdate {
	if i != nil {
		fu.SetTime(*i)
	}
	return fu
}

// AddTime adds i to the "time" field.
func (fu *FillUpdate) AddTime(i int64) *FillUpdate {
	fu.mutation.AddTime(i)
	return fu
}

// SetStartPosition sets the "start_position" field.
func (fu *FillUpdate) SetStartPosition(s string) *FillUpdate {
	fu.mutation.SetStartPosition(s)
	return fu
}

// SetNillableStartPosition sets the "start_position" field if the given value is not nil.
func (fu *FillUpdate) SetNillableStartPosition(s *string) *FillUpdate {
	if s != nil {
		fu.SetStartPosition(*s)
	}
	return fu
}

// SetDir sets the "dir" field.
func (fu *FillUpdate) SetDir(s string) *FillUpdate {
	fu.mutation.SetDir(s)
	return fu
}

// SetNillableDir sets the "dir" field if the given value is not nil.
func (fu *FillUpdate) SetNillableDir(s *string) *FillUpdate {
	if s != nil {
		fu.SetDir(*s)
	}
	return fu
}

// SetHash sets the "hash" field.
func (fu *FillUpdate) SetHash(s string) *FillUpdate {
	fu.mutation.SetHash(s)
	return fu
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (fu *FillUpdate) SetNillableHash(s *string) *FillUpdate {
	if s != nil {
		fu.SetHash(*s)
	}
	return fu
}

// SetCrossed sets the "crossed" field.
func (fu *FillUpdate) SetCrossed(b bool) *FillUpdate {
	fu.mutation.SetCrossed(b)
	return fu
}

// SetNillableCrossed sets the "crossed" field if the given value is not nil.
func (fu *FillUpdate) SetNillableCrossed(b *bool) *FillUpdate {
	if b != nil {
		fu.SetCrossed(*b)
	}
	return fu
}

// SetFee sets the "fee" field.
func (fu *FillUpdate) SetFee(s string) *FillUpdate {
	fu.mutation.SetFee(s)
	return fu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (fu *FillUpdate) SetNillableFee(s *string) *FillUpdate {
	if s != nil {
		fu.SetFee(*s)
	}
	return fu
}

// SetOid sets the "oid" field.
func (fu *FillUpdate) SetOid(i int64) *FillUpdate {
	fu.mutation.ResetOid()
	fu.mutation.SetOid(i)
	return fu
}

// SetNillableOid sets the "oid" field if the given value is not nil.
func (fu *FillUpdate) SetNillableOid(i *int64) *FillUpdate {
	if i != nil {
		fu.SetOid(*i)
	}
	return fu
}

// AddOid adds i to the "oid" field.
func (fu *FillUpdate) AddOid(i int64) *FillUpdate {
	fu.mutation.AddOid(i)
	return fu
}

// SetTid sets the "tid" field.
func (fu *FillUpdate) SetTid(i int64) *FillUpdate {
	fu.mutation.ResetTid()
	fu.mutation.SetTid(i)
	return fu
}

// SetNillableTid sets the "tid" field if the given value is not nil.
func (fu *FillUpdate) SetNillableTid(i *int64) *FillUpdate {
	if i != nil {
		fu.SetTid(*i)
	}
	return fu
}

// AddTid adds i to the "tid" field.
func (fu *FillUpdate) AddTid(i int64) *FillUpdate {
	fu.mutation.AddTid(i)
	return fu
}

// SetFeeToken sets the "fee_token" field.
func (fu *FillUpdate) SetFeeToken(s string) *FillUpdate {
	fu.mutation.SetFeeToken(s)
	return fu
}

// SetNillableFeeToken sets the "fee_token" field if the given value is not nil.
func (fu *FillUpdate) SetNillableFeeToken(s *string) *FillUpdate {
	if s != nil {
		fu.SetFeeToken(*s)
	}
	return fu
}

// SetBuilderFee sets the "builder_fee" field.
func (fu *FillUpdate) SetBuilderFee(s string) *FillUpdate {
	fu.mutation.SetBuilderFee(s)
	return fu
}

// SetNillableBuilderFee sets the "builder_fee" field if the given value is not nil.
func (fu *FillUpdate) SetNillableBuilderFee(s *string) *FillUpdate {
	if s != nil {
		fu.SetBuilderFee(*s)
	}
	return fu
}

// ClearBuilderFee clears the value of the "builder_fee" field.
func (fu *FillUpdate) ClearBuilderFee() *FillUpdate {
	fu.mutation.ClearBuilderFee()
	return fu
}

// Mutation returns the FillMutation object of the builder.
func (fu *FillUpdate) Mutation() *FillMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FillUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FillUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FillUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FillUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(fill.Table, fill.Columns, sqlgraph.NewFieldSpec(fill.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Coin(); ok {
		_spec.SetField(fill.FieldCoin, field.TypeString, value)
	}
	if value, ok := fu.mutation.Address(); ok {
		_spec.SetField(fill.FieldAddress, field.TypeString, value)
	}
	if value, ok := fu.mutation.Px(); ok {
		_spec.SetField(fill.FieldPx, field.TypeString, value)
	}
	if value, ok := fu.mutation.Sz(); ok {
		_spec.SetField(fill.FieldSz, field.TypeString, value)
	}
	if value, ok := fu.mutation.Side(); ok {
		_spec.SetField(fill.FieldSide, field.TypeString, value)
	}
	if value, ok := fu.mutation.Time(); ok {
		_spec.SetField(fill.FieldTime, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.AddedTime(); ok {
		_spec.AddField(fill.FieldTime, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.StartPosition(); ok {
		_spec.SetField(fill.FieldStartPosition, field.TypeString, value)
	}
	if value, ok := fu.mutation.Dir(); ok {
		_spec.SetField(fill.FieldDir, field.TypeString, value)
	}
	if value, ok := fu.mutation.Hash(); ok {
		_spec.SetField(fill.FieldHash, field.TypeString, value)
	}
	if value, ok := fu.mutation.Crossed(); ok {
		_spec.SetField(fill.FieldCrossed, field.TypeBool, value)
	}
	if value, ok := fu.mutation.Fee(); ok {
		_spec.SetField(fill.FieldFee, field.TypeString, value)
	}
	if value, ok := fu.mutation.Oid(); ok {
		_spec.SetField(fill.FieldOid, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.AddedOid(); ok {
		_spec.AddField(fill.FieldOid, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.Tid(); ok {
		_spec.SetField(fill.FieldTid, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.AddedTid(); ok {
		_spec.AddField(fill.FieldTid, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.FeeToken(); ok {
		_spec.SetField(fill.FieldFeeToken, field.TypeString, value)
	}
	if value, ok := fu.mutation.BuilderFee(); ok {
		_spec.SetField(fill.FieldBuilderFee, field.TypeString, value)
	}
	if fu.mutation.BuilderFeeCleared() {
		_spec.ClearField(fill.FieldBuilderFee, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FillUpdateOne is the builder for updating a single Fill entity.
type FillUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FillMutation
}

// SetCoin sets the "coin" field.
func (fuo *FillUpdateOne) SetCoin(s string) *FillUpdateOne {
	fuo.mutation.SetCoin(s)
	return fuo
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (fuo *FillUpdateOne) SetNillableCoin(s *string) *FillUpdateOne {
	if s != nil {
		fuo.SetCoin(*s)
	}
	return fuo
}

// SetAddress sets the "address" field.
func (fuo *FillUpdateOne) SetAddress(s string) *FillUpdateOne {
	fuo.mutation.SetAddress(s)
	return fuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (fuo *FillUpdateOne) SetNillableAddress(s *string) *FillUpdateOne {
	if s != nil {
		fuo.SetAddress(*s)
	}
	return fuo
}

// SetPx sets the "px" field.
func (fuo *FillUpdateOne) SetPx(s string) *FillUpdateOne {
	fuo.mutation.SetPx(s)
	return fuo
}

// SetNillablePx sets the "px" field if the given value is not nil.
func (fuo *FillUpdateOne) SetNillablePx(s *string) *FillUpdateOne {
	if s != nil {
		fuo.SetPx(*s)
	}
	return fuo
}

// SetSz sets the "sz" field.
func (fuo *FillUpdateOne) SetSz(s string) *FillUpdateOne {
	fuo.mutation.SetSz(s)
	return fuo
}

// SetNillableSz sets the "sz" field if the given value is not nil.
func (fuo *FillUpdateOne) SetNillableSz(s *string) *FillUpdateOne {
	if s != nil {
		fuo.SetSz(*s)
	}
	return fuo
}

// SetSide sets the "side" field.
func (fuo *FillUpdateOne) SetSide(s string) *FillUpdateOne {
	fuo.mutation.SetSide(s)
	return fuo
}

// SetNillableSide sets the "side" field if the given value is not nil.
func (fuo *FillUpdateOne) SetNillableSide(s *string) *FillUpdateOne {
	if s != nil {
		fuo.SetSide(*s)
	}
	return fuo
}

// SetTime sets the "time" field.
func (fuo *FillUpdateOne) SetTime(i int64) *FillUpdateOne {
	fuo.mutation.ResetTime()
	fuo.mutation.SetTime(i)
	return fuo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (fuo *FillUpdateOne) SetNillableTime(i *int64) *FillUpdateOne {
	if i != nil {
		fuo.SetTime(*i)
	}
	return fuo
}

// AddTime adds i to the "time" field.
func (fuo *FillUpdateOne) AddTime(i int64) *FillUpdateOne {
	fuo.mutation.AddTime(i)
	return fuo
}

// SetStartPosition sets the "start_position" field.
func (fuo *FillUpdateOne) SetStartPosition(s string) *FillUpdateOne {
	fuo.mutation.SetStartPosition(s)
	return fuo
}

// SetNillableStartPosition sets the "start_position" field if the given value is not nil.
func (fuo *FillUpdateOne) SetNillableStartPosition(s *string) *FillUpdateOne {
	if s != nil {
		fuo.SetStartPosition(*s)
	}
	return fuo
}

// SetDir sets the "dir" field.
func (fuo *FillUpdateOne) SetDir(s string) *FillUpdateOne {
	fuo.mutation.SetDir(s)
	return fuo
}

// SetNillableDir sets the "dir" field if the given value is not nil.
func (fuo *FillUpdateOne) SetNillableDir(s *string) *FillUpdateOne {
	if s != nil {
		fuo.SetDir(*s)
	}
	return fuo
}

// SetHash sets the "hash" field.
func (fuo *FillUpdateOne) SetHash(s string) *FillUpdateOne {
	fuo.mutation.SetHash(s)
	return fuo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (fuo *FillUpdateOne) SetNillableHash(s *string) *FillUpdateOne {
	if s != nil {
		fuo.SetHash(*s)
	}
	return fuo
}

// SetCrossed sets the "crossed" field.
func (fuo *FillUpdateOne) SetCrossed(b bool) *FillUpdateOne {
	fuo.mutation.SetCrossed(b)
	return fuo
}

// SetNillableCrossed sets the "crossed" field if the given value is not nil.
func (fuo *FillUpdateOne) SetNillableCrossed(b *bool) *FillUpdateOne {
	if b != nil {
		fuo.SetCrossed(*b)
	}
	return fuo
}

// SetFee sets the "fee" field.
func (fuo *FillUpdateOne) SetFee(s string) *FillUpdateOne {
	fuo.mutation.SetFee(s)
	return fuo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (fuo *FillUpdateOne) SetNillableFee(s *string) *FillUpdateOne {
	if s != nil {
		fuo.SetFee(*s)
	}
	return fuo
}

// SetOid sets the "oid" field.
func (fuo *FillUpdateOne) SetOid(i int64) *FillUpdateOne {
	fuo.mutation.ResetOid()
	fuo.mutation.SetOid(i)
	return fuo
}

// SetNillableOid sets the "oid" field if the given value is not nil.
func (fuo *FillUpdateOne) SetNillableOid(i *int64) *FillUpdateOne {
	if i != nil {
		fuo.SetOid(*i)
	}
	return fuo
}

// AddOid adds i to the "oid" field.
func (fuo *FillUpdateOne) AddOid(i int64) *FillUpdateOne {
	fuo.mutation.AddOid(i)
	return fuo
}

// SetTid sets the "tid" field.
func (fuo *FillUpdateOne) SetTid(i int64) *FillUpdateOne {
	fuo.mutation.ResetTid()
	fuo.mutation.SetTid(i)
	return fuo
}

// SetNillableTid sets the "tid" field if the given value is not nil.
func (fuo *FillUpdateOne) SetNillableTid(i *int64) *FillUpdateOne {
	if i != nil {
		fuo.SetTid(*i)
	}
	return fuo
}

// AddTid adds i to the "tid" field.
func (fuo *FillUpdateOne) AddTid(i int64) *FillUpdateOne {
	fuo.mutation.AddTid(i)
	return fuo
}

// SetFeeToken sets the "fee_token" field.
func (fuo *FillUpdateOne) SetFeeToken(s string) *FillUpdateOne {
	fuo.mutation.SetFeeToken(s)
	return fuo
}

// SetNillableFeeToken sets the "fee_token" field if the given value is not nil.
func (fuo *FillUpdateOne) SetNillableFeeToken(s *string) *FillUpdateOne {
	if s != nil {
		fuo.SetFeeToken(*s)
	}
	return fuo
}

// SetBuilderFee sets the "builder_fee" field.
func (fuo *FillUpdateOne) SetBuilderFee(s string) *FillUpdateOne {
	fuo.mutation.SetBuilderFee(s)
	return fuo
}

// SetNillableBuilderFee sets the "builder_fee" field if the given value is not nil.
func (fuo *FillUpdateOne) SetNillableBuilderFee(s *string) *FillUpdateOne {
	if s != nil {
		fuo.SetBuilderFee(*s)
	}
	return fuo
}

// ClearBuilderFee clears the value of the "builder_fee" field.
func (fuo *FillUpdateOne) ClearBuilderFee() *FillUpdateOne {
	fuo.mutation.ClearBuilderFee()
	return fuo
}

// Mutation returns the FillMutation object of the builder.
func (fuo *FillUpdateOne) Mutation() *FillMutation {
	return fuo.mutation
}

// Where appends a list predicates to the FillUpdate builder.
func (fuo *FillUpdateOne) Where(ps ...predicate.Fill) *FillUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FillUpdateOne) Select(field string, fields ...string) *FillUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Fill entity.
func (fuo *FillUpdateOne) Save(ctx context.Context) (*Fill, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FillUpdateOne) SaveX(ctx context.Context) *Fill {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FillUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FillUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FillUpdateOne) sqlSave(ctx context.Context) (_node *Fill, err error) {
	_spec := sqlgraph.NewUpdateSpec(fill.Table, fill.Columns, sqlgraph.NewFieldSpec(fill.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Fill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fill.FieldID)
		for _, f := range fields {
			if !fill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Coin(); ok {
		_spec.SetField(fill.FieldCoin, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Address(); ok {
		_spec.SetField(fill.FieldAddress, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Px(); ok {
		_spec.SetField(fill.FieldPx, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Sz(); ok {
		_spec.SetField(fill.FieldSz, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Side(); ok {
		_spec.SetField(fill.FieldSide, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Time(); ok {
		_spec.SetField(fill.FieldTime, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.AddedTime(); ok {
		_spec.AddField(fill.FieldTime, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.StartPosition(); ok {
		_spec.SetField(fill.FieldStartPosition, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Dir(); ok {
		_spec.SetField(fill.FieldDir, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Hash(); ok {
		_spec.SetField(fill.FieldHash, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Crossed(); ok {
		_spec.SetField(fill.FieldCrossed, field.TypeBool, value)
	}
	if value, ok := fuo.mutation.Fee(); ok {
		_spec.SetField(fill.FieldFee, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Oid(); ok {
		_spec.SetField(fill.FieldOid, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.AddedOid(); ok {
		_spec.AddField(fill.FieldOid, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.Tid(); ok {
		_spec.SetField(fill.FieldTid, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.AddedTid(); ok {
		_spec.AddField(fill.FieldTid, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.FeeToken(); ok {
		_spec.SetField(fill.FieldFeeToken, field.TypeString, value)
	}
	if value, ok := fuo.mutation.BuilderFee(); ok {
		_spec.SetField(fill.FieldBuilderFee, field.TypeString, value)
	}
	if fuo.mutation.BuilderFeeCleared() {
		_spec.ClearField(fill.FieldBuilderFee, field.TypeString)
	}
	_node = &Fill{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
