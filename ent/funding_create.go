// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/funding"
)

// FundingCreate is the builder for creating a Funding entity.
type FundingCreate struct {
	config
	mutation *FundingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTime sets the "time" field.
func (fc *FundingCreate) SetTime(i int64) *FundingCreate {
	fc.mutation.SetTime(i)
	return fc
}

// SetCoin sets the "coin" field.
func (fc *FundingCreate) SetCoin(s string) *FundingCreate {
	fc.mutation.SetCoin(s)
	return fc
}

// SetUsdc sets the "usdc" field.
func (fc *FundingCreate) SetUsdc(s string) *FundingCreate {
	fc.mutation.SetUsdc(s)
	return fc
}

// SetSzi sets the "szi" field.
func (fc *FundingCreate) SetSzi(s string) *FundingCreate {
	fc.mutation.SetSzi(s)
	return fc
}

// SetFundingRate sets the "funding_rate" field.
func (fc *FundingCreate) SetFundingRate(s string) *FundingCreate {
	fc.mutation.SetFundingRate(s)
	return fc
}

// SetAddress sets the "address" field.
func (fc *FundingCreate) SetAddress(s string) *FundingCreate {
	fc.mutation.SetAddress(s)
	return fc
}

// Mutation returns the FundingMutation object of the builder.
func (fc *FundingCreate) Mutation() *FundingMutation {
	return fc.mutation
}

// Save creates the Funding in the database.
func (fc *FundingCreate) Save(ctx context.Context) (*Funding, error) {
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FundingCreate) SaveX(ctx context.Context) *Funding {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FundingCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FundingCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FundingCreate) check() error {
	if _, ok := fc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "Funding.time"`)}
	}
	if _, ok := fc.mutation.Coin(); !ok {
		return &ValidationError{Name: "coin", err: errors.New(`ent: missing required field "Funding.coin"`)}
	}
	if _, ok := fc.mutation.Usdc(); !ok {
		return &ValidationError{Name: "usdc", err: errors.New(`ent: missing required field "Funding.usdc"`)}
	}
	if _, ok := fc.mutation.Szi(); !ok {
		return &ValidationError{Name: "szi", err: errors.New(`ent: missing required field "Funding.szi"`)}
	}
	if _, ok := fc.mutation.FundingRate(); !ok {
		return &ValidationError{Name: "funding_rate", err: errors.New(`ent: missing required field "Funding.funding_rate"`)}
	}
	if _, ok := fc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Funding.address"`)}
	}
	return nil
}

func (fc *FundingCreate) sqlSave(ctx context.Context) (*Funding, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FundingCreate) createSpec() (*Funding, *sqlgraph.CreateSpec) {
	var (
		_node = &Funding{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(funding.Table, sqlgraph.NewFieldSpec(funding.FieldID, field.TypeInt))
	)
	_spec.OnConflict = fc.conflict
	if value, ok := fc.mutation.Time(); ok {
		_spec.SetField(funding.FieldTime, field.TypeInt64, value)
		_node.Time = value
	}
	if value, ok := fc.mutation.Coin(); ok {
		_spec.SetField(funding.FieldCoin, field.TypeString, value)
		_node.Coin = value
	}
	if value, ok := fc.mutation.Usdc(); ok {
		_spec.SetField(funding.FieldUsdc, field.TypeString, value)
		_node.Usdc = value
	}
	if value, ok := fc.mutation.Szi(); ok {
		_spec.SetField(funding.FieldSzi, field.TypeString, value)
		_node.Szi = value
	}
	if value, ok := fc.mutation.FundingRate(); ok {
		_spec.SetField(funding.FieldFundingRate, field.TypeString, value)
		_node.FundingRate = value
	}
	if value, ok := fc.mutation.Address(); ok {
		_spec.SetField(funding.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Funding.Create().
//		SetTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FundingUpsert) {
//			SetTime(v+v).
//		}).
//		Exec(ctx)
func (fc *FundingCreate) OnConflict(opts ...sql.ConflictOption) *FundingUpsertOne {
	fc.conflict = opts
	return &FundingUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Funding.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *FundingCreate) OnConflictColumns(columns ...string) *FundingUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FundingUpsertOne{
		create: fc,
	}
}

type (
	// FundingUpsertOne is the builder for "upsert"-ing
	//  one Funding node.
	FundingUpsertOne struct {
		create *FundingCreate
	}

	// FundingUpsert is the "OnConflict" setter.
	FundingUpsert struct {
		*sql.UpdateSet
	}
)

// SetTime sets the "time" field.
func (u *FundingUpsert) SetTime(v int64) *FundingUpsert {
	u.Set(funding.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *FundingUpsert) UpdateTime() *FundingUpsert {
	u.SetExcluded(funding.FieldTime)
	return u
}

// AddTime adds v to the "time" field.
func (u *FundingUpsert) AddTime(v int64) *FundingUpsert {
	u.Add(funding.FieldTime, v)
	return u
}

// SetCoin sets the "coin" field.
func (u *FundingUpsert) SetCoin(v string) *FundingUpsert {
	u.Set(funding.FieldCoin, v)
	return u
}

// UpdateCoin sets the "coin" field to the value that was provided on create.
func (u *FundingUpsert) UpdateCoin() *FundingUpsert {
	u.SetExcluded(funding.FieldCoin)
	return u
}

// SetUsdc sets the "usdc" field.
func (u *FundingUpsert) SetUsdc(v string) *FundingUpsert {
	u.Set(funding.FieldUsdc, v)
	return u
}

// UpdateUsdc sets the "usdc" field to the value that was provided on create.
func (u *FundingUpsert) UpdateUsdc() *FundingUpsert {
	u.SetExcluded(funding.FieldUsdc)
	return u
}

// SetSzi sets the "szi" field.
func (u *FundingUpsert) SetSzi(v string) *FundingUpsert {
	u.Set(funding.FieldSzi, v)
	return u
}

// UpdateSzi sets the "szi" field to the value that was provided on create.
func (u *FundingUpsert) UpdateSzi() *FundingUpsert {
	u.SetExcluded(funding.FieldSzi)
	return u
}

// SetFundingRate sets the "funding_rate" field.
func (u *FundingUpsert) SetFundingRate(v string) *FundingUpsert {
	u.Set(funding.FieldFundingRate, v)
	return u
}

// UpdateFundingRate sets the "funding_rate" field to the value that was provided on create.
func (u *FundingUpsert) UpdateFundingRate() *FundingUpsert {
	u.SetExcluded(funding.FieldFundingRate)
	return u
}

// SetAddress sets the "address" field.
func (u *FundingUpsert) SetAddress(v string) *FundingUpsert {
	u.Set(funding.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *FundingUpsert) UpdateAddress() *FundingUpsert {
	u.SetExcluded(funding.FieldAddress)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Funding.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FundingUpsertOne) UpdateNewValues() *FundingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Funding.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FundingUpsertOne) Ignore() *FundingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FundingUpsertOne) DoNothing() *FundingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FundingCreate.OnConflict
// documentation for more info.
func (u *FundingUpsertOne) Update(set func(*FundingUpsert)) *FundingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FundingUpsert{UpdateSet: update})
	}))
	return u
}

// SetTime sets the "time" field.
func (u *FundingUpsertOne) SetTime(v int64) *FundingUpsertOne {
	return u.Update(func(s *FundingUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *FundingUpsertOne) AddTime(v int64) *FundingUpsertOne {
	return u.Update(func(s *FundingUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *FundingUpsertOne) UpdateTime() *FundingUpsertOne {
	return u.Update(func(s *FundingUpsert) {
		s.UpdateTime()
	})
}

// SetCoin sets the "coin" field.
func (u *FundingUpsertOne) SetCoin(v string) *FundingUpsertOne {
	return u.Update(func(s *FundingUpsert) {
		s.SetCoin(v)
	})
}

// UpdateCoin sets the "coin" field to the value that was provided on create.
func (u *FundingUpsertOne) UpdateCoin() *FundingUpsertOne {
	return u.Update(func(s *FundingUpsert) {
		s.UpdateCoin()
	})
}

// SetUsdc sets the "usdc" field.
func (u *FundingUpsertOne) SetUsdc(v string) *FundingUpsertOne {
	return u.Update(func(s *FundingUpsert) {
		s.SetUsdc(v)
	})
}

// UpdateUsdc sets the "usdc" field to the value that was provided on create.
func (u *FundingUpsertOne) UpdateUsdc() *FundingUpsertOne {
	return u.Update(func(s *FundingUpsert) {
		s.UpdateUsdc()
	})
}

// SetSzi sets the "szi" field.
func (u *FundingUpsertOne) SetSzi(v string) *FundingUpsertOne {
	return u.Update(func(s *FundingUpsert) {
		s.SetSzi(v)
	})
}

// UpdateSzi sets the "szi" field to the value that was provided on create.
func (u *FundingUpsertOne) UpdateSzi() *FundingUpsertOne {
	return u.Update(func(s *FundingUpsert) {
		s.UpdateSzi()
	})
}

// SetFundingRate sets the "funding_rate" field.
func (u *FundingUpsertOne) SetFundingRate(v string) *FundingUpsertOne {
	return u.Update(func(s *FundingUpsert) {
		s.SetFundingRate(v)
	})
}

// UpdateFundingRate sets the "funding_rate" field to the value that was provided on create.
func (u *FundingUpsertOne) UpdateFundingRate() *FundingUpsertOne {
	return u.Update(func(s *FundingUpsert) {
		s.UpdateFundingRate()
	})
}

// SetAddress sets the "address" field.
func (u *FundingUpsertOne) SetAddress(v string) *FundingUpsertOne {
	return u.Update(func(s *FundingUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *FundingUpsertOne) UpdateAddress() *FundingUpsertOne {
	return u.Update(func(s *FundingUpsert) {
		s.UpdateAddress()
	})
}

// Exec executes the query.
func (u *FundingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FundingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FundingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FundingUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FundingUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FundingCreateBulk is the builder for creating many Funding entities in bulk.
type FundingCreateBulk struct {
	config
	err      error
	builders []*FundingCreate
	conflict []sql.ConflictOption
}

// Save creates the Funding entities in the database.
func (fcb *FundingCreateBulk) Save(ctx context.Context) ([]*Funding, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Funding, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FundingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FundingCreateBulk) SaveX(ctx context.Context) []*Funding {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FundingCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FundingCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Funding.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FundingUpsert) {
//			SetTime(v+v).
//		}).
//		Exec(ctx)
func (fcb *FundingCreateBulk) OnConflict(opts ...sql.ConflictOption) *FundingUpsertBulk {
	fcb.conflict = opts
	return &FundingUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Funding.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *FundingCreateBulk) OnConflictColumns(columns ...string) *FundingUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FundingUpsertBulk{
		create: fcb,
	}
}

// FundingUpsertBulk is the builder for "upsert"-ing
// a bulk of Funding nodes.
type FundingUpsertBulk struct {
	create *FundingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Funding.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FundingUpsertBulk) UpdateNewValues() *FundingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Funding.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FundingUpsertBulk) Ignore() *FundingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FundingUpsertBulk) DoNothing() *FundingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FundingCreateBulk.OnConflict
// documentation for more info.
func (u *FundingUpsertBulk) Update(set func(*FundingUpsert)) *FundingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FundingUpsert{UpdateSet: update})
	}))
	return u
}

// SetTime sets the "time" field.
func (u *FundingUpsertBulk) SetTime(v int64) *FundingUpsertBulk {
	return u.Update(func(s *FundingUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *FundingUpsertBulk) AddTime(v int64) *FundingUpsertBulk {
	return u.Update(func(s *FundingUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *FundingUpsertBulk) UpdateTime() *FundingUpsertBulk {
	return u.Update(func(s *FundingUpsert) {
		s.UpdateTime()
	})
}

// SetCoin sets the "coin" field.
func (u *FundingUpsertBulk) SetCoin(v string) *FundingUpsertBulk {
	return u.Update(func(s *FundingUpsert) {
		s.SetCoin(v)
	})
}

// UpdateCoin sets the "coin" field to the value that was provided on create.
func (u *FundingUpsertBulk) UpdateCoin() *FundingUpsertBulk {
	return u.Update(func(s *FundingUpsert) {
		s.UpdateCoin()
	})
}

// SetUsdc sets the "usdc" field.
func (u *FundingUpsertBulk) SetUsdc(v string) *FundingUpsertBulk {
	return u.Update(func(s *FundingUpsert) {
		s.SetUsdc(v)
	})
}

// UpdateUsdc sets the "usdc" field to the value that was provided on create.
func (u *FundingUpsertBulk) UpdateUsdc() *FundingUpsertBulk {
	return u.Update(func(s *FundingUpsert) {
		s.UpdateUsdc()
	})
}

// SetSzi sets the "szi" field.
func (u *FundingUpsertBulk) SetSzi(v string) *FundingUpsertBulk {
	return u.Update(func(s *FundingUpsert) {
		s.SetSzi(v)
	})
}

// UpdateSzi sets the "szi" field to the value that was provided on create.
func (u *FundingUpsertBulk) UpdateSzi() *FundingUpsertBulk {
	return u.Update(func(s *FundingUpsert) {
		s.UpdateSzi()
	})
}

// SetFundingRate sets the "funding_rate" field.
func (u *FundingUpsertBulk) SetFundingRate(v string) *FundingUpsertBulk {
	return u.Update(func(s *FundingUpsert) {
		s.SetFundingRate(v)
	})
}

// UpdateFundingRate sets the "funding_rate" field to the value that was provided on create.
func (u *FundingUpsertBulk) UpdateFundingRate() *FundingUpsertBulk {
	return u.Update(func(s *FundingUpsert) {
		s.UpdateFundingRate()
	})
}

// SetAddress sets the "address" field.
func (u *FundingUpsertBulk) SetAddress(v string) *FundingUpsertBulk {
	return u.Update(func(s *FundingUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *FundingUpsertBulk) UpdateAddress() *FundingUpsertBulk {
	return u.Update(func(s *FundingUpsert) {
		s.UpdateAddress()
	})
}

// Exec executes the query.
func (u *FundingUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FundingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FundingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FundingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
