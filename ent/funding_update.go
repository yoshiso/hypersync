// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/funding"
	"github.com/yoshiso/hypersync/ent/predicate"
)

// FundingUpdate is the builder for updating Funding entities.
type FundingUpdate struct {
	config
	hooks    []Hook
	mutation *FundingMutation
}

// Where appends a list predicates to the FundingUpdate builder.
func (fu *FundingUpdate) Where(ps ...predicate.Funding) *FundingUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetTime sets the "time" field.
func (fu *FundingUpdate) SetTime(i int64) *FundingUpdate {
	fu.mutation.ResetTime()
	fu.mutation.SetTime(i)
	return fu
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (fu *FundingUpdate) SetNillableTime(i *int64) *FundingUpdate {
	if i != nil {
		fu.SetTime(*i)
	}
	return fu
}

// AddTime adds i to the "time" field.
func (fu *FundingUpdate) AddTime(i int64) *FundingUpdate {
	fu.mutation.AddTime(i)
	return fu
}

// SetCoin sets the "coin" field.
func (fu *FundingUpdate) SetCoin(s string) *FundingUpdate {
	fu.mutation.SetCoin(s)
	return fu
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (fu *FundingUpdate) SetNillableCoin(s *string) *FundingUpdate {
	if s != nil {
		fu.SetCoin(*s)
	}
	return fu
}

// SetUsdc sets the "usdc" field.
func (fu *FundingUpdate) SetUsdc(s string) *FundingUpdate {
	fu.mutation.SetUsdc(s)
	return fu
}

// SetNillableUsdc sets the "usdc" field if the given value is not nil.
func (fu *FundingUpdate) SetNillableUsdc(s *string) *FundingUpdate {
	if s != nil {
		fu.SetUsdc(*s)
	}
	return fu
}

// SetSzi sets the "szi" field.
func (fu *FundingUpdate) SetSzi(s string) *FundingUpdate {
	fu.mutation.SetSzi(s)
	return fu
}

// SetNillableSzi sets the "szi" field if the given value is not nil.
func (fu *FundingUpdate) SetNillableSzi(s *string) *FundingUpdate {
	if s != nil {
		fu.SetSzi(*s)
	}
	return fu
}

// SetFundingRate sets the "funding_rate" field.
func (fu *FundingUpdate) SetFundingRate(s string) *FundingUpdate {
	fu.mutation.SetFundingRate(s)
	return fu
}

// SetNillableFundingRate sets the "funding_rate" field if the given value is not nil.
func (fu *FundingUpdate) SetNillableFundingRate(s *string) *FundingUpdate {
	if s != nil {
		fu.SetFundingRate(*s)
	}
	return fu
}

// SetAddress sets the "address" field.
func (fu *FundingUpdate) SetAddress(s string) *FundingUpdate {
	fu.mutation.SetAddress(s)
	return fu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (fu *FundingUpdate) SetNillableAddress(s *string) *FundingUpdate {
	if s != nil {
		fu.SetAddress(*s)
	}
	return fu
}

// Mutation returns the FundingMutation object of the builder.
func (fu *FundingUpdate) Mutation() *FundingMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FundingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FundingUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FundingUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FundingUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FundingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(funding.Table, funding.Columns, sqlgraph.NewFieldSpec(funding.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Time(); ok {
		_spec.SetField(funding.FieldTime, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.AddedTime(); ok {
		_spec.AddField(funding.FieldTime, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.Coin(); ok {
		_spec.SetField(funding.FieldCoin, field.TypeString, value)
	}
	if value, ok := fu.mutation.Usdc(); ok {
		_spec.SetField(funding.FieldUsdc, field.TypeString, value)
	}
	if value, ok := fu.mutation.Szi(); ok {
		_spec.SetField(funding.FieldSzi, field.TypeString, value)
	}
	if value, ok := fu.mutation.FundingRate(); ok {
		_spec.SetField(funding.FieldFundingRate, field.TypeString, value)
	}
	if value, ok := fu.mutation.Address(); ok {
		_spec.SetField(funding.FieldAddress, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{funding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FundingUpdateOne is the builder for updating a single Funding entity.
type FundingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FundingMutation
}

// SetTime sets the "time" field.
func (fuo *FundingUpdateOne) SetTime(i int64) *FundingUpdateOne {
	fuo.mutation.ResetTime()
	fuo.mutation.SetTime(i)
	return fuo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (fuo *FundingUpdateOne) SetNillableTime(i *int64) *FundingUpdateOne {
	if i != nil {
		fuo.SetTime(*i)
	}
	return fuo
}

// AddTime adds i to the "time" field.
func (fuo *FundingUpdateOne) AddTime(i int64) *FundingUpdateOne {
	fuo.mutation.AddTime(i)
	return fuo
}

// SetCoin sets the "coin" field.
func (fuo *FundingUpdateOne) SetCoin(s string) *FundingUpdateOne {
	fuo.mutation.SetCoin(s)
	return fuo
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (fuo *FundingUpdateOne) SetNillableCoin(s *string) *FundingUpdateOne {
	if s != nil {
		fuo.SetCoin(*s)
	}
	return fuo
}

// SetUsdc sets the "usdc" field.
func (fuo *FundingUpdateOne) SetUsdc(s string) *FundingUpdateOne {
	fuo.mutation.SetUsdc(s)
	return fuo
}

// SetNillableUsdc sets the "usdc" field if the given value is not nil.
func (fuo *FundingUpdateOne) SetNillableUsdc(s *string) *FundingUpdateOne {
	if s != nil {
		fuo.SetUsdc(*s)
	}
	return fuo
}

// SetSzi sets the "szi" field.
func (fuo *FundingUpdateOne) SetSzi(s string) *FundingUpdateOne {
	fuo.mutation.SetSzi(s)
	return fuo
}

// SetNillableSzi sets the "szi" field if the given value is not nil.
func (fuo *FundingUpdateOne) SetNillableSzi(s *string) *FundingUpdateOne {
	if s != nil {
		fuo.SetSzi(*s)
	}
	return fuo
}

// SetFundingRate sets the "funding_rate" field.
func (fuo *FundingUpdateOne) SetFundingRate(s string) *FundingUpdateOne {
	fuo.mutation.SetFundingRate(s)
	return fuo
}

// SetNillableFundingRate sets the "funding_rate" field if the given value is not nil.
func (fuo *FundingUpdateOne) SetNillableFundingRate(s *string) *FundingUpdateOne {
	if s != nil {
		fuo.SetFundingRate(*s)
	}
	return fuo
}

// SetAddress sets the "address" field.
func (fuo *FundingUpdateOne) SetAddress(s string) *FundingUpdateOne {
	fuo.mutation.SetAddress(s)
	return fuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (fuo *FundingUpdateOne) SetNillableAddress(s *string) *FundingUpdateOne {
	if s != nil {
		fuo.SetAddress(*s)
	}
	return fuo
}

// Mutation returns the FundingMutation object of the builder.
func (fuo *FundingUpdateOne) Mutation() *FundingMutation {
	return fuo.mutation
}

// Where appends a list predicates to the FundingUpdate builder.
func (fuo *FundingUpdateOne) Where(ps ...predicate.Funding) *FundingUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FundingUpdateOne) Select(field string, fields ...string) *FundingUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Funding entity.
func (fuo *FundingUpdateOne) Save(ctx context.Context) (*Funding, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FundingUpdateOne) SaveX(ctx context.Context) *Funding {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FundingUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FundingUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FundingUpdateOne) sqlSave(ctx context.Context) (_node *Funding, err error) {
	_spec := sqlgraph.NewUpdateSpec(funding.Table, funding.Columns, sqlgraph.NewFieldSpec(funding.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Funding.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, funding.FieldID)
		for _, f := range fields {
			if !funding.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != funding.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Time(); ok {
		_spec.SetField(funding.FieldTime, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.AddedTime(); ok {
		_spec.AddField(funding.FieldTime, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.Coin(); ok {
		_spec.SetField(funding.FieldCoin, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Usdc(); ok {
		_spec.SetField(funding.FieldUsdc, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Szi(); ok {
		_spec.SetField(funding.FieldSzi, field.TypeString, value)
	}
	if value, ok := fuo.mutation.FundingRate(); ok {
		_spec.SetField(funding.FieldFundingRate, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Address(); ok {
		_spec.SetField(funding.FieldAddress, field.TypeString, value)
	}
	_node = &Funding{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{funding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
