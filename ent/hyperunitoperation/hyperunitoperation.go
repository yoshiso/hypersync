// Code generated by ent, DO NOT EDIT.

package hyperunitoperation

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the hyperunitoperation type in the database.
	Label = "hyperunit_operation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldOperationID holds the string denoting the operation_id field in the database.
	FieldOperationID = "operation_id"
	// FieldSourceChain holds the string denoting the source_chain field in the database.
	FieldSourceChain = "source_chain"
	// FieldSourceAmount holds the string denoting the source_amount field in the database.
	FieldSourceAmount = "source_amount"
	// FieldSourceAddress holds the string denoting the source_address field in the database.
	FieldSourceAddress = "source_address"
	// FieldSourceTxHash holds the string denoting the source_tx_hash field in the database.
	FieldSourceTxHash = "source_tx_hash"
	// FieldDestinationTxHash holds the string denoting the destination_tx_hash field in the database.
	FieldDestinationTxHash = "destination_tx_hash"
	// FieldDestinationFeeAmount holds the string denoting the destination_fee_amount field in the database.
	FieldDestinationFeeAmount = "destination_fee_amount"
	// FieldDestinationChain holds the string denoting the destination_chain field in the database.
	FieldDestinationChain = "destination_chain"
	// FieldDestinationAddress holds the string denoting the destination_address field in the database.
	FieldDestinationAddress = "destination_address"
	// FieldSweepFeeAmount holds the string denoting the sweep_fee_amount field in the database.
	FieldSweepFeeAmount = "sweep_fee_amount"
	// FieldOpCreatedAt holds the string denoting the op_created_at field in the database.
	FieldOpCreatedAt = "op_created_at"
	// FieldBroadcastAt holds the string denoting the broadcast_at field in the database.
	FieldBroadcastAt = "broadcast_at"
	// FieldStateUpdatedAt holds the string denoting the state_updated_at field in the database.
	FieldStateUpdatedAt = "state_updated_at"
	// Table holds the table name of the hyperunitoperation in the database.
	Table = "hyperunit_operations"
)

// Columns holds all SQL columns for hyperunitoperation fields.
var Columns = []string{
	FieldID,
	FieldAddress,
	FieldOperationID,
	FieldSourceChain,
	FieldSourceAmount,
	FieldSourceAddress,
	FieldSourceTxHash,
	FieldDestinationTxHash,
	FieldDestinationFeeAmount,
	FieldDestinationChain,
	FieldDestinationAddress,
	FieldSweepFeeAmount,
	FieldOpCreatedAt,
	FieldBroadcastAt,
	FieldStateUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the HyperunitOperation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByOperationID orders the results by the operation_id field.
func ByOperationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperationID, opts...).ToFunc()
}

// BySourceChain orders the results by the source_chain field.
func BySourceChain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceChain, opts...).ToFunc()
}

// BySourceAmount orders the results by the source_amount field.
func BySourceAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceAmount, opts...).ToFunc()
}

// BySourceAddress orders the results by the source_address field.
func BySourceAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceAddress, opts...).ToFunc()
}

// BySourceTxHash orders the results by the source_tx_hash field.
func BySourceTxHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceTxHash, opts...).ToFunc()
}

// ByDestinationTxHash orders the results by the destination_tx_hash field.
func ByDestinationTxHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestinationTxHash, opts...).ToFunc()
}

// ByDestinationFeeAmount orders the results by the destination_fee_amount field.
func ByDestinationFeeAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestinationFeeAmount, opts...).ToFunc()
}

// ByDestinationChain orders the results by the destination_chain field.
func ByDestinationChain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestinationChain, opts...).ToFunc()
}

// ByDestinationAddress orders the results by the destination_address field.
func ByDestinationAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestinationAddress, opts...).ToFunc()
}

// BySweepFeeAmount orders the results by the sweep_fee_amount field.
func BySweepFeeAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSweepFeeAmount, opts...).ToFunc()
}

// ByOpCreatedAt orders the results by the op_created_at field.
func ByOpCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpCreatedAt, opts...).ToFunc()
}

// ByBroadcastAt orders the results by the broadcast_at field.
func ByBroadcastAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBroadcastAt, opts...).ToFunc()
}

// ByStateUpdatedAt orders the results by the state_updated_at field.
func ByStateUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStateUpdatedAt, opts...).ToFunc()
}
