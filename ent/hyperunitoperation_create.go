// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/hyperunitoperation"
)

// HyperunitOperationCreate is the builder for creating a HyperunitOperation entity.
type HyperunitOperationCreate struct {
	config
	mutation *HyperunitOperationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAddress sets the "address" field.
func (hoc *HyperunitOperationCreate) SetAddress(s string) *HyperunitOperationCreate {
	hoc.mutation.SetAddress(s)
	return hoc
}

// SetOperationID sets the "operation_id" field.
func (hoc *HyperunitOperationCreate) SetOperationID(s string) *HyperunitOperationCreate {
	hoc.mutation.SetOperationID(s)
	return hoc
}

// SetSourceChain sets the "source_chain" field.
func (hoc *HyperunitOperationCreate) SetSourceChain(s string) *HyperunitOperationCreate {
	hoc.mutation.SetSourceChain(s)
	return hoc
}

// SetSourceAmount sets the "source_amount" field.
func (hoc *HyperunitOperationCreate) SetSourceAmount(s string) *HyperunitOperationCreate {
	hoc.mutation.SetSourceAmount(s)
	return hoc
}

// SetSourceAddress sets the "source_address" field.
func (hoc *HyperunitOperationCreate) SetSourceAddress(s string) *HyperunitOperationCreate {
	hoc.mutation.SetSourceAddress(s)
	return hoc
}

// SetSourceTxHash sets the "source_tx_hash" field.
func (hoc *HyperunitOperationCreate) SetSourceTxHash(s string) *HyperunitOperationCreate {
	hoc.mutation.SetSourceTxHash(s)
	return hoc
}

// SetDestinationTxHash sets the "destination_tx_hash" field.
func (hoc *HyperunitOperationCreate) SetDestinationTxHash(s string) *HyperunitOperationCreate {
	hoc.mutation.SetDestinationTxHash(s)
	return hoc
}

// SetDestinationFeeAmount sets the "destination_fee_amount" field.
func (hoc *HyperunitOperationCreate) SetDestinationFeeAmount(s string) *HyperunitOperationCreate {
	hoc.mutation.SetDestinationFeeAmount(s)
	return hoc
}

// SetDestinationChain sets the "destination_chain" field.
func (hoc *HyperunitOperationCreate) SetDestinationChain(s string) *HyperunitOperationCreate {
	hoc.mutation.SetDestinationChain(s)
	return hoc
}

// SetDestinationAddress sets the "destination_address" field.
func (hoc *HyperunitOperationCreate) SetDestinationAddress(s string) *HyperunitOperationCreate {
	hoc.mutation.SetDestinationAddress(s)
	return hoc
}

// SetSweepFeeAmount sets the "sweep_fee_amount" field.
func (hoc *HyperunitOperationCreate) SetSweepFeeAmount(s string) *HyperunitOperationCreate {
	hoc.mutation.SetSweepFeeAmount(s)
	return hoc
}

// SetOpCreatedAt sets the "op_created_at" field.
func (hoc *HyperunitOperationCreate) SetOpCreatedAt(t time.Time) *HyperunitOperationCreate {
	hoc.mutation.SetOpCreatedAt(t)
	return hoc
}

// SetBroadcastAt sets the "broadcast_at" field.
func (hoc *HyperunitOperationCreate) SetBroadcastAt(t time.Time) *HyperunitOperationCreate {
	hoc.mutation.SetBroadcastAt(t)
	return hoc
}

// SetStateUpdatedAt sets the "state_updated_at" field.
func (hoc *HyperunitOperationCreate) SetStateUpdatedAt(t time.Time) *HyperunitOperationCreate {
	hoc.mutation.SetStateUpdatedAt(t)
	return hoc
}

// Mutation returns the HyperunitOperationMutation object of the builder.
func (hoc *HyperunitOperationCreate) Mutation() *HyperunitOperationMutation {
	return hoc.mutation
}

// Save creates the HyperunitOperation in the database.
func (hoc *HyperunitOperationCreate) Save(ctx context.Context) (*HyperunitOperation, error) {
	return withHooks(ctx, hoc.sqlSave, hoc.mutation, hoc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hoc *HyperunitOperationCreate) SaveX(ctx context.Context) *HyperunitOperation {
	v, err := hoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hoc *HyperunitOperationCreate) Exec(ctx context.Context) error {
	_, err := hoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hoc *HyperunitOperationCreate) ExecX(ctx context.Context) {
	if err := hoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hoc *HyperunitOperationCreate) check() error {
	if _, ok := hoc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "HyperunitOperation.address"`)}
	}
	if _, ok := hoc.mutation.OperationID(); !ok {
		return &ValidationError{Name: "operation_id", err: errors.New(`ent: missing required field "HyperunitOperation.operation_id"`)}
	}
	if _, ok := hoc.mutation.SourceChain(); !ok {
		return &ValidationError{Name: "source_chain", err: errors.New(`ent: missing required field "HyperunitOperation.source_chain"`)}
	}
	if _, ok := hoc.mutation.SourceAmount(); !ok {
		return &ValidationError{Name: "source_amount", err: errors.New(`ent: missing required field "HyperunitOperation.source_amount"`)}
	}
	if _, ok := hoc.mutation.SourceAddress(); !ok {
		return &ValidationError{Name: "source_address", err: errors.New(`ent: missing required field "HyperunitOperation.source_address"`)}
	}
	if _, ok := hoc.mutation.SourceTxHash(); !ok {
		return &ValidationError{Name: "source_tx_hash", err: errors.New(`ent: missing required field "HyperunitOperation.source_tx_hash"`)}
	}
	if _, ok := hoc.mutation.DestinationTxHash(); !ok {
		return &ValidationError{Name: "destination_tx_hash", err: errors.New(`ent: missing required field "HyperunitOperation.destination_tx_hash"`)}
	}
	if _, ok := hoc.mutation.DestinationFeeAmount(); !ok {
		return &ValidationError{Name: "destination_fee_amount", err: errors.New(`ent: missing required field "HyperunitOperation.destination_fee_amount"`)}
	}
	if _, ok := hoc.mutation.DestinationChain(); !ok {
		return &ValidationError{Name: "destination_chain", err: errors.New(`ent: missing required field "HyperunitOperation.destination_chain"`)}
	}
	if _, ok := hoc.mutation.DestinationAddress(); !ok {
		return &ValidationError{Name: "destination_address", err: errors.New(`ent: missing required field "HyperunitOperation.destination_address"`)}
	}
	if _, ok := hoc.mutation.SweepFeeAmount(); !ok {
		return &ValidationError{Name: "sweep_fee_amount", err: errors.New(`ent: missing required field "HyperunitOperation.sweep_fee_amount"`)}
	}
	if _, ok := hoc.mutation.OpCreatedAt(); !ok {
		return &ValidationError{Name: "op_created_at", err: errors.New(`ent: missing required field "HyperunitOperation.op_created_at"`)}
	}
	if _, ok := hoc.mutation.BroadcastAt(); !ok {
		return &ValidationError{Name: "broadcast_at", err: errors.New(`ent: missing required field "HyperunitOperation.broadcast_at"`)}
	}
	if _, ok := hoc.mutation.StateUpdatedAt(); !ok {
		return &ValidationError{Name: "state_updated_at", err: errors.New(`ent: missing required field "HyperunitOperation.state_updated_at"`)}
	}
	return nil
}

func (hoc *HyperunitOperationCreate) sqlSave(ctx context.Context) (*HyperunitOperation, error) {
	if err := hoc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hoc.mutation.id = &_node.ID
	hoc.mutation.done = true
	return _node, nil
}

func (hoc *HyperunitOperationCreate) createSpec() (*HyperunitOperation, *sqlgraph.CreateSpec) {
	var (
		_node = &HyperunitOperation{config: hoc.config}
		_spec = sqlgraph.NewCreateSpec(hyperunitoperation.Table, sqlgraph.NewFieldSpec(hyperunitoperation.FieldID, field.TypeInt))
	)
	_spec.OnConflict = hoc.conflict
	if value, ok := hoc.mutation.Address(); ok {
		_spec.SetField(hyperunitoperation.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := hoc.mutation.OperationID(); ok {
		_spec.SetField(hyperunitoperation.FieldOperationID, field.TypeString, value)
		_node.OperationID = value
	}
	if value, ok := hoc.mutation.SourceChain(); ok {
		_spec.SetField(hyperunitoperation.FieldSourceChain, field.TypeString, value)
		_node.SourceChain = value
	}
	if value, ok := hoc.mutation.SourceAmount(); ok {
		_spec.SetField(hyperunitoperation.FieldSourceAmount, field.TypeString, value)
		_node.SourceAmount = value
	}
	if value, ok := hoc.mutation.SourceAddress(); ok {
		_spec.SetField(hyperunitoperation.FieldSourceAddress, field.TypeString, value)
		_node.SourceAddress = value
	}
	if value, ok := hoc.mutation.SourceTxHash(); ok {
		_spec.SetField(hyperunitoperation.FieldSourceTxHash, field.TypeString, value)
		_node.SourceTxHash = value
	}
	if value, ok := hoc.mutation.DestinationTxHash(); ok {
		_spec.SetField(hyperunitoperation.FieldDestinationTxHash, field.TypeString, value)
		_node.DestinationTxHash = value
	}
	if value, ok := hoc.mutation.DestinationFeeAmount(); ok {
		_spec.SetField(hyperunitoperation.FieldDestinationFeeAmount, field.TypeString, value)
		_node.DestinationFeeAmount = value
	}
	if value, ok := hoc.mutation.DestinationChain(); ok {
		_spec.SetField(hyperunitoperation.FieldDestinationChain, field.TypeString, value)
		_node.DestinationChain = value
	}
	if value, ok := hoc.mutation.DestinationAddress(); ok {
		_spec.SetField(hyperunitoperation.FieldDestinationAddress, field.TypeString, value)
		_node.DestinationAddress = value
	}
	if value, ok := hoc.mutation.SweepFeeAmount(); ok {
		_spec.SetField(hyperunitoperation.FieldSweepFeeAmount, field.TypeString, value)
		_node.SweepFeeAmount = value
	}
	if value, ok := hoc.mutation.OpCreatedAt(); ok {
		_spec.SetField(hyperunitoperation.FieldOpCreatedAt, field.TypeTime, value)
		_node.OpCreatedAt = value
	}
	if value, ok := hoc.mutation.BroadcastAt(); ok {
		_spec.SetField(hyperunitoperation.FieldBroadcastAt, field.TypeTime, value)
		_node.BroadcastAt = value
	}
	if value, ok := hoc.mutation.StateUpdatedAt(); ok {
		_spec.SetField(hyperunitoperation.FieldStateUpdatedAt, field.TypeTime, value)
		_node.StateUpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HyperunitOperation.Create().
//		SetAddress(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HyperunitOperationUpsert) {
//			SetAddress(v+v).
//		}).
//		Exec(ctx)
func (hoc *HyperunitOperationCreate) OnConflict(opts ...sql.ConflictOption) *HyperunitOperationUpsertOne {
	hoc.conflict = opts
	return &HyperunitOperationUpsertOne{
		create: hoc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HyperunitOperation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hoc *HyperunitOperationCreate) OnConflictColumns(columns ...string) *HyperunitOperationUpsertOne {
	hoc.conflict = append(hoc.conflict, sql.ConflictColumns(columns...))
	return &HyperunitOperationUpsertOne{
		create: hoc,
	}
}

type (
	// HyperunitOperationUpsertOne is the builder for "upsert"-ing
	//  one HyperunitOperation node.
	HyperunitOperationUpsertOne struct {
		create *HyperunitOperationCreate
	}

	// HyperunitOperationUpsert is the "OnConflict" setter.
	HyperunitOperationUpsert struct {
		*sql.UpdateSet
	}
)

// SetAddress sets the "address" field.
func (u *HyperunitOperationUpsert) SetAddress(v string) *HyperunitOperationUpsert {
	u.Set(hyperunitoperation.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *HyperunitOperationUpsert) UpdateAddress() *HyperunitOperationUpsert {
	u.SetExcluded(hyperunitoperation.FieldAddress)
	return u
}

// SetOperationID sets the "operation_id" field.
func (u *HyperunitOperationUpsert) SetOperationID(v string) *HyperunitOperationUpsert {
	u.Set(hyperunitoperation.FieldOperationID, v)
	return u
}

// UpdateOperationID sets the "operation_id" field to the value that was provided on create.
func (u *HyperunitOperationUpsert) UpdateOperationID() *HyperunitOperationUpsert {
	u.SetExcluded(hyperunitoperation.FieldOperationID)
	return u
}

// SetSourceChain sets the "source_chain" field.
func (u *HyperunitOperationUpsert) SetSourceChain(v string) *HyperunitOperationUpsert {
	u.Set(hyperunitoperation.FieldSourceChain, v)
	return u
}

// UpdateSourceChain sets the "source_chain" field to the value that was provided on create.
func (u *HyperunitOperationUpsert) UpdateSourceChain() *HyperunitOperationUpsert {
	u.SetExcluded(hyperunitoperation.FieldSourceChain)
	return u
}

// SetSourceAmount sets the "source_amount" field.
func (u *HyperunitOperationUpsert) SetSourceAmount(v string) *HyperunitOperationUpsert {
	u.Set(hyperunitoperation.FieldSourceAmount, v)
	return u
}

// UpdateSourceAmount sets the "source_amount" field to the value that was provided on create.
func (u *HyperunitOperationUpsert) UpdateSourceAmount() *HyperunitOperationUpsert {
	u.SetExcluded(hyperunitoperation.FieldSourceAmount)
	return u
}

// SetSourceAddress sets the "source_address" field.
func (u *HyperunitOperationUpsert) SetSourceAddress(v string) *HyperunitOperationUpsert {
	u.Set(hyperunitoperation.FieldSourceAddress, v)
	return u
}

// UpdateSourceAddress sets the "source_address" field to the value that was provided on create.
func (u *HyperunitOperationUpsert) UpdateSourceAddress() *HyperunitOperationUpsert {
	u.SetExcluded(hyperunitoperation.FieldSourceAddress)
	return u
}

// SetSourceTxHash sets the "source_tx_hash" field.
func (u *HyperunitOperationUpsert) SetSourceTxHash(v string) *HyperunitOperationUpsert {
	u.Set(hyperunitoperation.FieldSourceTxHash, v)
	return u
}

// UpdateSourceTxHash sets the "source_tx_hash" field to the value that was provided on create.
func (u *HyperunitOperationUpsert) UpdateSourceTxHash() *HyperunitOperationUpsert {
	u.SetExcluded(hyperunitoperation.FieldSourceTxHash)
	return u
}

// SetDestinationTxHash sets the "destination_tx_hash" field.
func (u *HyperunitOperationUpsert) SetDestinationTxHash(v string) *HyperunitOperationUpsert {
	u.Set(hyperunitoperation.FieldDestinationTxHash, v)
	return u
}

// UpdateDestinationTxHash sets the "destination_tx_hash" field to the value that was provided on create.
func (u *HyperunitOperationUpsert) UpdateDestinationTxHash() *HyperunitOperationUpsert {
	u.SetExcluded(hyperunitoperation.FieldDestinationTxHash)
	return u
}

// SetDestinationFeeAmount sets the "destination_fee_amount" field.
func (u *HyperunitOperationUpsert) SetDestinationFeeAmount(v string) *HyperunitOperationUpsert {
	u.Set(hyperunitoperation.FieldDestinationFeeAmount, v)
	return u
}

// UpdateDestinationFeeAmount sets the "destination_fee_amount" field to the value that was provided on create.
func (u *HyperunitOperationUpsert) UpdateDestinationFeeAmount() *HyperunitOperationUpsert {
	u.SetExcluded(hyperunitoperation.FieldDestinationFeeAmount)
	return u
}

// SetDestinationChain sets the "destination_chain" field.
func (u *HyperunitOperationUpsert) SetDestinationChain(v string) *HyperunitOperationUpsert {
	u.Set(hyperunitoperation.FieldDestinationChain, v)
	return u
}

// UpdateDestinationChain sets the "destination_chain" field to the value that was provided on create.
func (u *HyperunitOperationUpsert) UpdateDestinationChain() *HyperunitOperationUpsert {
	u.SetExcluded(hyperunitoperation.FieldDestinationChain)
	return u
}

// SetDestinationAddress sets the "destination_address" field.
func (u *HyperunitOperationUpsert) SetDestinationAddress(v string) *HyperunitOperationUpsert {
	u.Set(hyperunitoperation.FieldDestinationAddress, v)
	return u
}

// UpdateDestinationAddress sets the "destination_address" field to the value that was provided on create.
func (u *HyperunitOperationUpsert) UpdateDestinationAddress() *HyperunitOperationUpsert {
	u.SetExcluded(hyperunitoperation.FieldDestinationAddress)
	return u
}

// SetSweepFeeAmount sets the "sweep_fee_amount" field.
func (u *HyperunitOperationUpsert) SetSweepFeeAmount(v string) *HyperunitOperationUpsert {
	u.Set(hyperunitoperation.FieldSweepFeeAmount, v)
	return u
}

// UpdateSweepFeeAmount sets the "sweep_fee_amount" field to the value that was provided on create.
func (u *HyperunitOperationUpsert) UpdateSweepFeeAmount() *HyperunitOperationUpsert {
	u.SetExcluded(hyperunitoperation.FieldSweepFeeAmount)
	return u
}

// SetOpCreatedAt sets the "op_created_at" field.
func (u *HyperunitOperationUpsert) SetOpCreatedAt(v time.Time) *HyperunitOperationUpsert {
	u.Set(hyperunitoperation.FieldOpCreatedAt, v)
	return u
}

// UpdateOpCreatedAt sets the "op_created_at" field to the value that was provided on create.
func (u *HyperunitOperationUpsert) UpdateOpCreatedAt() *HyperunitOperationUpsert {
	u.SetExcluded(hyperunitoperation.FieldOpCreatedAt)
	return u
}

// SetBroadcastAt sets the "broadcast_at" field.
func (u *HyperunitOperationUpsert) SetBroadcastAt(v time.Time) *HyperunitOperationUpsert {
	u.Set(hyperunitoperation.FieldBroadcastAt, v)
	return u
}

// UpdateBroadcastAt sets the "broadcast_at" field to the value that was provided on create.
func (u *HyperunitOperationUpsert) UpdateBroadcastAt() *HyperunitOperationUpsert {
	u.SetExcluded(hyperunitoperation.FieldBroadcastAt)
	return u
}

// SetStateUpdatedAt sets the "state_updated_at" field.
func (u *HyperunitOperationUpsert) SetStateUpdatedAt(v time.Time) *HyperunitOperationUpsert {
	u.Set(hyperunitoperation.FieldStateUpdatedAt, v)
	return u
}

// UpdateStateUpdatedAt sets the "state_updated_at" field to the value that was provided on create.
func (u *HyperunitOperationUpsert) UpdateStateUpdatedAt() *HyperunitOperationUpsert {
	u.SetExcluded(hyperunitoperation.FieldStateUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.HyperunitOperation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HyperunitOperationUpsertOne) UpdateNewValues() *HyperunitOperationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HyperunitOperation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HyperunitOperationUpsertOne) Ignore() *HyperunitOperationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HyperunitOperationUpsertOne) DoNothing() *HyperunitOperationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HyperunitOperationCreate.OnConflict
// documentation for more info.
func (u *HyperunitOperationUpsertOne) Update(set func(*HyperunitOperationUpsert)) *HyperunitOperationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HyperunitOperationUpsert{UpdateSet: update})
	}))
	return u
}

// SetAddress sets the "address" field.
func (u *HyperunitOperationUpsertOne) SetAddress(v string) *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *HyperunitOperationUpsertOne) UpdateAddress() *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateAddress()
	})
}

// SetOperationID sets the "operation_id" field.
func (u *HyperunitOperationUpsertOne) SetOperationID(v string) *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetOperationID(v)
	})
}

// UpdateOperationID sets the "operation_id" field to the value that was provided on create.
func (u *HyperunitOperationUpsertOne) UpdateOperationID() *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateOperationID()
	})
}

// SetSourceChain sets the "source_chain" field.
func (u *HyperunitOperationUpsertOne) SetSourceChain(v string) *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetSourceChain(v)
	})
}

// UpdateSourceChain sets the "source_chain" field to the value that was provided on create.
func (u *HyperunitOperationUpsertOne) UpdateSourceChain() *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateSourceChain()
	})
}

// SetSourceAmount sets the "source_amount" field.
func (u *HyperunitOperationUpsertOne) SetSourceAmount(v string) *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetSourceAmount(v)
	})
}

// UpdateSourceAmount sets the "source_amount" field to the value that was provided on create.
func (u *HyperunitOperationUpsertOne) UpdateSourceAmount() *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateSourceAmount()
	})
}

// SetSourceAddress sets the "source_address" field.
func (u *HyperunitOperationUpsertOne) SetSourceAddress(v string) *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetSourceAddress(v)
	})
}

// UpdateSourceAddress sets the "source_address" field to the value that was provided on create.
func (u *HyperunitOperationUpsertOne) UpdateSourceAddress() *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateSourceAddress()
	})
}

// SetSourceTxHash sets the "source_tx_hash" field.
func (u *HyperunitOperationUpsertOne) SetSourceTxHash(v string) *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetSourceTxHash(v)
	})
}

// UpdateSourceTxHash sets the "source_tx_hash" field to the value that was provided on create.
func (u *HyperunitOperationUpsertOne) UpdateSourceTxHash() *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateSourceTxHash()
	})
}

// SetDestinationTxHash sets the "destination_tx_hash" field.
func (u *HyperunitOperationUpsertOne) SetDestinationTxHash(v string) *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetDestinationTxHash(v)
	})
}

// UpdateDestinationTxHash sets the "destination_tx_hash" field to the value that was provided on create.
func (u *HyperunitOperationUpsertOne) UpdateDestinationTxHash() *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateDestinationTxHash()
	})
}

// SetDestinationFeeAmount sets the "destination_fee_amount" field.
func (u *HyperunitOperationUpsertOne) SetDestinationFeeAmount(v string) *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetDestinationFeeAmount(v)
	})
}

// UpdateDestinationFeeAmount sets the "destination_fee_amount" field to the value that was provided on create.
func (u *HyperunitOperationUpsertOne) UpdateDestinationFeeAmount() *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateDestinationFeeAmount()
	})
}

// SetDestinationChain sets the "destination_chain" field.
func (u *HyperunitOperationUpsertOne) SetDestinationChain(v string) *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetDestinationChain(v)
	})
}

// UpdateDestinationChain sets the "destination_chain" field to the value that was provided on create.
func (u *HyperunitOperationUpsertOne) UpdateDestinationChain() *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateDestinationChain()
	})
}

// SetDestinationAddress sets the "destination_address" field.
func (u *HyperunitOperationUpsertOne) SetDestinationAddress(v string) *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetDestinationAddress(v)
	})
}

// UpdateDestinationAddress sets the "destination_address" field to the value that was provided on create.
func (u *HyperunitOperationUpsertOne) UpdateDestinationAddress() *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateDestinationAddress()
	})
}

// SetSweepFeeAmount sets the "sweep_fee_amount" field.
func (u *HyperunitOperationUpsertOne) SetSweepFeeAmount(v string) *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetSweepFeeAmount(v)
	})
}

// UpdateSweepFeeAmount sets the "sweep_fee_amount" field to the value that was provided on create.
func (u *HyperunitOperationUpsertOne) UpdateSweepFeeAmount() *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateSweepFeeAmount()
	})
}

// SetOpCreatedAt sets the "op_created_at" field.
func (u *HyperunitOperationUpsertOne) SetOpCreatedAt(v time.Time) *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetOpCreatedAt(v)
	})
}

// UpdateOpCreatedAt sets the "op_created_at" field to the value that was provided on create.
func (u *HyperunitOperationUpsertOne) UpdateOpCreatedAt() *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateOpCreatedAt()
	})
}

// SetBroadcastAt sets the "broadcast_at" field.
func (u *HyperunitOperationUpsertOne) SetBroadcastAt(v time.Time) *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetBroadcastAt(v)
	})
}

// UpdateBroadcastAt sets the "broadcast_at" field to the value that was provided on create.
func (u *HyperunitOperationUpsertOne) UpdateBroadcastAt() *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateBroadcastAt()
	})
}

// SetStateUpdatedAt sets the "state_updated_at" field.
func (u *HyperunitOperationUpsertOne) SetStateUpdatedAt(v time.Time) *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetStateUpdatedAt(v)
	})
}

// UpdateStateUpdatedAt sets the "state_updated_at" field to the value that was provided on create.
func (u *HyperunitOperationUpsertOne) UpdateStateUpdatedAt() *HyperunitOperationUpsertOne {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateStateUpdatedAt()
	})
}

// Exec executes the query.
func (u *HyperunitOperationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HyperunitOperationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HyperunitOperationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HyperunitOperationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HyperunitOperationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HyperunitOperationCreateBulk is the builder for creating many HyperunitOperation entities in bulk.
type HyperunitOperationCreateBulk struct {
	config
	err      error
	builders []*HyperunitOperationCreate
	conflict []sql.ConflictOption
}

// Save creates the HyperunitOperation entities in the database.
func (hocb *HyperunitOperationCreateBulk) Save(ctx context.Context) ([]*HyperunitOperation, error) {
	if hocb.err != nil {
		return nil, hocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hocb.builders))
	nodes := make([]*HyperunitOperation, len(hocb.builders))
	mutators := make([]Mutator, len(hocb.builders))
	for i := range hocb.builders {
		func(i int, root context.Context) {
			builder := hocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HyperunitOperationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hocb *HyperunitOperationCreateBulk) SaveX(ctx context.Context) []*HyperunitOperation {
	v, err := hocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hocb *HyperunitOperationCreateBulk) Exec(ctx context.Context) error {
	_, err := hocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hocb *HyperunitOperationCreateBulk) ExecX(ctx context.Context) {
	if err := hocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HyperunitOperation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HyperunitOperationUpsert) {
//			SetAddress(v+v).
//		}).
//		Exec(ctx)
func (hocb *HyperunitOperationCreateBulk) OnConflict(opts ...sql.ConflictOption) *HyperunitOperationUpsertBulk {
	hocb.conflict = opts
	return &HyperunitOperationUpsertBulk{
		create: hocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HyperunitOperation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hocb *HyperunitOperationCreateBulk) OnConflictColumns(columns ...string) *HyperunitOperationUpsertBulk {
	hocb.conflict = append(hocb.conflict, sql.ConflictColumns(columns...))
	return &HyperunitOperationUpsertBulk{
		create: hocb,
	}
}

// HyperunitOperationUpsertBulk is the builder for "upsert"-ing
// a bulk of HyperunitOperation nodes.
type HyperunitOperationUpsertBulk struct {
	create *HyperunitOperationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HyperunitOperation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *HyperunitOperationUpsertBulk) UpdateNewValues() *HyperunitOperationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HyperunitOperation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HyperunitOperationUpsertBulk) Ignore() *HyperunitOperationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HyperunitOperationUpsertBulk) DoNothing() *HyperunitOperationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HyperunitOperationCreateBulk.OnConflict
// documentation for more info.
func (u *HyperunitOperationUpsertBulk) Update(set func(*HyperunitOperationUpsert)) *HyperunitOperationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HyperunitOperationUpsert{UpdateSet: update})
	}))
	return u
}

// SetAddress sets the "address" field.
func (u *HyperunitOperationUpsertBulk) SetAddress(v string) *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *HyperunitOperationUpsertBulk) UpdateAddress() *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateAddress()
	})
}

// SetOperationID sets the "operation_id" field.
func (u *HyperunitOperationUpsertBulk) SetOperationID(v string) *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetOperationID(v)
	})
}

// UpdateOperationID sets the "operation_id" field to the value that was provided on create.
func (u *HyperunitOperationUpsertBulk) UpdateOperationID() *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateOperationID()
	})
}

// SetSourceChain sets the "source_chain" field.
func (u *HyperunitOperationUpsertBulk) SetSourceChain(v string) *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetSourceChain(v)
	})
}

// UpdateSourceChain sets the "source_chain" field to the value that was provided on create.
func (u *HyperunitOperationUpsertBulk) UpdateSourceChain() *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateSourceChain()
	})
}

// SetSourceAmount sets the "source_amount" field.
func (u *HyperunitOperationUpsertBulk) SetSourceAmount(v string) *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetSourceAmount(v)
	})
}

// UpdateSourceAmount sets the "source_amount" field to the value that was provided on create.
func (u *HyperunitOperationUpsertBulk) UpdateSourceAmount() *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateSourceAmount()
	})
}

// SetSourceAddress sets the "source_address" field.
func (u *HyperunitOperationUpsertBulk) SetSourceAddress(v string) *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetSourceAddress(v)
	})
}

// UpdateSourceAddress sets the "source_address" field to the value that was provided on create.
func (u *HyperunitOperationUpsertBulk) UpdateSourceAddress() *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateSourceAddress()
	})
}

// SetSourceTxHash sets the "source_tx_hash" field.
func (u *HyperunitOperationUpsertBulk) SetSourceTxHash(v string) *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetSourceTxHash(v)
	})
}

// UpdateSourceTxHash sets the "source_tx_hash" field to the value that was provided on create.
func (u *HyperunitOperationUpsertBulk) UpdateSourceTxHash() *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateSourceTxHash()
	})
}

// SetDestinationTxHash sets the "destination_tx_hash" field.
func (u *HyperunitOperationUpsertBulk) SetDestinationTxHash(v string) *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetDestinationTxHash(v)
	})
}

// UpdateDestinationTxHash sets the "destination_tx_hash" field to the value that was provided on create.
func (u *HyperunitOperationUpsertBulk) UpdateDestinationTxHash() *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateDestinationTxHash()
	})
}

// SetDestinationFeeAmount sets the "destination_fee_amount" field.
func (u *HyperunitOperationUpsertBulk) SetDestinationFeeAmount(v string) *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetDestinationFeeAmount(v)
	})
}

// UpdateDestinationFeeAmount sets the "destination_fee_amount" field to the value that was provided on create.
func (u *HyperunitOperationUpsertBulk) UpdateDestinationFeeAmount() *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateDestinationFeeAmount()
	})
}

// SetDestinationChain sets the "destination_chain" field.
func (u *HyperunitOperationUpsertBulk) SetDestinationChain(v string) *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetDestinationChain(v)
	})
}

// UpdateDestinationChain sets the "destination_chain" field to the value that was provided on create.
func (u *HyperunitOperationUpsertBulk) UpdateDestinationChain() *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateDestinationChain()
	})
}

// SetDestinationAddress sets the "destination_address" field.
func (u *HyperunitOperationUpsertBulk) SetDestinationAddress(v string) *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetDestinationAddress(v)
	})
}

// UpdateDestinationAddress sets the "destination_address" field to the value that was provided on create.
func (u *HyperunitOperationUpsertBulk) UpdateDestinationAddress() *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateDestinationAddress()
	})
}

// SetSweepFeeAmount sets the "sweep_fee_amount" field.
func (u *HyperunitOperationUpsertBulk) SetSweepFeeAmount(v string) *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetSweepFeeAmount(v)
	})
}

// UpdateSweepFeeAmount sets the "sweep_fee_amount" field to the value that was provided on create.
func (u *HyperunitOperationUpsertBulk) UpdateSweepFeeAmount() *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateSweepFeeAmount()
	})
}

// SetOpCreatedAt sets the "op_created_at" field.
func (u *HyperunitOperationUpsertBulk) SetOpCreatedAt(v time.Time) *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetOpCreatedAt(v)
	})
}

// UpdateOpCreatedAt sets the "op_created_at" field to the value that was provided on create.
func (u *HyperunitOperationUpsertBulk) UpdateOpCreatedAt() *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateOpCreatedAt()
	})
}

// SetBroadcastAt sets the "broadcast_at" field.
func (u *HyperunitOperationUpsertBulk) SetBroadcastAt(v time.Time) *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetBroadcastAt(v)
	})
}

// UpdateBroadcastAt sets the "broadcast_at" field to the value that was provided on create.
func (u *HyperunitOperationUpsertBulk) UpdateBroadcastAt() *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateBroadcastAt()
	})
}

// SetStateUpdatedAt sets the "state_updated_at" field.
func (u *HyperunitOperationUpsertBulk) SetStateUpdatedAt(v time.Time) *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.SetStateUpdatedAt(v)
	})
}

// UpdateStateUpdatedAt sets the "state_updated_at" field to the value that was provided on create.
func (u *HyperunitOperationUpsertBulk) UpdateStateUpdatedAt() *HyperunitOperationUpsertBulk {
	return u.Update(func(s *HyperunitOperationUpsert) {
		s.UpdateStateUpdatedAt()
	})
}

// Exec executes the query.
func (u *HyperunitOperationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HyperunitOperationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HyperunitOperationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HyperunitOperationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
