// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yoshiso/hypersync/ent/internaltransfer"
)

// InternalTransfer is the model entity for the InternalTransfer schema.
type InternalTransfer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// User holds the value of the "user" field.
	User string `json:"user,omitempty"`
	// Destination holds the value of the "destination" field.
	Destination string `json:"destination,omitempty"`
	// Usdc holds the value of the "usdc" field.
	Usdc string `json:"usdc,omitempty"`
	// Fee holds the value of the "fee" field.
	Fee string `json:"fee,omitempty"`
	// Time holds the value of the "time" field.
	Time int64 `json:"time,omitempty"`
	// Address holds the value of the "address" field.
	Address      string `json:"address,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InternalTransfer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case internaltransfer.FieldID, internaltransfer.FieldTime:
			values[i] = new(sql.NullInt64)
		case internaltransfer.FieldUser, internaltransfer.FieldDestination, internaltransfer.FieldUsdc, internaltransfer.FieldFee, internaltransfer.FieldAddress:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InternalTransfer fields.
func (it *InternalTransfer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case internaltransfer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			it.ID = int(value.Int64)
		case internaltransfer.FieldUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user", values[i])
			} else if value.Valid {
				it.User = value.String
			}
		case internaltransfer.FieldDestination:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field destination", values[i])
			} else if value.Valid {
				it.Destination = value.String
			}
		case internaltransfer.FieldUsdc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field usdc", values[i])
			} else if value.Valid {
				it.Usdc = value.String
			}
		case internaltransfer.FieldFee:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fee", values[i])
			} else if value.Valid {
				it.Fee = value.String
			}
		case internaltransfer.FieldTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				it.Time = value.Int64
			}
		case internaltransfer.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				it.Address = value.String
			}
		default:
			it.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InternalTransfer.
// This includes values selected through modifiers, order, etc.
func (it *InternalTransfer) Value(name string) (ent.Value, error) {
	return it.selectValues.Get(name)
}

// Update returns a builder for updating this InternalTransfer.
// Note that you need to call InternalTransfer.Unwrap() before calling this method if this InternalTransfer
// was returned from a transaction, and the transaction was committed or rolled back.
func (it *InternalTransfer) Update() *InternalTransferUpdateOne {
	return NewInternalTransferClient(it.config).UpdateOne(it)
}

// Unwrap unwraps the InternalTransfer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (it *InternalTransfer) Unwrap() *InternalTransfer {
	_tx, ok := it.config.driver.(*txDriver)
	if !ok {
		panic("ent: InternalTransfer is not a transactional entity")
	}
	it.config.driver = _tx.drv
	return it
}

// String implements the fmt.Stringer.
func (it *InternalTransfer) String() string {
	var builder strings.Builder
	builder.WriteString("InternalTransfer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", it.ID))
	builder.WriteString("user=")
	builder.WriteString(it.User)
	builder.WriteString(", ")
	builder.WriteString("destination=")
	builder.WriteString(it.Destination)
	builder.WriteString(", ")
	builder.WriteString("usdc=")
	builder.WriteString(it.Usdc)
	builder.WriteString(", ")
	builder.WriteString("fee=")
	builder.WriteString(it.Fee)
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(fmt.Sprintf("%v", it.Time))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(it.Address)
	builder.WriteByte(')')
	return builder.String()
}

// InternalTransfers is a parsable slice of InternalTransfer.
type InternalTransfers []*InternalTransfer
