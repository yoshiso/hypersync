// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/internaltransfer"
	"github.com/yoshiso/hypersync/ent/predicate"
)

// InternalTransferUpdate is the builder for updating InternalTransfer entities.
type InternalTransferUpdate struct {
	config
	hooks    []Hook
	mutation *InternalTransferMutation
}

// Where appends a list predicates to the InternalTransferUpdate builder.
func (itu *InternalTransferUpdate) Where(ps ...predicate.InternalTransfer) *InternalTransferUpdate {
	itu.mutation.Where(ps...)
	return itu
}

// SetUser sets the "user" field.
func (itu *InternalTransferUpdate) SetUser(s string) *InternalTransferUpdate {
	itu.mutation.SetUser(s)
	return itu
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (itu *InternalTransferUpdate) SetNillableUser(s *string) *InternalTransferUpdate {
	if s != nil {
		itu.SetUser(*s)
	}
	return itu
}

// SetDestination sets the "destination" field.
func (itu *InternalTransferUpdate) SetDestination(s string) *InternalTransferUpdate {
	itu.mutation.SetDestination(s)
	return itu
}

// SetNillableDestination sets the "destination" field if the given value is not nil.
func (itu *InternalTransferUpdate) SetNillableDestination(s *string) *InternalTransferUpdate {
	if s != nil {
		itu.SetDestination(*s)
	}
	return itu
}

// SetUsdc sets the "usdc" field.
func (itu *InternalTransferUpdate) SetUsdc(s string) *InternalTransferUpdate {
	itu.mutation.SetUsdc(s)
	return itu
}

// SetNillableUsdc sets the "usdc" field if the given value is not nil.
func (itu *InternalTransferUpdate) SetNillableUsdc(s *string) *InternalTransferUpdate {
	if s != nil {
		itu.SetUsdc(*s)
	}
	return itu
}

// SetFee sets the "fee" field.
func (itu *InternalTransferUpdate) SetFee(s string) *InternalTransferUpdate {
	itu.mutation.SetFee(s)
	return itu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (itu *InternalTransferUpdate) SetNillableFee(s *string) *InternalTransferUpdate {
	if s != nil {
		itu.SetFee(*s)
	}
	return itu
}

// SetTime sets the "time" field.
func (itu *InternalTransferUpdate) SetTime(i int64) *InternalTransferUpdate {
	itu.mutation.ResetTime()
	itu.mutation.SetTime(i)
	return itu
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (itu *InternalTransferUpdate) SetNillableTime(i *int64) *InternalTransferUpdate {
	if i != nil {
		itu.SetTime(*i)
	}
	return itu
}

// AddTime adds i to the "time" field.
func (itu *InternalTransferUpdate) AddTime(i int64) *InternalTransferUpdate {
	itu.mutation.AddTime(i)
	return itu
}

// SetAddress sets the "address" field.
func (itu *InternalTransferUpdate) SetAddress(s string) *InternalTransferUpdate {
	itu.mutation.SetAddress(s)
	return itu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (itu *InternalTransferUpdate) SetNillableAddress(s *string) *InternalTransferUpdate {
	if s != nil {
		itu.SetAddress(*s)
	}
	return itu
}

// Mutation returns the InternalTransferMutation object of the builder.
func (itu *InternalTransferUpdate) Mutation() *InternalTransferMutation {
	return itu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (itu *InternalTransferUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, itu.sqlSave, itu.mutation, itu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (itu *InternalTransferUpdate) SaveX(ctx context.Context) int {
	affected, err := itu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (itu *InternalTransferUpdate) Exec(ctx context.Context) error {
	_, err := itu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itu *InternalTransferUpdate) ExecX(ctx context.Context) {
	if err := itu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (itu *InternalTransferUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(internaltransfer.Table, internaltransfer.Columns, sqlgraph.NewFieldSpec(internaltransfer.FieldID, field.TypeInt))
	if ps := itu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := itu.mutation.User(); ok {
		_spec.SetField(internaltransfer.FieldUser, field.TypeString, value)
	}
	if value, ok := itu.mutation.Destination(); ok {
		_spec.SetField(internaltransfer.FieldDestination, field.TypeString, value)
	}
	if value, ok := itu.mutation.Usdc(); ok {
		_spec.SetField(internaltransfer.FieldUsdc, field.TypeString, value)
	}
	if value, ok := itu.mutation.Fee(); ok {
		_spec.SetField(internaltransfer.FieldFee, field.TypeString, value)
	}
	if value, ok := itu.mutation.Time(); ok {
		_spec.SetField(internaltransfer.FieldTime, field.TypeInt64, value)
	}
	if value, ok := itu.mutation.AddedTime(); ok {
		_spec.AddField(internaltransfer.FieldTime, field.TypeInt64, value)
	}
	if value, ok := itu.mutation.Address(); ok {
		_spec.SetField(internaltransfer.FieldAddress, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, itu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{internaltransfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	itu.mutation.done = true
	return n, nil
}

// InternalTransferUpdateOne is the builder for updating a single InternalTransfer entity.
type InternalTransferUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InternalTransferMutation
}

// SetUser sets the "user" field.
func (ituo *InternalTransferUpdateOne) SetUser(s string) *InternalTransferUpdateOne {
	ituo.mutation.SetUser(s)
	return ituo
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (ituo *InternalTransferUpdateOne) SetNillableUser(s *string) *InternalTransferUpdateOne {
	if s != nil {
		ituo.SetUser(*s)
	}
	return ituo
}

// SetDestination sets the "destination" field.
func (ituo *InternalTransferUpdateOne) SetDestination(s string) *InternalTransferUpdateOne {
	ituo.mutation.SetDestination(s)
	return ituo
}

// SetNillableDestination sets the "destination" field if the given value is not nil.
func (ituo *InternalTransferUpdateOne) SetNillableDestination(s *string) *InternalTransferUpdateOne {
	if s != nil {
		ituo.SetDestination(*s)
	}
	return ituo
}

// SetUsdc sets the "usdc" field.
func (ituo *InternalTransferUpdateOne) SetUsdc(s string) *InternalTransferUpdateOne {
	ituo.mutation.SetUsdc(s)
	return ituo
}

// SetNillableUsdc sets the "usdc" field if the given value is not nil.
func (ituo *InternalTransferUpdateOne) SetNillableUsdc(s *string) *InternalTransferUpdateOne {
	if s != nil {
		ituo.SetUsdc(*s)
	}
	return ituo
}

// SetFee sets the "fee" field.
func (ituo *InternalTransferUpdateOne) SetFee(s string) *InternalTransferUpdateOne {
	ituo.mutation.SetFee(s)
	return ituo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (ituo *InternalTransferUpdateOne) SetNillableFee(s *string) *InternalTransferUpdateOne {
	if s != nil {
		ituo.SetFee(*s)
	}
	return ituo
}

// SetTime sets the "time" field.
func (ituo *InternalTransferUpdateOne) SetTime(i int64) *InternalTransferUpdateOne {
	ituo.mutation.ResetTime()
	ituo.mutation.SetTime(i)
	return ituo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (ituo *InternalTransferUpdateOne) SetNillableTime(i *int64) *InternalTransferUpdateOne {
	if i != nil {
		ituo.SetTime(*i)
	}
	return ituo
}

// AddTime adds i to the "time" field.
func (ituo *InternalTransferUpdateOne) AddTime(i int64) *InternalTransferUpdateOne {
	ituo.mutation.AddTime(i)
	return ituo
}

// SetAddress sets the "address" field.
func (ituo *InternalTransferUpdateOne) SetAddress(s string) *InternalTransferUpdateOne {
	ituo.mutation.SetAddress(s)
	return ituo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ituo *InternalTransferUpdateOne) SetNillableAddress(s *string) *InternalTransferUpdateOne {
	if s != nil {
		ituo.SetAddress(*s)
	}
	return ituo
}

// Mutation returns the InternalTransferMutation object of the builder.
func (ituo *InternalTransferUpdateOne) Mutation() *InternalTransferMutation {
	return ituo.mutation
}

// Where appends a list predicates to the InternalTransferUpdate builder.
func (ituo *InternalTransferUpdateOne) Where(ps ...predicate.InternalTransfer) *InternalTransferUpdateOne {
	ituo.mutation.Where(ps...)
	return ituo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ituo *InternalTransferUpdateOne) Select(field string, fields ...string) *InternalTransferUpdateOne {
	ituo.fields = append([]string{field}, fields...)
	return ituo
}

// Save executes the query and returns the updated InternalTransfer entity.
func (ituo *InternalTransferUpdateOne) Save(ctx context.Context) (*InternalTransfer, error) {
	return withHooks(ctx, ituo.sqlSave, ituo.mutation, ituo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ituo *InternalTransferUpdateOne) SaveX(ctx context.Context) *InternalTransfer {
	node, err := ituo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ituo *InternalTransferUpdateOne) Exec(ctx context.Context) error {
	_, err := ituo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ituo *InternalTransferUpdateOne) ExecX(ctx context.Context) {
	if err := ituo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ituo *InternalTransferUpdateOne) sqlSave(ctx context.Context) (_node *InternalTransfer, err error) {
	_spec := sqlgraph.NewUpdateSpec(internaltransfer.Table, internaltransfer.Columns, sqlgraph.NewFieldSpec(internaltransfer.FieldID, field.TypeInt))
	id, ok := ituo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InternalTransfer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ituo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, internaltransfer.FieldID)
		for _, f := range fields {
			if !internaltransfer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != internaltransfer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ituo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ituo.mutation.User(); ok {
		_spec.SetField(internaltransfer.FieldUser, field.TypeString, value)
	}
	if value, ok := ituo.mutation.Destination(); ok {
		_spec.SetField(internaltransfer.FieldDestination, field.TypeString, value)
	}
	if value, ok := ituo.mutation.Usdc(); ok {
		_spec.SetField(internaltransfer.FieldUsdc, field.TypeString, value)
	}
	if value, ok := ituo.mutation.Fee(); ok {
		_spec.SetField(internaltransfer.FieldFee, field.TypeString, value)
	}
	if value, ok := ituo.mutation.Time(); ok {
		_spec.SetField(internaltransfer.FieldTime, field.TypeInt64, value)
	}
	if value, ok := ituo.mutation.AddedTime(); ok {
		_spec.AddField(internaltransfer.FieldTime, field.TypeInt64, value)
	}
	if value, ok := ituo.mutation.Address(); ok {
		_spec.SetField(internaltransfer.FieldAddress, field.TypeString, value)
	}
	_node = &InternalTransfer{config: ituo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ituo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{internaltransfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ituo.mutation.done = true
	return _node, nil
}
