// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yoshiso/hypersync/ent/delegate"
	"github.com/yoshiso/hypersync/ent/delegatorreward"
	"github.com/yoshiso/hypersync/ent/fill"
	"github.com/yoshiso/hypersync/ent/funding"
	"github.com/yoshiso/hypersync/ent/internaltransfer"
	"github.com/yoshiso/hypersync/ent/predicate"
	"github.com/yoshiso/hypersync/ent/rewardsclaim"
	"github.com/yoshiso/hypersync/ent/spotgenesis"
	"github.com/yoshiso/hypersync/ent/spottransfer"
	"github.com/yoshiso/hypersync/ent/vaultdelta"
	"github.com/yoshiso/hypersync/ent/vaultleadercommission"
	"github.com/yoshiso/hypersync/ent/vaultwithdrawal"
	"github.com/yoshiso/hypersync/ent/withdraw"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDelegate              = "Delegate"
	TypeDelegatorReward       = "DelegatorReward"
	TypeFill                  = "Fill"
	TypeFunding               = "Funding"
	TypeInternalTransfer      = "InternalTransfer"
	TypeRewardsClaim          = "RewardsClaim"
	TypeSpotGenesis           = "SpotGenesis"
	TypeSpotTransfer          = "SpotTransfer"
	TypeVaultDelta            = "VaultDelta"
	TypeVaultLeaderCommission = "VaultLeaderCommission"
	TypeVaultWithdrawal       = "VaultWithdrawal"
	TypeWithdraw              = "Withdraw"
)

// DelegateMutation represents an operation that mutates the Delegate nodes in the graph.
type DelegateMutation struct {
	config
	op            Op
	typ           string
	id            *int
	validator     *string
	amount        *string
	is_undelegate *bool
	time          *int64
	addtime       *int64
	address       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Delegate, error)
	predicates    []predicate.Delegate
}

var _ ent.Mutation = (*DelegateMutation)(nil)

// delegateOption allows management of the mutation configuration using functional options.
type delegateOption func(*DelegateMutation)

// newDelegateMutation creates new mutation for the Delegate entity.
func newDelegateMutation(c config, op Op, opts ...delegateOption) *DelegateMutation {
	m := &DelegateMutation{
		config:        c,
		op:            op,
		typ:           TypeDelegate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDelegateID sets the ID field of the mutation.
func withDelegateID(id int) delegateOption {
	return func(m *DelegateMutation) {
		var (
			err   error
			once  sync.Once
			value *Delegate
		)
		m.oldValue = func(ctx context.Context) (*Delegate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Delegate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDelegate sets the old Delegate of the mutation.
func withDelegate(node *Delegate) delegateOption {
	return func(m *DelegateMutation) {
		m.oldValue = func(context.Context) (*Delegate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DelegateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DelegateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DelegateMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DelegateMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Delegate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetValidator sets the "validator" field.
func (m *DelegateMutation) SetValidator(s string) {
	m.validator = &s
}

// Validator returns the value of the "validator" field in the mutation.
func (m *DelegateMutation) Validator() (r string, exists bool) {
	v := m.validator
	if v == nil {
		return
	}
	return *v, true
}

// OldValidator returns the old "validator" field's value of the Delegate entity.
// If the Delegate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DelegateMutation) OldValidator(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValidator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValidator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValidator: %w", err)
	}
	return oldValue.Validator, nil
}

// ResetValidator resets all changes to the "validator" field.
func (m *DelegateMutation) ResetValidator() {
	m.validator = nil
}

// SetAmount sets the "amount" field.
func (m *DelegateMutation) SetAmount(s string) {
	m.amount = &s
}

// Amount returns the value of the "amount" field in the mutation.
func (m *DelegateMutation) Amount() (r string, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Delegate entity.
// If the Delegate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DelegateMutation) OldAmount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ResetAmount resets all changes to the "amount" field.
func (m *DelegateMutation) ResetAmount() {
	m.amount = nil
}

// SetIsUndelegate sets the "is_undelegate" field.
func (m *DelegateMutation) SetIsUndelegate(b bool) {
	m.is_undelegate = &b
}

// IsUndelegate returns the value of the "is_undelegate" field in the mutation.
func (m *DelegateMutation) IsUndelegate() (r bool, exists bool) {
	v := m.is_undelegate
	if v == nil {
		return
	}
	return *v, true
}

// OldIsUndelegate returns the old "is_undelegate" field's value of the Delegate entity.
// If the Delegate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DelegateMutation) OldIsUndelegate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsUndelegate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsUndelegate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsUndelegate: %w", err)
	}
	return oldValue.IsUndelegate, nil
}

// ResetIsUndelegate resets all changes to the "is_undelegate" field.
func (m *DelegateMutation) ResetIsUndelegate() {
	m.is_undelegate = nil
}

// SetTime sets the "time" field.
func (m *DelegateMutation) SetTime(i int64) {
	m.time = &i
	m.addtime = nil
}

// Time returns the value of the "time" field in the mutation.
func (m *DelegateMutation) Time() (r int64, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Delegate entity.
// If the Delegate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DelegateMutation) OldTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// AddTime adds i to the "time" field.
func (m *DelegateMutation) AddTime(i int64) {
	if m.addtime != nil {
		*m.addtime += i
	} else {
		m.addtime = &i
	}
}

// AddedTime returns the value that was added to the "time" field in this mutation.
func (m *DelegateMutation) AddedTime() (r int64, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime resets all changes to the "time" field.
func (m *DelegateMutation) ResetTime() {
	m.time = nil
	m.addtime = nil
}

// SetAddress sets the "address" field.
func (m *DelegateMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *DelegateMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Delegate entity.
// If the Delegate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DelegateMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *DelegateMutation) ResetAddress() {
	m.address = nil
}

// Where appends a list predicates to the DelegateMutation builder.
func (m *DelegateMutation) Where(ps ...predicate.Delegate) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DelegateMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DelegateMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Delegate, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DelegateMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DelegateMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Delegate).
func (m *DelegateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DelegateMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.validator != nil {
		fields = append(fields, delegate.FieldValidator)
	}
	if m.amount != nil {
		fields = append(fields, delegate.FieldAmount)
	}
	if m.is_undelegate != nil {
		fields = append(fields, delegate.FieldIsUndelegate)
	}
	if m.time != nil {
		fields = append(fields, delegate.FieldTime)
	}
	if m.address != nil {
		fields = append(fields, delegate.FieldAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DelegateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case delegate.FieldValidator:
		return m.Validator()
	case delegate.FieldAmount:
		return m.Amount()
	case delegate.FieldIsUndelegate:
		return m.IsUndelegate()
	case delegate.FieldTime:
		return m.Time()
	case delegate.FieldAddress:
		return m.Address()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DelegateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case delegate.FieldValidator:
		return m.OldValidator(ctx)
	case delegate.FieldAmount:
		return m.OldAmount(ctx)
	case delegate.FieldIsUndelegate:
		return m.OldIsUndelegate(ctx)
	case delegate.FieldTime:
		return m.OldTime(ctx)
	case delegate.FieldAddress:
		return m.OldAddress(ctx)
	}
	return nil, fmt.Errorf("unknown Delegate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DelegateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case delegate.FieldValidator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValidator(v)
		return nil
	case delegate.FieldAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case delegate.FieldIsUndelegate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsUndelegate(v)
		return nil
	case delegate.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case delegate.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	}
	return fmt.Errorf("unknown Delegate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DelegateMutation) AddedFields() []string {
	var fields []string
	if m.addtime != nil {
		fields = append(fields, delegate.FieldTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DelegateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case delegate.FieldTime:
		return m.AddedTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DelegateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case delegate.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTime(v)
		return nil
	}
	return fmt.Errorf("unknown Delegate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DelegateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DelegateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DelegateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Delegate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DelegateMutation) ResetField(name string) error {
	switch name {
	case delegate.FieldValidator:
		m.ResetValidator()
		return nil
	case delegate.FieldAmount:
		m.ResetAmount()
		return nil
	case delegate.FieldIsUndelegate:
		m.ResetIsUndelegate()
		return nil
	case delegate.FieldTime:
		m.ResetTime()
		return nil
	case delegate.FieldAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown Delegate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DelegateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DelegateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DelegateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DelegateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DelegateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DelegateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DelegateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Delegate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DelegateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Delegate edge %s", name)
}

// DelegatorRewardMutation represents an operation that mutates the DelegatorReward nodes in the graph.
type DelegatorRewardMutation struct {
	config
	op            Op
	typ           string
	id            *int
	source        *string
	total_amount  *string
	time          *int64
	addtime       *int64
	address       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*DelegatorReward, error)
	predicates    []predicate.DelegatorReward
}

var _ ent.Mutation = (*DelegatorRewardMutation)(nil)

// delegatorrewardOption allows management of the mutation configuration using functional options.
type delegatorrewardOption func(*DelegatorRewardMutation)

// newDelegatorRewardMutation creates new mutation for the DelegatorReward entity.
func newDelegatorRewardMutation(c config, op Op, opts ...delegatorrewardOption) *DelegatorRewardMutation {
	m := &DelegatorRewardMutation{
		config:        c,
		op:            op,
		typ:           TypeDelegatorReward,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDelegatorRewardID sets the ID field of the mutation.
func withDelegatorRewardID(id int) delegatorrewardOption {
	return func(m *DelegatorRewardMutation) {
		var (
			err   error
			once  sync.Once
			value *DelegatorReward
		)
		m.oldValue = func(ctx context.Context) (*DelegatorReward, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DelegatorReward.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDelegatorReward sets the old DelegatorReward of the mutation.
func withDelegatorReward(node *DelegatorReward) delegatorrewardOption {
	return func(m *DelegatorRewardMutation) {
		m.oldValue = func(context.Context) (*DelegatorReward, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DelegatorRewardMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DelegatorRewardMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DelegatorRewardMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DelegatorRewardMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DelegatorReward.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSource sets the "source" field.
func (m *DelegatorRewardMutation) SetSource(s string) {
	m.source = &s
}

// Source returns the value of the "source" field in the mutation.
func (m *DelegatorRewardMutation) Source() (r string, exists bool) {
	v := m.source
	if v == nil {
		return
	}
	return *v, true
}

// OldSource returns the old "source" field's value of the DelegatorReward entity.
// If the DelegatorReward object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DelegatorRewardMutation) OldSource(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSource: %w", err)
	}
	return oldValue.Source, nil
}

// ResetSource resets all changes to the "source" field.
func (m *DelegatorRewardMutation) ResetSource() {
	m.source = nil
}

// SetTotalAmount sets the "total_amount" field.
func (m *DelegatorRewardMutation) SetTotalAmount(s string) {
	m.total_amount = &s
}

// TotalAmount returns the value of the "total_amount" field in the mutation.
func (m *DelegatorRewardMutation) TotalAmount() (r string, exists bool) {
	v := m.total_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalAmount returns the old "total_amount" field's value of the DelegatorReward entity.
// If the DelegatorReward object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DelegatorRewardMutation) OldTotalAmount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalAmount: %w", err)
	}
	return oldValue.TotalAmount, nil
}

// ResetTotalAmount resets all changes to the "total_amount" field.
func (m *DelegatorRewardMutation) ResetTotalAmount() {
	m.total_amount = nil
}

// SetTime sets the "time" field.
func (m *DelegatorRewardMutation) SetTime(i int64) {
	m.time = &i
	m.addtime = nil
}

// Time returns the value of the "time" field in the mutation.
func (m *DelegatorRewardMutation) Time() (r int64, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the DelegatorReward entity.
// If the DelegatorReward object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DelegatorRewardMutation) OldTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// AddTime adds i to the "time" field.
func (m *DelegatorRewardMutation) AddTime(i int64) {
	if m.addtime != nil {
		*m.addtime += i
	} else {
		m.addtime = &i
	}
}

// AddedTime returns the value that was added to the "time" field in this mutation.
func (m *DelegatorRewardMutation) AddedTime() (r int64, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime resets all changes to the "time" field.
func (m *DelegatorRewardMutation) ResetTime() {
	m.time = nil
	m.addtime = nil
}

// SetAddress sets the "address" field.
func (m *DelegatorRewardMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *DelegatorRewardMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the DelegatorReward entity.
// If the DelegatorReward object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DelegatorRewardMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *DelegatorRewardMutation) ResetAddress() {
	m.address = nil
}

// Where appends a list predicates to the DelegatorRewardMutation builder.
func (m *DelegatorRewardMutation) Where(ps ...predicate.DelegatorReward) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DelegatorRewardMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DelegatorRewardMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DelegatorReward, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DelegatorRewardMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DelegatorRewardMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DelegatorReward).
func (m *DelegatorRewardMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DelegatorRewardMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.source != nil {
		fields = append(fields, delegatorreward.FieldSource)
	}
	if m.total_amount != nil {
		fields = append(fields, delegatorreward.FieldTotalAmount)
	}
	if m.time != nil {
		fields = append(fields, delegatorreward.FieldTime)
	}
	if m.address != nil {
		fields = append(fields, delegatorreward.FieldAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DelegatorRewardMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case delegatorreward.FieldSource:
		return m.Source()
	case delegatorreward.FieldTotalAmount:
		return m.TotalAmount()
	case delegatorreward.FieldTime:
		return m.Time()
	case delegatorreward.FieldAddress:
		return m.Address()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DelegatorRewardMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case delegatorreward.FieldSource:
		return m.OldSource(ctx)
	case delegatorreward.FieldTotalAmount:
		return m.OldTotalAmount(ctx)
	case delegatorreward.FieldTime:
		return m.OldTime(ctx)
	case delegatorreward.FieldAddress:
		return m.OldAddress(ctx)
	}
	return nil, fmt.Errorf("unknown DelegatorReward field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DelegatorRewardMutation) SetField(name string, value ent.Value) error {
	switch name {
	case delegatorreward.FieldSource:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSource(v)
		return nil
	case delegatorreward.FieldTotalAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalAmount(v)
		return nil
	case delegatorreward.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case delegatorreward.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	}
	return fmt.Errorf("unknown DelegatorReward field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DelegatorRewardMutation) AddedFields() []string {
	var fields []string
	if m.addtime != nil {
		fields = append(fields, delegatorreward.FieldTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DelegatorRewardMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case delegatorreward.FieldTime:
		return m.AddedTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DelegatorRewardMutation) AddField(name string, value ent.Value) error {
	switch name {
	case delegatorreward.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTime(v)
		return nil
	}
	return fmt.Errorf("unknown DelegatorReward numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DelegatorRewardMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DelegatorRewardMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DelegatorRewardMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DelegatorReward nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DelegatorRewardMutation) ResetField(name string) error {
	switch name {
	case delegatorreward.FieldSource:
		m.ResetSource()
		return nil
	case delegatorreward.FieldTotalAmount:
		m.ResetTotalAmount()
		return nil
	case delegatorreward.FieldTime:
		m.ResetTime()
		return nil
	case delegatorreward.FieldAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown DelegatorReward field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DelegatorRewardMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DelegatorRewardMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DelegatorRewardMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DelegatorRewardMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DelegatorRewardMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DelegatorRewardMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DelegatorRewardMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DelegatorReward unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DelegatorRewardMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DelegatorReward edge %s", name)
}

// FillMutation represents an operation that mutates the Fill nodes in the graph.
type FillMutation struct {
	config
	op             Op
	typ            string
	id             *int
	coin           *string
	address        *string
	px             *string
	sz             *string
	side           *string
	time           *int64
	addtime        *int64
	start_position *string
	closed_pnl     *string
	dir            *string
	hash           *string
	crossed        *bool
	fee            *string
	oid            *int64
	addoid         *int64
	tid            *int64
	addtid         *int64
	fee_token      *string
	builder_fee    *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Fill, error)
	predicates     []predicate.Fill
}

var _ ent.Mutation = (*FillMutation)(nil)

// fillOption allows management of the mutation configuration using functional options.
type fillOption func(*FillMutation)

// newFillMutation creates new mutation for the Fill entity.
func newFillMutation(c config, op Op, opts ...fillOption) *FillMutation {
	m := &FillMutation{
		config:        c,
		op:            op,
		typ:           TypeFill,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFillID sets the ID field of the mutation.
func withFillID(id int) fillOption {
	return func(m *FillMutation) {
		var (
			err   error
			once  sync.Once
			value *Fill
		)
		m.oldValue = func(ctx context.Context) (*Fill, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Fill.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFill sets the old Fill of the mutation.
func withFill(node *Fill) fillOption {
	return func(m *FillMutation) {
		m.oldValue = func(context.Context) (*Fill, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FillMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FillMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FillMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FillMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Fill.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCoin sets the "coin" field.
func (m *FillMutation) SetCoin(s string) {
	m.coin = &s
}

// Coin returns the value of the "coin" field in the mutation.
func (m *FillMutation) Coin() (r string, exists bool) {
	v := m.coin
	if v == nil {
		return
	}
	return *v, true
}

// OldCoin returns the old "coin" field's value of the Fill entity.
// If the Fill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FillMutation) OldCoin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoin: %w", err)
	}
	return oldValue.Coin, nil
}

// ResetCoin resets all changes to the "coin" field.
func (m *FillMutation) ResetCoin() {
	m.coin = nil
}

// SetAddress sets the "address" field.
func (m *FillMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *FillMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Fill entity.
// If the Fill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FillMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *FillMutation) ResetAddress() {
	m.address = nil
}

// SetPx sets the "px" field.
func (m *FillMutation) SetPx(s string) {
	m.px = &s
}

// Px returns the value of the "px" field in the mutation.
func (m *FillMutation) Px() (r string, exists bool) {
	v := m.px
	if v == nil {
		return
	}
	return *v, true
}

// OldPx returns the old "px" field's value of the Fill entity.
// If the Fill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FillMutation) OldPx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPx: %w", err)
	}
	return oldValue.Px, nil
}

// ResetPx resets all changes to the "px" field.
func (m *FillMutation) ResetPx() {
	m.px = nil
}

// SetSz sets the "sz" field.
func (m *FillMutation) SetSz(s string) {
	m.sz = &s
}

// Sz returns the value of the "sz" field in the mutation.
func (m *FillMutation) Sz() (r string, exists bool) {
	v := m.sz
	if v == nil {
		return
	}
	return *v, true
}

// OldSz returns the old "sz" field's value of the Fill entity.
// If the Fill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FillMutation) OldSz(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSz is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSz requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSz: %w", err)
	}
	return oldValue.Sz, nil
}

// ResetSz resets all changes to the "sz" field.
func (m *FillMutation) ResetSz() {
	m.sz = nil
}

// SetSide sets the "side" field.
func (m *FillMutation) SetSide(s string) {
	m.side = &s
}

// Side returns the value of the "side" field in the mutation.
func (m *FillMutation) Side() (r string, exists bool) {
	v := m.side
	if v == nil {
		return
	}
	return *v, true
}

// OldSide returns the old "side" field's value of the Fill entity.
// If the Fill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FillMutation) OldSide(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSide is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSide requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSide: %w", err)
	}
	return oldValue.Side, nil
}

// ResetSide resets all changes to the "side" field.
func (m *FillMutation) ResetSide() {
	m.side = nil
}

// SetTime sets the "time" field.
func (m *FillMutation) SetTime(i int64) {
	m.time = &i
	m.addtime = nil
}

// Time returns the value of the "time" field in the mutation.
func (m *FillMutation) Time() (r int64, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Fill entity.
// If the Fill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FillMutation) OldTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// AddTime adds i to the "time" field.
func (m *FillMutation) AddTime(i int64) {
	if m.addtime != nil {
		*m.addtime += i
	} else {
		m.addtime = &i
	}
}

// AddedTime returns the value that was added to the "time" field in this mutation.
func (m *FillMutation) AddedTime() (r int64, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime resets all changes to the "time" field.
func (m *FillMutation) ResetTime() {
	m.time = nil
	m.addtime = nil
}

// SetStartPosition sets the "start_position" field.
func (m *FillMutation) SetStartPosition(s string) {
	m.start_position = &s
}

// StartPosition returns the value of the "start_position" field in the mutation.
func (m *FillMutation) StartPosition() (r string, exists bool) {
	v := m.start_position
	if v == nil {
		return
	}
	return *v, true
}

// OldStartPosition returns the old "start_position" field's value of the Fill entity.
// If the Fill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FillMutation) OldStartPosition(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartPosition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartPosition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartPosition: %w", err)
	}
	return oldValue.StartPosition, nil
}

// ResetStartPosition resets all changes to the "start_position" field.
func (m *FillMutation) ResetStartPosition() {
	m.start_position = nil
}

// SetClosedPnl sets the "closed_pnl" field.
func (m *FillMutation) SetClosedPnl(s string) {
	m.closed_pnl = &s
}

// ClosedPnl returns the value of the "closed_pnl" field in the mutation.
func (m *FillMutation) ClosedPnl() (r string, exists bool) {
	v := m.closed_pnl
	if v == nil {
		return
	}
	return *v, true
}

// OldClosedPnl returns the old "closed_pnl" field's value of the Fill entity.
// If the Fill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FillMutation) OldClosedPnl(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClosedPnl is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClosedPnl requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClosedPnl: %w", err)
	}
	return oldValue.ClosedPnl, nil
}

// ResetClosedPnl resets all changes to the "closed_pnl" field.
func (m *FillMutation) ResetClosedPnl() {
	m.closed_pnl = nil
}

// SetDir sets the "dir" field.
func (m *FillMutation) SetDir(s string) {
	m.dir = &s
}

// Dir returns the value of the "dir" field in the mutation.
func (m *FillMutation) Dir() (r string, exists bool) {
	v := m.dir
	if v == nil {
		return
	}
	return *v, true
}

// OldDir returns the old "dir" field's value of the Fill entity.
// If the Fill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FillMutation) OldDir(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDir is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDir requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDir: %w", err)
	}
	return oldValue.Dir, nil
}

// ResetDir resets all changes to the "dir" field.
func (m *FillMutation) ResetDir() {
	m.dir = nil
}

// SetHash sets the "hash" field.
func (m *FillMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *FillMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the Fill entity.
// If the Fill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FillMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *FillMutation) ResetHash() {
	m.hash = nil
}

// SetCrossed sets the "crossed" field.
func (m *FillMutation) SetCrossed(b bool) {
	m.crossed = &b
}

// Crossed returns the value of the "crossed" field in the mutation.
func (m *FillMutation) Crossed() (r bool, exists bool) {
	v := m.crossed
	if v == nil {
		return
	}
	return *v, true
}

// OldCrossed returns the old "crossed" field's value of the Fill entity.
// If the Fill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FillMutation) OldCrossed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCrossed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCrossed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCrossed: %w", err)
	}
	return oldValue.Crossed, nil
}

// ResetCrossed resets all changes to the "crossed" field.
func (m *FillMutation) ResetCrossed() {
	m.crossed = nil
}

// SetFee sets the "fee" field.
func (m *FillMutation) SetFee(s string) {
	m.fee = &s
}

// Fee returns the value of the "fee" field in the mutation.
func (m *FillMutation) Fee() (r string, exists bool) {
	v := m.fee
	if v == nil {
		return
	}
	return *v, true
}

// OldFee returns the old "fee" field's value of the Fill entity.
// If the Fill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FillMutation) OldFee(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFee: %w", err)
	}
	return oldValue.Fee, nil
}

// ResetFee resets all changes to the "fee" field.
func (m *FillMutation) ResetFee() {
	m.fee = nil
}

// SetOid sets the "oid" field.
func (m *FillMutation) SetOid(i int64) {
	m.oid = &i
	m.addoid = nil
}

// Oid returns the value of the "oid" field in the mutation.
func (m *FillMutation) Oid() (r int64, exists bool) {
	v := m.oid
	if v == nil {
		return
	}
	return *v, true
}

// OldOid returns the old "oid" field's value of the Fill entity.
// If the Fill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FillMutation) OldOid(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOid: %w", err)
	}
	return oldValue.Oid, nil
}

// AddOid adds i to the "oid" field.
func (m *FillMutation) AddOid(i int64) {
	if m.addoid != nil {
		*m.addoid += i
	} else {
		m.addoid = &i
	}
}

// AddedOid returns the value that was added to the "oid" field in this mutation.
func (m *FillMutation) AddedOid() (r int64, exists bool) {
	v := m.addoid
	if v == nil {
		return
	}
	return *v, true
}

// ResetOid resets all changes to the "oid" field.
func (m *FillMutation) ResetOid() {
	m.oid = nil
	m.addoid = nil
}

// SetTid sets the "tid" field.
func (m *FillMutation) SetTid(i int64) {
	m.tid = &i
	m.addtid = nil
}

// Tid returns the value of the "tid" field in the mutation.
func (m *FillMutation) Tid() (r int64, exists bool) {
	v := m.tid
	if v == nil {
		return
	}
	return *v, true
}

// OldTid returns the old "tid" field's value of the Fill entity.
// If the Fill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FillMutation) OldTid(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTid: %w", err)
	}
	return oldValue.Tid, nil
}

// AddTid adds i to the "tid" field.
func (m *FillMutation) AddTid(i int64) {
	if m.addtid != nil {
		*m.addtid += i
	} else {
		m.addtid = &i
	}
}

// AddedTid returns the value that was added to the "tid" field in this mutation.
func (m *FillMutation) AddedTid() (r int64, exists bool) {
	v := m.addtid
	if v == nil {
		return
	}
	return *v, true
}

// ResetTid resets all changes to the "tid" field.
func (m *FillMutation) ResetTid() {
	m.tid = nil
	m.addtid = nil
}

// SetFeeToken sets the "fee_token" field.
func (m *FillMutation) SetFeeToken(s string) {
	m.fee_token = &s
}

// FeeToken returns the value of the "fee_token" field in the mutation.
func (m *FillMutation) FeeToken() (r string, exists bool) {
	v := m.fee_token
	if v == nil {
		return
	}
	return *v, true
}

// OldFeeToken returns the old "fee_token" field's value of the Fill entity.
// If the Fill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FillMutation) OldFeeToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeeToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeeToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeeToken: %w", err)
	}
	return oldValue.FeeToken, nil
}

// ResetFeeToken resets all changes to the "fee_token" field.
func (m *FillMutation) ResetFeeToken() {
	m.fee_token = nil
}

// SetBuilderFee sets the "builder_fee" field.
func (m *FillMutation) SetBuilderFee(s string) {
	m.builder_fee = &s
}

// BuilderFee returns the value of the "builder_fee" field in the mutation.
func (m *FillMutation) BuilderFee() (r string, exists bool) {
	v := m.builder_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldBuilderFee returns the old "builder_fee" field's value of the Fill entity.
// If the Fill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FillMutation) OldBuilderFee(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBuilderFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBuilderFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBuilderFee: %w", err)
	}
	return oldValue.BuilderFee, nil
}

// ClearBuilderFee clears the value of the "builder_fee" field.
func (m *FillMutation) ClearBuilderFee() {
	m.builder_fee = nil
	m.clearedFields[fill.FieldBuilderFee] = struct{}{}
}

// BuilderFeeCleared returns if the "builder_fee" field was cleared in this mutation.
func (m *FillMutation) BuilderFeeCleared() bool {
	_, ok := m.clearedFields[fill.FieldBuilderFee]
	return ok
}

// ResetBuilderFee resets all changes to the "builder_fee" field.
func (m *FillMutation) ResetBuilderFee() {
	m.builder_fee = nil
	delete(m.clearedFields, fill.FieldBuilderFee)
}

// Where appends a list predicates to the FillMutation builder.
func (m *FillMutation) Where(ps ...predicate.Fill) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FillMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FillMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Fill, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FillMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FillMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Fill).
func (m *FillMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FillMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.coin != nil {
		fields = append(fields, fill.FieldCoin)
	}
	if m.address != nil {
		fields = append(fields, fill.FieldAddress)
	}
	if m.px != nil {
		fields = append(fields, fill.FieldPx)
	}
	if m.sz != nil {
		fields = append(fields, fill.FieldSz)
	}
	if m.side != nil {
		fields = append(fields, fill.FieldSide)
	}
	if m.time != nil {
		fields = append(fields, fill.FieldTime)
	}
	if m.start_position != nil {
		fields = append(fields, fill.FieldStartPosition)
	}
	if m.closed_pnl != nil {
		fields = append(fields, fill.FieldClosedPnl)
	}
	if m.dir != nil {
		fields = append(fields, fill.FieldDir)
	}
	if m.hash != nil {
		fields = append(fields, fill.FieldHash)
	}
	if m.crossed != nil {
		fields = append(fields, fill.FieldCrossed)
	}
	if m.fee != nil {
		fields = append(fields, fill.FieldFee)
	}
	if m.oid != nil {
		fields = append(fields, fill.FieldOid)
	}
	if m.tid != nil {
		fields = append(fields, fill.FieldTid)
	}
	if m.fee_token != nil {
		fields = append(fields, fill.FieldFeeToken)
	}
	if m.builder_fee != nil {
		fields = append(fields, fill.FieldBuilderFee)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FillMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fill.FieldCoin:
		return m.Coin()
	case fill.FieldAddress:
		return m.Address()
	case fill.FieldPx:
		return m.Px()
	case fill.FieldSz:
		return m.Sz()
	case fill.FieldSide:
		return m.Side()
	case fill.FieldTime:
		return m.Time()
	case fill.FieldStartPosition:
		return m.StartPosition()
	case fill.FieldClosedPnl:
		return m.ClosedPnl()
	case fill.FieldDir:
		return m.Dir()
	case fill.FieldHash:
		return m.Hash()
	case fill.FieldCrossed:
		return m.Crossed()
	case fill.FieldFee:
		return m.Fee()
	case fill.FieldOid:
		return m.Oid()
	case fill.FieldTid:
		return m.Tid()
	case fill.FieldFeeToken:
		return m.FeeToken()
	case fill.FieldBuilderFee:
		return m.BuilderFee()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FillMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fill.FieldCoin:
		return m.OldCoin(ctx)
	case fill.FieldAddress:
		return m.OldAddress(ctx)
	case fill.FieldPx:
		return m.OldPx(ctx)
	case fill.FieldSz:
		return m.OldSz(ctx)
	case fill.FieldSide:
		return m.OldSide(ctx)
	case fill.FieldTime:
		return m.OldTime(ctx)
	case fill.FieldStartPosition:
		return m.OldStartPosition(ctx)
	case fill.FieldClosedPnl:
		return m.OldClosedPnl(ctx)
	case fill.FieldDir:
		return m.OldDir(ctx)
	case fill.FieldHash:
		return m.OldHash(ctx)
	case fill.FieldCrossed:
		return m.OldCrossed(ctx)
	case fill.FieldFee:
		return m.OldFee(ctx)
	case fill.FieldOid:
		return m.OldOid(ctx)
	case fill.FieldTid:
		return m.OldTid(ctx)
	case fill.FieldFeeToken:
		return m.OldFeeToken(ctx)
	case fill.FieldBuilderFee:
		return m.OldBuilderFee(ctx)
	}
	return nil, fmt.Errorf("unknown Fill field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FillMutation) SetField(name string, value ent.Value) error {
	switch name {
	case fill.FieldCoin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoin(v)
		return nil
	case fill.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case fill.FieldPx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPx(v)
		return nil
	case fill.FieldSz:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSz(v)
		return nil
	case fill.FieldSide:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSide(v)
		return nil
	case fill.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case fill.FieldStartPosition:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartPosition(v)
		return nil
	case fill.FieldClosedPnl:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClosedPnl(v)
		return nil
	case fill.FieldDir:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDir(v)
		return nil
	case fill.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	case fill.FieldCrossed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCrossed(v)
		return nil
	case fill.FieldFee:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFee(v)
		return nil
	case fill.FieldOid:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOid(v)
		return nil
	case fill.FieldTid:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTid(v)
		return nil
	case fill.FieldFeeToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeeToken(v)
		return nil
	case fill.FieldBuilderFee:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBuilderFee(v)
		return nil
	}
	return fmt.Errorf("unknown Fill field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FillMutation) AddedFields() []string {
	var fields []string
	if m.addtime != nil {
		fields = append(fields, fill.FieldTime)
	}
	if m.addoid != nil {
		fields = append(fields, fill.FieldOid)
	}
	if m.addtid != nil {
		fields = append(fields, fill.FieldTid)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FillMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case fill.FieldTime:
		return m.AddedTime()
	case fill.FieldOid:
		return m.AddedOid()
	case fill.FieldTid:
		return m.AddedTid()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FillMutation) AddField(name string, value ent.Value) error {
	switch name {
	case fill.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTime(v)
		return nil
	case fill.FieldOid:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOid(v)
		return nil
	case fill.FieldTid:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTid(v)
		return nil
	}
	return fmt.Errorf("unknown Fill numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FillMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(fill.FieldBuilderFee) {
		fields = append(fields, fill.FieldBuilderFee)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FillMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FillMutation) ClearField(name string) error {
	switch name {
	case fill.FieldBuilderFee:
		m.ClearBuilderFee()
		return nil
	}
	return fmt.Errorf("unknown Fill nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FillMutation) ResetField(name string) error {
	switch name {
	case fill.FieldCoin:
		m.ResetCoin()
		return nil
	case fill.FieldAddress:
		m.ResetAddress()
		return nil
	case fill.FieldPx:
		m.ResetPx()
		return nil
	case fill.FieldSz:
		m.ResetSz()
		return nil
	case fill.FieldSide:
		m.ResetSide()
		return nil
	case fill.FieldTime:
		m.ResetTime()
		return nil
	case fill.FieldStartPosition:
		m.ResetStartPosition()
		return nil
	case fill.FieldClosedPnl:
		m.ResetClosedPnl()
		return nil
	case fill.FieldDir:
		m.ResetDir()
		return nil
	case fill.FieldHash:
		m.ResetHash()
		return nil
	case fill.FieldCrossed:
		m.ResetCrossed()
		return nil
	case fill.FieldFee:
		m.ResetFee()
		return nil
	case fill.FieldOid:
		m.ResetOid()
		return nil
	case fill.FieldTid:
		m.ResetTid()
		return nil
	case fill.FieldFeeToken:
		m.ResetFeeToken()
		return nil
	case fill.FieldBuilderFee:
		m.ResetBuilderFee()
		return nil
	}
	return fmt.Errorf("unknown Fill field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FillMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FillMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FillMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FillMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FillMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FillMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FillMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Fill unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FillMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Fill edge %s", name)
}

// FundingMutation represents an operation that mutates the Funding nodes in the graph.
type FundingMutation struct {
	config
	op            Op
	typ           string
	id            *int
	time          *int64
	addtime       *int64
	coin          *string
	usdc          *string
	szi           *string
	funding_rate  *string
	address       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Funding, error)
	predicates    []predicate.Funding
}

var _ ent.Mutation = (*FundingMutation)(nil)

// fundingOption allows management of the mutation configuration using functional options.
type fundingOption func(*FundingMutation)

// newFundingMutation creates new mutation for the Funding entity.
func newFundingMutation(c config, op Op, opts ...fundingOption) *FundingMutation {
	m := &FundingMutation{
		config:        c,
		op:            op,
		typ:           TypeFunding,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFundingID sets the ID field of the mutation.
func withFundingID(id int) fundingOption {
	return func(m *FundingMutation) {
		var (
			err   error
			once  sync.Once
			value *Funding
		)
		m.oldValue = func(ctx context.Context) (*Funding, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Funding.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFunding sets the old Funding of the mutation.
func withFunding(node *Funding) fundingOption {
	return func(m *FundingMutation) {
		m.oldValue = func(context.Context) (*Funding, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FundingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FundingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FundingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FundingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Funding.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTime sets the "time" field.
func (m *FundingMutation) SetTime(i int64) {
	m.time = &i
	m.addtime = nil
}

// Time returns the value of the "time" field in the mutation.
func (m *FundingMutation) Time() (r int64, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Funding entity.
// If the Funding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FundingMutation) OldTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// AddTime adds i to the "time" field.
func (m *FundingMutation) AddTime(i int64) {
	if m.addtime != nil {
		*m.addtime += i
	} else {
		m.addtime = &i
	}
}

// AddedTime returns the value that was added to the "time" field in this mutation.
func (m *FundingMutation) AddedTime() (r int64, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime resets all changes to the "time" field.
func (m *FundingMutation) ResetTime() {
	m.time = nil
	m.addtime = nil
}

// SetCoin sets the "coin" field.
func (m *FundingMutation) SetCoin(s string) {
	m.coin = &s
}

// Coin returns the value of the "coin" field in the mutation.
func (m *FundingMutation) Coin() (r string, exists bool) {
	v := m.coin
	if v == nil {
		return
	}
	return *v, true
}

// OldCoin returns the old "coin" field's value of the Funding entity.
// If the Funding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FundingMutation) OldCoin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoin: %w", err)
	}
	return oldValue.Coin, nil
}

// ResetCoin resets all changes to the "coin" field.
func (m *FundingMutation) ResetCoin() {
	m.coin = nil
}

// SetUsdc sets the "usdc" field.
func (m *FundingMutation) SetUsdc(s string) {
	m.usdc = &s
}

// Usdc returns the value of the "usdc" field in the mutation.
func (m *FundingMutation) Usdc() (r string, exists bool) {
	v := m.usdc
	if v == nil {
		return
	}
	return *v, true
}

// OldUsdc returns the old "usdc" field's value of the Funding entity.
// If the Funding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FundingMutation) OldUsdc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsdc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsdc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsdc: %w", err)
	}
	return oldValue.Usdc, nil
}

// ResetUsdc resets all changes to the "usdc" field.
func (m *FundingMutation) ResetUsdc() {
	m.usdc = nil
}

// SetSzi sets the "szi" field.
func (m *FundingMutation) SetSzi(s string) {
	m.szi = &s
}

// Szi returns the value of the "szi" field in the mutation.
func (m *FundingMutation) Szi() (r string, exists bool) {
	v := m.szi
	if v == nil {
		return
	}
	return *v, true
}

// OldSzi returns the old "szi" field's value of the Funding entity.
// If the Funding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FundingMutation) OldSzi(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSzi is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSzi requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSzi: %w", err)
	}
	return oldValue.Szi, nil
}

// ResetSzi resets all changes to the "szi" field.
func (m *FundingMutation) ResetSzi() {
	m.szi = nil
}

// SetFundingRate sets the "funding_rate" field.
func (m *FundingMutation) SetFundingRate(s string) {
	m.funding_rate = &s
}

// FundingRate returns the value of the "funding_rate" field in the mutation.
func (m *FundingMutation) FundingRate() (r string, exists bool) {
	v := m.funding_rate
	if v == nil {
		return
	}
	return *v, true
}

// OldFundingRate returns the old "funding_rate" field's value of the Funding entity.
// If the Funding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FundingMutation) OldFundingRate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFundingRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFundingRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFundingRate: %w", err)
	}
	return oldValue.FundingRate, nil
}

// ResetFundingRate resets all changes to the "funding_rate" field.
func (m *FundingMutation) ResetFundingRate() {
	m.funding_rate = nil
}

// SetAddress sets the "address" field.
func (m *FundingMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *FundingMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Funding entity.
// If the Funding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FundingMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *FundingMutation) ResetAddress() {
	m.address = nil
}

// Where appends a list predicates to the FundingMutation builder.
func (m *FundingMutation) Where(ps ...predicate.Funding) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FundingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FundingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Funding, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FundingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FundingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Funding).
func (m *FundingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FundingMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.time != nil {
		fields = append(fields, funding.FieldTime)
	}
	if m.coin != nil {
		fields = append(fields, funding.FieldCoin)
	}
	if m.usdc != nil {
		fields = append(fields, funding.FieldUsdc)
	}
	if m.szi != nil {
		fields = append(fields, funding.FieldSzi)
	}
	if m.funding_rate != nil {
		fields = append(fields, funding.FieldFundingRate)
	}
	if m.address != nil {
		fields = append(fields, funding.FieldAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FundingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case funding.FieldTime:
		return m.Time()
	case funding.FieldCoin:
		return m.Coin()
	case funding.FieldUsdc:
		return m.Usdc()
	case funding.FieldSzi:
		return m.Szi()
	case funding.FieldFundingRate:
		return m.FundingRate()
	case funding.FieldAddress:
		return m.Address()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FundingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case funding.FieldTime:
		return m.OldTime(ctx)
	case funding.FieldCoin:
		return m.OldCoin(ctx)
	case funding.FieldUsdc:
		return m.OldUsdc(ctx)
	case funding.FieldSzi:
		return m.OldSzi(ctx)
	case funding.FieldFundingRate:
		return m.OldFundingRate(ctx)
	case funding.FieldAddress:
		return m.OldAddress(ctx)
	}
	return nil, fmt.Errorf("unknown Funding field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FundingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case funding.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case funding.FieldCoin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoin(v)
		return nil
	case funding.FieldUsdc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsdc(v)
		return nil
	case funding.FieldSzi:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSzi(v)
		return nil
	case funding.FieldFundingRate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFundingRate(v)
		return nil
	case funding.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	}
	return fmt.Errorf("unknown Funding field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FundingMutation) AddedFields() []string {
	var fields []string
	if m.addtime != nil {
		fields = append(fields, funding.FieldTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FundingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case funding.FieldTime:
		return m.AddedTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FundingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case funding.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTime(v)
		return nil
	}
	return fmt.Errorf("unknown Funding numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FundingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FundingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FundingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Funding nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FundingMutation) ResetField(name string) error {
	switch name {
	case funding.FieldTime:
		m.ResetTime()
		return nil
	case funding.FieldCoin:
		m.ResetCoin()
		return nil
	case funding.FieldUsdc:
		m.ResetUsdc()
		return nil
	case funding.FieldSzi:
		m.ResetSzi()
		return nil
	case funding.FieldFundingRate:
		m.ResetFundingRate()
		return nil
	case funding.FieldAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown Funding field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FundingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FundingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FundingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FundingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FundingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FundingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FundingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Funding unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FundingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Funding edge %s", name)
}

// InternalTransferMutation represents an operation that mutates the InternalTransfer nodes in the graph.
type InternalTransferMutation struct {
	config
	op            Op
	typ           string
	id            *int
	user          *string
	destination   *string
	usdc          *string
	fee           *string
	time          *int64
	addtime       *int64
	address       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*InternalTransfer, error)
	predicates    []predicate.InternalTransfer
}

var _ ent.Mutation = (*InternalTransferMutation)(nil)

// internaltransferOption allows management of the mutation configuration using functional options.
type internaltransferOption func(*InternalTransferMutation)

// newInternalTransferMutation creates new mutation for the InternalTransfer entity.
func newInternalTransferMutation(c config, op Op, opts ...internaltransferOption) *InternalTransferMutation {
	m := &InternalTransferMutation{
		config:        c,
		op:            op,
		typ:           TypeInternalTransfer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInternalTransferID sets the ID field of the mutation.
func withInternalTransferID(id int) internaltransferOption {
	return func(m *InternalTransferMutation) {
		var (
			err   error
			once  sync.Once
			value *InternalTransfer
		)
		m.oldValue = func(ctx context.Context) (*InternalTransfer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().InternalTransfer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInternalTransfer sets the old InternalTransfer of the mutation.
func withInternalTransfer(node *InternalTransfer) internaltransferOption {
	return func(m *InternalTransferMutation) {
		m.oldValue = func(context.Context) (*InternalTransfer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InternalTransferMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InternalTransferMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InternalTransferMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InternalTransferMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().InternalTransfer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUser sets the "user" field.
func (m *InternalTransferMutation) SetUser(s string) {
	m.user = &s
}

// User returns the value of the "user" field in the mutation.
func (m *InternalTransferMutation) User() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUser returns the old "user" field's value of the InternalTransfer entity.
// If the InternalTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternalTransferMutation) OldUser(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUser: %w", err)
	}
	return oldValue.User, nil
}

// ResetUser resets all changes to the "user" field.
func (m *InternalTransferMutation) ResetUser() {
	m.user = nil
}

// SetDestination sets the "destination" field.
func (m *InternalTransferMutation) SetDestination(s string) {
	m.destination = &s
}

// Destination returns the value of the "destination" field in the mutation.
func (m *InternalTransferMutation) Destination() (r string, exists bool) {
	v := m.destination
	if v == nil {
		return
	}
	return *v, true
}

// OldDestination returns the old "destination" field's value of the InternalTransfer entity.
// If the InternalTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternalTransferMutation) OldDestination(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDestination is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDestination requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDestination: %w", err)
	}
	return oldValue.Destination, nil
}

// ResetDestination resets all changes to the "destination" field.
func (m *InternalTransferMutation) ResetDestination() {
	m.destination = nil
}

// SetUsdc sets the "usdc" field.
func (m *InternalTransferMutation) SetUsdc(s string) {
	m.usdc = &s
}

// Usdc returns the value of the "usdc" field in the mutation.
func (m *InternalTransferMutation) Usdc() (r string, exists bool) {
	v := m.usdc
	if v == nil {
		return
	}
	return *v, true
}

// OldUsdc returns the old "usdc" field's value of the InternalTransfer entity.
// If the InternalTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternalTransferMutation) OldUsdc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsdc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsdc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsdc: %w", err)
	}
	return oldValue.Usdc, nil
}

// ResetUsdc resets all changes to the "usdc" field.
func (m *InternalTransferMutation) ResetUsdc() {
	m.usdc = nil
}

// SetFee sets the "fee" field.
func (m *InternalTransferMutation) SetFee(s string) {
	m.fee = &s
}

// Fee returns the value of the "fee" field in the mutation.
func (m *InternalTransferMutation) Fee() (r string, exists bool) {
	v := m.fee
	if v == nil {
		return
	}
	return *v, true
}

// OldFee returns the old "fee" field's value of the InternalTransfer entity.
// If the InternalTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternalTransferMutation) OldFee(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFee: %w", err)
	}
	return oldValue.Fee, nil
}

// ResetFee resets all changes to the "fee" field.
func (m *InternalTransferMutation) ResetFee() {
	m.fee = nil
}

// SetTime sets the "time" field.
func (m *InternalTransferMutation) SetTime(i int64) {
	m.time = &i
	m.addtime = nil
}

// Time returns the value of the "time" field in the mutation.
func (m *InternalTransferMutation) Time() (r int64, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the InternalTransfer entity.
// If the InternalTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternalTransferMutation) OldTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// AddTime adds i to the "time" field.
func (m *InternalTransferMutation) AddTime(i int64) {
	if m.addtime != nil {
		*m.addtime += i
	} else {
		m.addtime = &i
	}
}

// AddedTime returns the value that was added to the "time" field in this mutation.
func (m *InternalTransferMutation) AddedTime() (r int64, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime resets all changes to the "time" field.
func (m *InternalTransferMutation) ResetTime() {
	m.time = nil
	m.addtime = nil
}

// SetAddress sets the "address" field.
func (m *InternalTransferMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *InternalTransferMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the InternalTransfer entity.
// If the InternalTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternalTransferMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *InternalTransferMutation) ResetAddress() {
	m.address = nil
}

// Where appends a list predicates to the InternalTransferMutation builder.
func (m *InternalTransferMutation) Where(ps ...predicate.InternalTransfer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InternalTransferMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InternalTransferMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.InternalTransfer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InternalTransferMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InternalTransferMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (InternalTransfer).
func (m *InternalTransferMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InternalTransferMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.user != nil {
		fields = append(fields, internaltransfer.FieldUser)
	}
	if m.destination != nil {
		fields = append(fields, internaltransfer.FieldDestination)
	}
	if m.usdc != nil {
		fields = append(fields, internaltransfer.FieldUsdc)
	}
	if m.fee != nil {
		fields = append(fields, internaltransfer.FieldFee)
	}
	if m.time != nil {
		fields = append(fields, internaltransfer.FieldTime)
	}
	if m.address != nil {
		fields = append(fields, internaltransfer.FieldAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InternalTransferMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case internaltransfer.FieldUser:
		return m.User()
	case internaltransfer.FieldDestination:
		return m.Destination()
	case internaltransfer.FieldUsdc:
		return m.Usdc()
	case internaltransfer.FieldFee:
		return m.Fee()
	case internaltransfer.FieldTime:
		return m.Time()
	case internaltransfer.FieldAddress:
		return m.Address()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InternalTransferMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case internaltransfer.FieldUser:
		return m.OldUser(ctx)
	case internaltransfer.FieldDestination:
		return m.OldDestination(ctx)
	case internaltransfer.FieldUsdc:
		return m.OldUsdc(ctx)
	case internaltransfer.FieldFee:
		return m.OldFee(ctx)
	case internaltransfer.FieldTime:
		return m.OldTime(ctx)
	case internaltransfer.FieldAddress:
		return m.OldAddress(ctx)
	}
	return nil, fmt.Errorf("unknown InternalTransfer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InternalTransferMutation) SetField(name string, value ent.Value) error {
	switch name {
	case internaltransfer.FieldUser:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUser(v)
		return nil
	case internaltransfer.FieldDestination:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDestination(v)
		return nil
	case internaltransfer.FieldUsdc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsdc(v)
		return nil
	case internaltransfer.FieldFee:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFee(v)
		return nil
	case internaltransfer.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case internaltransfer.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	}
	return fmt.Errorf("unknown InternalTransfer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InternalTransferMutation) AddedFields() []string {
	var fields []string
	if m.addtime != nil {
		fields = append(fields, internaltransfer.FieldTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InternalTransferMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case internaltransfer.FieldTime:
		return m.AddedTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InternalTransferMutation) AddField(name string, value ent.Value) error {
	switch name {
	case internaltransfer.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTime(v)
		return nil
	}
	return fmt.Errorf("unknown InternalTransfer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InternalTransferMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InternalTransferMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InternalTransferMutation) ClearField(name string) error {
	return fmt.Errorf("unknown InternalTransfer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InternalTransferMutation) ResetField(name string) error {
	switch name {
	case internaltransfer.FieldUser:
		m.ResetUser()
		return nil
	case internaltransfer.FieldDestination:
		m.ResetDestination()
		return nil
	case internaltransfer.FieldUsdc:
		m.ResetUsdc()
		return nil
	case internaltransfer.FieldFee:
		m.ResetFee()
		return nil
	case internaltransfer.FieldTime:
		m.ResetTime()
		return nil
	case internaltransfer.FieldAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown InternalTransfer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InternalTransferMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InternalTransferMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InternalTransferMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InternalTransferMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InternalTransferMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InternalTransferMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InternalTransferMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown InternalTransfer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InternalTransferMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown InternalTransfer edge %s", name)
}

// RewardsClaimMutation represents an operation that mutates the RewardsClaim nodes in the graph.
type RewardsClaimMutation struct {
	config
	op            Op
	typ           string
	id            *int
	amount        *string
	time          *int64
	addtime       *int64
	address       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*RewardsClaim, error)
	predicates    []predicate.RewardsClaim
}

var _ ent.Mutation = (*RewardsClaimMutation)(nil)

// rewardsclaimOption allows management of the mutation configuration using functional options.
type rewardsclaimOption func(*RewardsClaimMutation)

// newRewardsClaimMutation creates new mutation for the RewardsClaim entity.
func newRewardsClaimMutation(c config, op Op, opts ...rewardsclaimOption) *RewardsClaimMutation {
	m := &RewardsClaimMutation{
		config:        c,
		op:            op,
		typ:           TypeRewardsClaim,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRewardsClaimID sets the ID field of the mutation.
func withRewardsClaimID(id int) rewardsclaimOption {
	return func(m *RewardsClaimMutation) {
		var (
			err   error
			once  sync.Once
			value *RewardsClaim
		)
		m.oldValue = func(ctx context.Context) (*RewardsClaim, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RewardsClaim.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRewardsClaim sets the old RewardsClaim of the mutation.
func withRewardsClaim(node *RewardsClaim) rewardsclaimOption {
	return func(m *RewardsClaimMutation) {
		m.oldValue = func(context.Context) (*RewardsClaim, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RewardsClaimMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RewardsClaimMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RewardsClaimMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RewardsClaimMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RewardsClaim.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAmount sets the "amount" field.
func (m *RewardsClaimMutation) SetAmount(s string) {
	m.amount = &s
}

// Amount returns the value of the "amount" field in the mutation.
func (m *RewardsClaimMutation) Amount() (r string, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the RewardsClaim entity.
// If the RewardsClaim object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RewardsClaimMutation) OldAmount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ResetAmount resets all changes to the "amount" field.
func (m *RewardsClaimMutation) ResetAmount() {
	m.amount = nil
}

// SetTime sets the "time" field.
func (m *RewardsClaimMutation) SetTime(i int64) {
	m.time = &i
	m.addtime = nil
}

// Time returns the value of the "time" field in the mutation.
func (m *RewardsClaimMutation) Time() (r int64, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the RewardsClaim entity.
// If the RewardsClaim object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RewardsClaimMutation) OldTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// AddTime adds i to the "time" field.
func (m *RewardsClaimMutation) AddTime(i int64) {
	if m.addtime != nil {
		*m.addtime += i
	} else {
		m.addtime = &i
	}
}

// AddedTime returns the value that was added to the "time" field in this mutation.
func (m *RewardsClaimMutation) AddedTime() (r int64, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime resets all changes to the "time" field.
func (m *RewardsClaimMutation) ResetTime() {
	m.time = nil
	m.addtime = nil
}

// SetAddress sets the "address" field.
func (m *RewardsClaimMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *RewardsClaimMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the RewardsClaim entity.
// If the RewardsClaim object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RewardsClaimMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *RewardsClaimMutation) ResetAddress() {
	m.address = nil
}

// Where appends a list predicates to the RewardsClaimMutation builder.
func (m *RewardsClaimMutation) Where(ps ...predicate.RewardsClaim) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RewardsClaimMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RewardsClaimMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RewardsClaim, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RewardsClaimMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RewardsClaimMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RewardsClaim).
func (m *RewardsClaimMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RewardsClaimMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.amount != nil {
		fields = append(fields, rewardsclaim.FieldAmount)
	}
	if m.time != nil {
		fields = append(fields, rewardsclaim.FieldTime)
	}
	if m.address != nil {
		fields = append(fields, rewardsclaim.FieldAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RewardsClaimMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rewardsclaim.FieldAmount:
		return m.Amount()
	case rewardsclaim.FieldTime:
		return m.Time()
	case rewardsclaim.FieldAddress:
		return m.Address()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RewardsClaimMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rewardsclaim.FieldAmount:
		return m.OldAmount(ctx)
	case rewardsclaim.FieldTime:
		return m.OldTime(ctx)
	case rewardsclaim.FieldAddress:
		return m.OldAddress(ctx)
	}
	return nil, fmt.Errorf("unknown RewardsClaim field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RewardsClaimMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rewardsclaim.FieldAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case rewardsclaim.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case rewardsclaim.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	}
	return fmt.Errorf("unknown RewardsClaim field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RewardsClaimMutation) AddedFields() []string {
	var fields []string
	if m.addtime != nil {
		fields = append(fields, rewardsclaim.FieldTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RewardsClaimMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case rewardsclaim.FieldTime:
		return m.AddedTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RewardsClaimMutation) AddField(name string, value ent.Value) error {
	switch name {
	case rewardsclaim.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTime(v)
		return nil
	}
	return fmt.Errorf("unknown RewardsClaim numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RewardsClaimMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RewardsClaimMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RewardsClaimMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RewardsClaim nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RewardsClaimMutation) ResetField(name string) error {
	switch name {
	case rewardsclaim.FieldAmount:
		m.ResetAmount()
		return nil
	case rewardsclaim.FieldTime:
		m.ResetTime()
		return nil
	case rewardsclaim.FieldAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown RewardsClaim field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RewardsClaimMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RewardsClaimMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RewardsClaimMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RewardsClaimMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RewardsClaimMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RewardsClaimMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RewardsClaimMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RewardsClaim unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RewardsClaimMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RewardsClaim edge %s", name)
}

// SpotGenesisMutation represents an operation that mutates the SpotGenesis nodes in the graph.
type SpotGenesisMutation struct {
	config
	op            Op
	typ           string
	id            *int
	coin          *string
	amount        *string
	time          *int64
	addtime       *int64
	address       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SpotGenesis, error)
	predicates    []predicate.SpotGenesis
}

var _ ent.Mutation = (*SpotGenesisMutation)(nil)

// spotgenesisOption allows management of the mutation configuration using functional options.
type spotgenesisOption func(*SpotGenesisMutation)

// newSpotGenesisMutation creates new mutation for the SpotGenesis entity.
func newSpotGenesisMutation(c config, op Op, opts ...spotgenesisOption) *SpotGenesisMutation {
	m := &SpotGenesisMutation{
		config:        c,
		op:            op,
		typ:           TypeSpotGenesis,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSpotGenesisID sets the ID field of the mutation.
func withSpotGenesisID(id int) spotgenesisOption {
	return func(m *SpotGenesisMutation) {
		var (
			err   error
			once  sync.Once
			value *SpotGenesis
		)
		m.oldValue = func(ctx context.Context) (*SpotGenesis, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SpotGenesis.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSpotGenesis sets the old SpotGenesis of the mutation.
func withSpotGenesis(node *SpotGenesis) spotgenesisOption {
	return func(m *SpotGenesisMutation) {
		m.oldValue = func(context.Context) (*SpotGenesis, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SpotGenesisMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SpotGenesisMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SpotGenesisMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SpotGenesisMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SpotGenesis.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCoin sets the "coin" field.
func (m *SpotGenesisMutation) SetCoin(s string) {
	m.coin = &s
}

// Coin returns the value of the "coin" field in the mutation.
func (m *SpotGenesisMutation) Coin() (r string, exists bool) {
	v := m.coin
	if v == nil {
		return
	}
	return *v, true
}

// OldCoin returns the old "coin" field's value of the SpotGenesis entity.
// If the SpotGenesis object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpotGenesisMutation) OldCoin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoin: %w", err)
	}
	return oldValue.Coin, nil
}

// ResetCoin resets all changes to the "coin" field.
func (m *SpotGenesisMutation) ResetCoin() {
	m.coin = nil
}

// SetAmount sets the "amount" field.
func (m *SpotGenesisMutation) SetAmount(s string) {
	m.amount = &s
}

// Amount returns the value of the "amount" field in the mutation.
func (m *SpotGenesisMutation) Amount() (r string, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the SpotGenesis entity.
// If the SpotGenesis object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpotGenesisMutation) OldAmount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ResetAmount resets all changes to the "amount" field.
func (m *SpotGenesisMutation) ResetAmount() {
	m.amount = nil
}

// SetTime sets the "time" field.
func (m *SpotGenesisMutation) SetTime(i int64) {
	m.time = &i
	m.addtime = nil
}

// Time returns the value of the "time" field in the mutation.
func (m *SpotGenesisMutation) Time() (r int64, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the SpotGenesis entity.
// If the SpotGenesis object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpotGenesisMutation) OldTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// AddTime adds i to the "time" field.
func (m *SpotGenesisMutation) AddTime(i int64) {
	if m.addtime != nil {
		*m.addtime += i
	} else {
		m.addtime = &i
	}
}

// AddedTime returns the value that was added to the "time" field in this mutation.
func (m *SpotGenesisMutation) AddedTime() (r int64, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime resets all changes to the "time" field.
func (m *SpotGenesisMutation) ResetTime() {
	m.time = nil
	m.addtime = nil
}

// SetAddress sets the "address" field.
func (m *SpotGenesisMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *SpotGenesisMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the SpotGenesis entity.
// If the SpotGenesis object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpotGenesisMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *SpotGenesisMutation) ResetAddress() {
	m.address = nil
}

// Where appends a list predicates to the SpotGenesisMutation builder.
func (m *SpotGenesisMutation) Where(ps ...predicate.SpotGenesis) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SpotGenesisMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SpotGenesisMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SpotGenesis, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SpotGenesisMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SpotGenesisMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SpotGenesis).
func (m *SpotGenesisMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SpotGenesisMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.coin != nil {
		fields = append(fields, spotgenesis.FieldCoin)
	}
	if m.amount != nil {
		fields = append(fields, spotgenesis.FieldAmount)
	}
	if m.time != nil {
		fields = append(fields, spotgenesis.FieldTime)
	}
	if m.address != nil {
		fields = append(fields, spotgenesis.FieldAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SpotGenesisMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case spotgenesis.FieldCoin:
		return m.Coin()
	case spotgenesis.FieldAmount:
		return m.Amount()
	case spotgenesis.FieldTime:
		return m.Time()
	case spotgenesis.FieldAddress:
		return m.Address()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SpotGenesisMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case spotgenesis.FieldCoin:
		return m.OldCoin(ctx)
	case spotgenesis.FieldAmount:
		return m.OldAmount(ctx)
	case spotgenesis.FieldTime:
		return m.OldTime(ctx)
	case spotgenesis.FieldAddress:
		return m.OldAddress(ctx)
	}
	return nil, fmt.Errorf("unknown SpotGenesis field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SpotGenesisMutation) SetField(name string, value ent.Value) error {
	switch name {
	case spotgenesis.FieldCoin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoin(v)
		return nil
	case spotgenesis.FieldAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case spotgenesis.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case spotgenesis.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	}
	return fmt.Errorf("unknown SpotGenesis field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SpotGenesisMutation) AddedFields() []string {
	var fields []string
	if m.addtime != nil {
		fields = append(fields, spotgenesis.FieldTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SpotGenesisMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case spotgenesis.FieldTime:
		return m.AddedTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SpotGenesisMutation) AddField(name string, value ent.Value) error {
	switch name {
	case spotgenesis.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTime(v)
		return nil
	}
	return fmt.Errorf("unknown SpotGenesis numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SpotGenesisMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SpotGenesisMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SpotGenesisMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SpotGenesis nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SpotGenesisMutation) ResetField(name string) error {
	switch name {
	case spotgenesis.FieldCoin:
		m.ResetCoin()
		return nil
	case spotgenesis.FieldAmount:
		m.ResetAmount()
		return nil
	case spotgenesis.FieldTime:
		m.ResetTime()
		return nil
	case spotgenesis.FieldAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown SpotGenesis field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SpotGenesisMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SpotGenesisMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SpotGenesisMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SpotGenesisMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SpotGenesisMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SpotGenesisMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SpotGenesisMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SpotGenesis unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SpotGenesisMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SpotGenesis edge %s", name)
}

// SpotTransferMutation represents an operation that mutates the SpotTransfer nodes in the graph.
type SpotTransferMutation struct {
	config
	op            Op
	typ           string
	id            *int
	user          *string
	destination   *string
	token         *string
	amount        *string
	fee           *string
	time          *int64
	addtime       *int64
	address       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SpotTransfer, error)
	predicates    []predicate.SpotTransfer
}

var _ ent.Mutation = (*SpotTransferMutation)(nil)

// spottransferOption allows management of the mutation configuration using functional options.
type spottransferOption func(*SpotTransferMutation)

// newSpotTransferMutation creates new mutation for the SpotTransfer entity.
func newSpotTransferMutation(c config, op Op, opts ...spottransferOption) *SpotTransferMutation {
	m := &SpotTransferMutation{
		config:        c,
		op:            op,
		typ:           TypeSpotTransfer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSpotTransferID sets the ID field of the mutation.
func withSpotTransferID(id int) spottransferOption {
	return func(m *SpotTransferMutation) {
		var (
			err   error
			once  sync.Once
			value *SpotTransfer
		)
		m.oldValue = func(ctx context.Context) (*SpotTransfer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SpotTransfer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSpotTransfer sets the old SpotTransfer of the mutation.
func withSpotTransfer(node *SpotTransfer) spottransferOption {
	return func(m *SpotTransferMutation) {
		m.oldValue = func(context.Context) (*SpotTransfer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SpotTransferMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SpotTransferMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SpotTransferMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SpotTransferMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SpotTransfer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUser sets the "user" field.
func (m *SpotTransferMutation) SetUser(s string) {
	m.user = &s
}

// User returns the value of the "user" field in the mutation.
func (m *SpotTransferMutation) User() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUser returns the old "user" field's value of the SpotTransfer entity.
// If the SpotTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpotTransferMutation) OldUser(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUser: %w", err)
	}
	return oldValue.User, nil
}

// ResetUser resets all changes to the "user" field.
func (m *SpotTransferMutation) ResetUser() {
	m.user = nil
}

// SetDestination sets the "destination" field.
func (m *SpotTransferMutation) SetDestination(s string) {
	m.destination = &s
}

// Destination returns the value of the "destination" field in the mutation.
func (m *SpotTransferMutation) Destination() (r string, exists bool) {
	v := m.destination
	if v == nil {
		return
	}
	return *v, true
}

// OldDestination returns the old "destination" field's value of the SpotTransfer entity.
// If the SpotTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpotTransferMutation) OldDestination(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDestination is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDestination requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDestination: %w", err)
	}
	return oldValue.Destination, nil
}

// ResetDestination resets all changes to the "destination" field.
func (m *SpotTransferMutation) ResetDestination() {
	m.destination = nil
}

// SetToken sets the "token" field.
func (m *SpotTransferMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *SpotTransferMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the SpotTransfer entity.
// If the SpotTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpotTransferMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *SpotTransferMutation) ResetToken() {
	m.token = nil
}

// SetAmount sets the "amount" field.
func (m *SpotTransferMutation) SetAmount(s string) {
	m.amount = &s
}

// Amount returns the value of the "amount" field in the mutation.
func (m *SpotTransferMutation) Amount() (r string, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the SpotTransfer entity.
// If the SpotTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpotTransferMutation) OldAmount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ResetAmount resets all changes to the "amount" field.
func (m *SpotTransferMutation) ResetAmount() {
	m.amount = nil
}

// SetFee sets the "fee" field.
func (m *SpotTransferMutation) SetFee(s string) {
	m.fee = &s
}

// Fee returns the value of the "fee" field in the mutation.
func (m *SpotTransferMutation) Fee() (r string, exists bool) {
	v := m.fee
	if v == nil {
		return
	}
	return *v, true
}

// OldFee returns the old "fee" field's value of the SpotTransfer entity.
// If the SpotTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpotTransferMutation) OldFee(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFee: %w", err)
	}
	return oldValue.Fee, nil
}

// ResetFee resets all changes to the "fee" field.
func (m *SpotTransferMutation) ResetFee() {
	m.fee = nil
}

// SetTime sets the "time" field.
func (m *SpotTransferMutation) SetTime(i int64) {
	m.time = &i
	m.addtime = nil
}

// Time returns the value of the "time" field in the mutation.
func (m *SpotTransferMutation) Time() (r int64, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the SpotTransfer entity.
// If the SpotTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpotTransferMutation) OldTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// AddTime adds i to the "time" field.
func (m *SpotTransferMutation) AddTime(i int64) {
	if m.addtime != nil {
		*m.addtime += i
	} else {
		m.addtime = &i
	}
}

// AddedTime returns the value that was added to the "time" field in this mutation.
func (m *SpotTransferMutation) AddedTime() (r int64, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime resets all changes to the "time" field.
func (m *SpotTransferMutation) ResetTime() {
	m.time = nil
	m.addtime = nil
}

// SetAddress sets the "address" field.
func (m *SpotTransferMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *SpotTransferMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the SpotTransfer entity.
// If the SpotTransfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpotTransferMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *SpotTransferMutation) ResetAddress() {
	m.address = nil
}

// Where appends a list predicates to the SpotTransferMutation builder.
func (m *SpotTransferMutation) Where(ps ...predicate.SpotTransfer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SpotTransferMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SpotTransferMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SpotTransfer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SpotTransferMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SpotTransferMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SpotTransfer).
func (m *SpotTransferMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SpotTransferMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.user != nil {
		fields = append(fields, spottransfer.FieldUser)
	}
	if m.destination != nil {
		fields = append(fields, spottransfer.FieldDestination)
	}
	if m.token != nil {
		fields = append(fields, spottransfer.FieldToken)
	}
	if m.amount != nil {
		fields = append(fields, spottransfer.FieldAmount)
	}
	if m.fee != nil {
		fields = append(fields, spottransfer.FieldFee)
	}
	if m.time != nil {
		fields = append(fields, spottransfer.FieldTime)
	}
	if m.address != nil {
		fields = append(fields, spottransfer.FieldAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SpotTransferMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case spottransfer.FieldUser:
		return m.User()
	case spottransfer.FieldDestination:
		return m.Destination()
	case spottransfer.FieldToken:
		return m.Token()
	case spottransfer.FieldAmount:
		return m.Amount()
	case spottransfer.FieldFee:
		return m.Fee()
	case spottransfer.FieldTime:
		return m.Time()
	case spottransfer.FieldAddress:
		return m.Address()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SpotTransferMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case spottransfer.FieldUser:
		return m.OldUser(ctx)
	case spottransfer.FieldDestination:
		return m.OldDestination(ctx)
	case spottransfer.FieldToken:
		return m.OldToken(ctx)
	case spottransfer.FieldAmount:
		return m.OldAmount(ctx)
	case spottransfer.FieldFee:
		return m.OldFee(ctx)
	case spottransfer.FieldTime:
		return m.OldTime(ctx)
	case spottransfer.FieldAddress:
		return m.OldAddress(ctx)
	}
	return nil, fmt.Errorf("unknown SpotTransfer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SpotTransferMutation) SetField(name string, value ent.Value) error {
	switch name {
	case spottransfer.FieldUser:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUser(v)
		return nil
	case spottransfer.FieldDestination:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDestination(v)
		return nil
	case spottransfer.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case spottransfer.FieldAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case spottransfer.FieldFee:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFee(v)
		return nil
	case spottransfer.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case spottransfer.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	}
	return fmt.Errorf("unknown SpotTransfer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SpotTransferMutation) AddedFields() []string {
	var fields []string
	if m.addtime != nil {
		fields = append(fields, spottransfer.FieldTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SpotTransferMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case spottransfer.FieldTime:
		return m.AddedTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SpotTransferMutation) AddField(name string, value ent.Value) error {
	switch name {
	case spottransfer.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTime(v)
		return nil
	}
	return fmt.Errorf("unknown SpotTransfer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SpotTransferMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SpotTransferMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SpotTransferMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SpotTransfer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SpotTransferMutation) ResetField(name string) error {
	switch name {
	case spottransfer.FieldUser:
		m.ResetUser()
		return nil
	case spottransfer.FieldDestination:
		m.ResetDestination()
		return nil
	case spottransfer.FieldToken:
		m.ResetToken()
		return nil
	case spottransfer.FieldAmount:
		m.ResetAmount()
		return nil
	case spottransfer.FieldFee:
		m.ResetFee()
		return nil
	case spottransfer.FieldTime:
		m.ResetTime()
		return nil
	case spottransfer.FieldAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown SpotTransfer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SpotTransferMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SpotTransferMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SpotTransferMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SpotTransferMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SpotTransferMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SpotTransferMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SpotTransferMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SpotTransfer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SpotTransferMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SpotTransfer edge %s", name)
}

// VaultDeltaMutation represents an operation that mutates the VaultDelta nodes in the graph.
type VaultDeltaMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_type         *string
	vault         *string
	usdc          *string
	time          *int64
	addtime       *int64
	address       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*VaultDelta, error)
	predicates    []predicate.VaultDelta
}

var _ ent.Mutation = (*VaultDeltaMutation)(nil)

// vaultdeltaOption allows management of the mutation configuration using functional options.
type vaultdeltaOption func(*VaultDeltaMutation)

// newVaultDeltaMutation creates new mutation for the VaultDelta entity.
func newVaultDeltaMutation(c config, op Op, opts ...vaultdeltaOption) *VaultDeltaMutation {
	m := &VaultDeltaMutation{
		config:        c,
		op:            op,
		typ:           TypeVaultDelta,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVaultDeltaID sets the ID field of the mutation.
func withVaultDeltaID(id int) vaultdeltaOption {
	return func(m *VaultDeltaMutation) {
		var (
			err   error
			once  sync.Once
			value *VaultDelta
		)
		m.oldValue = func(ctx context.Context) (*VaultDelta, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VaultDelta.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVaultDelta sets the old VaultDelta of the mutation.
func withVaultDelta(node *VaultDelta) vaultdeltaOption {
	return func(m *VaultDeltaMutation) {
		m.oldValue = func(context.Context) (*VaultDelta, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VaultDeltaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VaultDeltaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VaultDeltaMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VaultDeltaMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VaultDelta.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *VaultDeltaMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *VaultDeltaMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the VaultDelta entity.
// If the VaultDelta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VaultDeltaMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *VaultDeltaMutation) ResetType() {
	m._type = nil
}

// SetVault sets the "vault" field.
func (m *VaultDeltaMutation) SetVault(s string) {
	m.vault = &s
}

// Vault returns the value of the "vault" field in the mutation.
func (m *VaultDeltaMutation) Vault() (r string, exists bool) {
	v := m.vault
	if v == nil {
		return
	}
	return *v, true
}

// OldVault returns the old "vault" field's value of the VaultDelta entity.
// If the VaultDelta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VaultDeltaMutation) OldVault(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVault is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVault requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVault: %w", err)
	}
	return oldValue.Vault, nil
}

// ResetVault resets all changes to the "vault" field.
func (m *VaultDeltaMutation) ResetVault() {
	m.vault = nil
}

// SetUsdc sets the "usdc" field.
func (m *VaultDeltaMutation) SetUsdc(s string) {
	m.usdc = &s
}

// Usdc returns the value of the "usdc" field in the mutation.
func (m *VaultDeltaMutation) Usdc() (r string, exists bool) {
	v := m.usdc
	if v == nil {
		return
	}
	return *v, true
}

// OldUsdc returns the old "usdc" field's value of the VaultDelta entity.
// If the VaultDelta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VaultDeltaMutation) OldUsdc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsdc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsdc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsdc: %w", err)
	}
	return oldValue.Usdc, nil
}

// ResetUsdc resets all changes to the "usdc" field.
func (m *VaultDeltaMutation) ResetUsdc() {
	m.usdc = nil
}

// SetTime sets the "time" field.
func (m *VaultDeltaMutation) SetTime(i int64) {
	m.time = &i
	m.addtime = nil
}

// Time returns the value of the "time" field in the mutation.
func (m *VaultDeltaMutation) Time() (r int64, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the VaultDelta entity.
// If the VaultDelta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VaultDeltaMutation) OldTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// AddTime adds i to the "time" field.
func (m *VaultDeltaMutation) AddTime(i int64) {
	if m.addtime != nil {
		*m.addtime += i
	} else {
		m.addtime = &i
	}
}

// AddedTime returns the value that was added to the "time" field in this mutation.
func (m *VaultDeltaMutation) AddedTime() (r int64, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime resets all changes to the "time" field.
func (m *VaultDeltaMutation) ResetTime() {
	m.time = nil
	m.addtime = nil
}

// SetAddress sets the "address" field.
func (m *VaultDeltaMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *VaultDeltaMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the VaultDelta entity.
// If the VaultDelta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VaultDeltaMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *VaultDeltaMutation) ResetAddress() {
	m.address = nil
}

// Where appends a list predicates to the VaultDeltaMutation builder.
func (m *VaultDeltaMutation) Where(ps ...predicate.VaultDelta) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VaultDeltaMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VaultDeltaMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.VaultDelta, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VaultDeltaMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VaultDeltaMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (VaultDelta).
func (m *VaultDeltaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VaultDeltaMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m._type != nil {
		fields = append(fields, vaultdelta.FieldType)
	}
	if m.vault != nil {
		fields = append(fields, vaultdelta.FieldVault)
	}
	if m.usdc != nil {
		fields = append(fields, vaultdelta.FieldUsdc)
	}
	if m.time != nil {
		fields = append(fields, vaultdelta.FieldTime)
	}
	if m.address != nil {
		fields = append(fields, vaultdelta.FieldAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VaultDeltaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vaultdelta.FieldType:
		return m.GetType()
	case vaultdelta.FieldVault:
		return m.Vault()
	case vaultdelta.FieldUsdc:
		return m.Usdc()
	case vaultdelta.FieldTime:
		return m.Time()
	case vaultdelta.FieldAddress:
		return m.Address()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VaultDeltaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vaultdelta.FieldType:
		return m.OldType(ctx)
	case vaultdelta.FieldVault:
		return m.OldVault(ctx)
	case vaultdelta.FieldUsdc:
		return m.OldUsdc(ctx)
	case vaultdelta.FieldTime:
		return m.OldTime(ctx)
	case vaultdelta.FieldAddress:
		return m.OldAddress(ctx)
	}
	return nil, fmt.Errorf("unknown VaultDelta field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VaultDeltaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vaultdelta.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case vaultdelta.FieldVault:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVault(v)
		return nil
	case vaultdelta.FieldUsdc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsdc(v)
		return nil
	case vaultdelta.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case vaultdelta.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	}
	return fmt.Errorf("unknown VaultDelta field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VaultDeltaMutation) AddedFields() []string {
	var fields []string
	if m.addtime != nil {
		fields = append(fields, vaultdelta.FieldTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VaultDeltaMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case vaultdelta.FieldTime:
		return m.AddedTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VaultDeltaMutation) AddField(name string, value ent.Value) error {
	switch name {
	case vaultdelta.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTime(v)
		return nil
	}
	return fmt.Errorf("unknown VaultDelta numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VaultDeltaMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VaultDeltaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VaultDeltaMutation) ClearField(name string) error {
	return fmt.Errorf("unknown VaultDelta nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VaultDeltaMutation) ResetField(name string) error {
	switch name {
	case vaultdelta.FieldType:
		m.ResetType()
		return nil
	case vaultdelta.FieldVault:
		m.ResetVault()
		return nil
	case vaultdelta.FieldUsdc:
		m.ResetUsdc()
		return nil
	case vaultdelta.FieldTime:
		m.ResetTime()
		return nil
	case vaultdelta.FieldAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown VaultDelta field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VaultDeltaMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VaultDeltaMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VaultDeltaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VaultDeltaMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VaultDeltaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VaultDeltaMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VaultDeltaMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown VaultDelta unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VaultDeltaMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown VaultDelta edge %s", name)
}

// VaultLeaderCommissionMutation represents an operation that mutates the VaultLeaderCommission nodes in the graph.
type VaultLeaderCommissionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	user          *string
	usdc          *string
	time          *int64
	addtime       *int64
	address       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*VaultLeaderCommission, error)
	predicates    []predicate.VaultLeaderCommission
}

var _ ent.Mutation = (*VaultLeaderCommissionMutation)(nil)

// vaultleadercommissionOption allows management of the mutation configuration using functional options.
type vaultleadercommissionOption func(*VaultLeaderCommissionMutation)

// newVaultLeaderCommissionMutation creates new mutation for the VaultLeaderCommission entity.
func newVaultLeaderCommissionMutation(c config, op Op, opts ...vaultleadercommissionOption) *VaultLeaderCommissionMutation {
	m := &VaultLeaderCommissionMutation{
		config:        c,
		op:            op,
		typ:           TypeVaultLeaderCommission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVaultLeaderCommissionID sets the ID field of the mutation.
func withVaultLeaderCommissionID(id int) vaultleadercommissionOption {
	return func(m *VaultLeaderCommissionMutation) {
		var (
			err   error
			once  sync.Once
			value *VaultLeaderCommission
		)
		m.oldValue = func(ctx context.Context) (*VaultLeaderCommission, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VaultLeaderCommission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVaultLeaderCommission sets the old VaultLeaderCommission of the mutation.
func withVaultLeaderCommission(node *VaultLeaderCommission) vaultleadercommissionOption {
	return func(m *VaultLeaderCommissionMutation) {
		m.oldValue = func(context.Context) (*VaultLeaderCommission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VaultLeaderCommissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VaultLeaderCommissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VaultLeaderCommissionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VaultLeaderCommissionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VaultLeaderCommission.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUser sets the "user" field.
func (m *VaultLeaderCommissionMutation) SetUser(s string) {
	m.user = &s
}

// User returns the value of the "user" field in the mutation.
func (m *VaultLeaderCommissionMutation) User() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUser returns the old "user" field's value of the VaultLeaderCommission entity.
// If the VaultLeaderCommission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VaultLeaderCommissionMutation) OldUser(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUser: %w", err)
	}
	return oldValue.User, nil
}

// ResetUser resets all changes to the "user" field.
func (m *VaultLeaderCommissionMutation) ResetUser() {
	m.user = nil
}

// SetUsdc sets the "usdc" field.
func (m *VaultLeaderCommissionMutation) SetUsdc(s string) {
	m.usdc = &s
}

// Usdc returns the value of the "usdc" field in the mutation.
func (m *VaultLeaderCommissionMutation) Usdc() (r string, exists bool) {
	v := m.usdc
	if v == nil {
		return
	}
	return *v, true
}

// OldUsdc returns the old "usdc" field's value of the VaultLeaderCommission entity.
// If the VaultLeaderCommission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VaultLeaderCommissionMutation) OldUsdc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsdc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsdc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsdc: %w", err)
	}
	return oldValue.Usdc, nil
}

// ResetUsdc resets all changes to the "usdc" field.
func (m *VaultLeaderCommissionMutation) ResetUsdc() {
	m.usdc = nil
}

// SetTime sets the "time" field.
func (m *VaultLeaderCommissionMutation) SetTime(i int64) {
	m.time = &i
	m.addtime = nil
}

// Time returns the value of the "time" field in the mutation.
func (m *VaultLeaderCommissionMutation) Time() (r int64, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the VaultLeaderCommission entity.
// If the VaultLeaderCommission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VaultLeaderCommissionMutation) OldTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// AddTime adds i to the "time" field.
func (m *VaultLeaderCommissionMutation) AddTime(i int64) {
	if m.addtime != nil {
		*m.addtime += i
	} else {
		m.addtime = &i
	}
}

// AddedTime returns the value that was added to the "time" field in this mutation.
func (m *VaultLeaderCommissionMutation) AddedTime() (r int64, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime resets all changes to the "time" field.
func (m *VaultLeaderCommissionMutation) ResetTime() {
	m.time = nil
	m.addtime = nil
}

// SetAddress sets the "address" field.
func (m *VaultLeaderCommissionMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *VaultLeaderCommissionMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the VaultLeaderCommission entity.
// If the VaultLeaderCommission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VaultLeaderCommissionMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *VaultLeaderCommissionMutation) ResetAddress() {
	m.address = nil
}

// Where appends a list predicates to the VaultLeaderCommissionMutation builder.
func (m *VaultLeaderCommissionMutation) Where(ps ...predicate.VaultLeaderCommission) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VaultLeaderCommissionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VaultLeaderCommissionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.VaultLeaderCommission, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VaultLeaderCommissionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VaultLeaderCommissionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (VaultLeaderCommission).
func (m *VaultLeaderCommissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VaultLeaderCommissionMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.user != nil {
		fields = append(fields, vaultleadercommission.FieldUser)
	}
	if m.usdc != nil {
		fields = append(fields, vaultleadercommission.FieldUsdc)
	}
	if m.time != nil {
		fields = append(fields, vaultleadercommission.FieldTime)
	}
	if m.address != nil {
		fields = append(fields, vaultleadercommission.FieldAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VaultLeaderCommissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vaultleadercommission.FieldUser:
		return m.User()
	case vaultleadercommission.FieldUsdc:
		return m.Usdc()
	case vaultleadercommission.FieldTime:
		return m.Time()
	case vaultleadercommission.FieldAddress:
		return m.Address()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VaultLeaderCommissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vaultleadercommission.FieldUser:
		return m.OldUser(ctx)
	case vaultleadercommission.FieldUsdc:
		return m.OldUsdc(ctx)
	case vaultleadercommission.FieldTime:
		return m.OldTime(ctx)
	case vaultleadercommission.FieldAddress:
		return m.OldAddress(ctx)
	}
	return nil, fmt.Errorf("unknown VaultLeaderCommission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VaultLeaderCommissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vaultleadercommission.FieldUser:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUser(v)
		return nil
	case vaultleadercommission.FieldUsdc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsdc(v)
		return nil
	case vaultleadercommission.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case vaultleadercommission.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	}
	return fmt.Errorf("unknown VaultLeaderCommission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VaultLeaderCommissionMutation) AddedFields() []string {
	var fields []string
	if m.addtime != nil {
		fields = append(fields, vaultleadercommission.FieldTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VaultLeaderCommissionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case vaultleadercommission.FieldTime:
		return m.AddedTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VaultLeaderCommissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case vaultleadercommission.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTime(v)
		return nil
	}
	return fmt.Errorf("unknown VaultLeaderCommission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VaultLeaderCommissionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VaultLeaderCommissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VaultLeaderCommissionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown VaultLeaderCommission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VaultLeaderCommissionMutation) ResetField(name string) error {
	switch name {
	case vaultleadercommission.FieldUser:
		m.ResetUser()
		return nil
	case vaultleadercommission.FieldUsdc:
		m.ResetUsdc()
		return nil
	case vaultleadercommission.FieldTime:
		m.ResetTime()
		return nil
	case vaultleadercommission.FieldAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown VaultLeaderCommission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VaultLeaderCommissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VaultLeaderCommissionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VaultLeaderCommissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VaultLeaderCommissionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VaultLeaderCommissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VaultLeaderCommissionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VaultLeaderCommissionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown VaultLeaderCommission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VaultLeaderCommissionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown VaultLeaderCommission edge %s", name)
}

// VaultWithdrawalMutation represents an operation that mutates the VaultWithdrawal nodes in the graph.
type VaultWithdrawalMutation struct {
	config
	op                Op
	typ               string
	id                *int
	vault             *string
	user              *string
	requested_usd     *string
	commission        *string
	closing_cost      *string
	basis             *string
	net_withdrawn_usd *string
	time              *int64
	addtime           *int64
	address           *string
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*VaultWithdrawal, error)
	predicates        []predicate.VaultWithdrawal
}

var _ ent.Mutation = (*VaultWithdrawalMutation)(nil)

// vaultwithdrawalOption allows management of the mutation configuration using functional options.
type vaultwithdrawalOption func(*VaultWithdrawalMutation)

// newVaultWithdrawalMutation creates new mutation for the VaultWithdrawal entity.
func newVaultWithdrawalMutation(c config, op Op, opts ...vaultwithdrawalOption) *VaultWithdrawalMutation {
	m := &VaultWithdrawalMutation{
		config:        c,
		op:            op,
		typ:           TypeVaultWithdrawal,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVaultWithdrawalID sets the ID field of the mutation.
func withVaultWithdrawalID(id int) vaultwithdrawalOption {
	return func(m *VaultWithdrawalMutation) {
		var (
			err   error
			once  sync.Once
			value *VaultWithdrawal
		)
		m.oldValue = func(ctx context.Context) (*VaultWithdrawal, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VaultWithdrawal.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVaultWithdrawal sets the old VaultWithdrawal of the mutation.
func withVaultWithdrawal(node *VaultWithdrawal) vaultwithdrawalOption {
	return func(m *VaultWithdrawalMutation) {
		m.oldValue = func(context.Context) (*VaultWithdrawal, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VaultWithdrawalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VaultWithdrawalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VaultWithdrawalMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VaultWithdrawalMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VaultWithdrawal.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetVault sets the "vault" field.
func (m *VaultWithdrawalMutation) SetVault(s string) {
	m.vault = &s
}

// Vault returns the value of the "vault" field in the mutation.
func (m *VaultWithdrawalMutation) Vault() (r string, exists bool) {
	v := m.vault
	if v == nil {
		return
	}
	return *v, true
}

// OldVault returns the old "vault" field's value of the VaultWithdrawal entity.
// If the VaultWithdrawal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VaultWithdrawalMutation) OldVault(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVault is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVault requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVault: %w", err)
	}
	return oldValue.Vault, nil
}

// ResetVault resets all changes to the "vault" field.
func (m *VaultWithdrawalMutation) ResetVault() {
	m.vault = nil
}

// SetUser sets the "user" field.
func (m *VaultWithdrawalMutation) SetUser(s string) {
	m.user = &s
}

// User returns the value of the "user" field in the mutation.
func (m *VaultWithdrawalMutation) User() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUser returns the old "user" field's value of the VaultWithdrawal entity.
// If the VaultWithdrawal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VaultWithdrawalMutation) OldUser(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUser: %w", err)
	}
	return oldValue.User, nil
}

// ResetUser resets all changes to the "user" field.
func (m *VaultWithdrawalMutation) ResetUser() {
	m.user = nil
}

// SetRequestedUsd sets the "requested_usd" field.
func (m *VaultWithdrawalMutation) SetRequestedUsd(s string) {
	m.requested_usd = &s
}

// RequestedUsd returns the value of the "requested_usd" field in the mutation.
func (m *VaultWithdrawalMutation) RequestedUsd() (r string, exists bool) {
	v := m.requested_usd
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestedUsd returns the old "requested_usd" field's value of the VaultWithdrawal entity.
// If the VaultWithdrawal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VaultWithdrawalMutation) OldRequestedUsd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestedUsd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestedUsd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestedUsd: %w", err)
	}
	return oldValue.RequestedUsd, nil
}

// ResetRequestedUsd resets all changes to the "requested_usd" field.
func (m *VaultWithdrawalMutation) ResetRequestedUsd() {
	m.requested_usd = nil
}

// SetCommission sets the "commission" field.
func (m *VaultWithdrawalMutation) SetCommission(s string) {
	m.commission = &s
}

// Commission returns the value of the "commission" field in the mutation.
func (m *VaultWithdrawalMutation) Commission() (r string, exists bool) {
	v := m.commission
	if v == nil {
		return
	}
	return *v, true
}

// OldCommission returns the old "commission" field's value of the VaultWithdrawal entity.
// If the VaultWithdrawal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VaultWithdrawalMutation) OldCommission(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommission is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommission requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommission: %w", err)
	}
	return oldValue.Commission, nil
}

// ResetCommission resets all changes to the "commission" field.
func (m *VaultWithdrawalMutation) ResetCommission() {
	m.commission = nil
}

// SetClosingCost sets the "closing_cost" field.
func (m *VaultWithdrawalMutation) SetClosingCost(s string) {
	m.closing_cost = &s
}

// ClosingCost returns the value of the "closing_cost" field in the mutation.
func (m *VaultWithdrawalMutation) ClosingCost() (r string, exists bool) {
	v := m.closing_cost
	if v == nil {
		return
	}
	return *v, true
}

// OldClosingCost returns the old "closing_cost" field's value of the VaultWithdrawal entity.
// If the VaultWithdrawal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VaultWithdrawalMutation) OldClosingCost(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClosingCost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClosingCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClosingCost: %w", err)
	}
	return oldValue.ClosingCost, nil
}

// ResetClosingCost resets all changes to the "closing_cost" field.
func (m *VaultWithdrawalMutation) ResetClosingCost() {
	m.closing_cost = nil
}

// SetBasis sets the "basis" field.
func (m *VaultWithdrawalMutation) SetBasis(s string) {
	m.basis = &s
}

// Basis returns the value of the "basis" field in the mutation.
func (m *VaultWithdrawalMutation) Basis() (r string, exists bool) {
	v := m.basis
	if v == nil {
		return
	}
	return *v, true
}

// OldBasis returns the old "basis" field's value of the VaultWithdrawal entity.
// If the VaultWithdrawal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VaultWithdrawalMutation) OldBasis(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBasis is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBasis requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBasis: %w", err)
	}
	return oldValue.Basis, nil
}

// ResetBasis resets all changes to the "basis" field.
func (m *VaultWithdrawalMutation) ResetBasis() {
	m.basis = nil
}

// SetNetWithdrawnUsd sets the "net_withdrawn_usd" field.
func (m *VaultWithdrawalMutation) SetNetWithdrawnUsd(s string) {
	m.net_withdrawn_usd = &s
}

// NetWithdrawnUsd returns the value of the "net_withdrawn_usd" field in the mutation.
func (m *VaultWithdrawalMutation) NetWithdrawnUsd() (r string, exists bool) {
	v := m.net_withdrawn_usd
	if v == nil {
		return
	}
	return *v, true
}

// OldNetWithdrawnUsd returns the old "net_withdrawn_usd" field's value of the VaultWithdrawal entity.
// If the VaultWithdrawal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VaultWithdrawalMutation) OldNetWithdrawnUsd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNetWithdrawnUsd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNetWithdrawnUsd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNetWithdrawnUsd: %w", err)
	}
	return oldValue.NetWithdrawnUsd, nil
}

// ResetNetWithdrawnUsd resets all changes to the "net_withdrawn_usd" field.
func (m *VaultWithdrawalMutation) ResetNetWithdrawnUsd() {
	m.net_withdrawn_usd = nil
}

// SetTime sets the "time" field.
func (m *VaultWithdrawalMutation) SetTime(i int64) {
	m.time = &i
	m.addtime = nil
}

// Time returns the value of the "time" field in the mutation.
func (m *VaultWithdrawalMutation) Time() (r int64, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the VaultWithdrawal entity.
// If the VaultWithdrawal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VaultWithdrawalMutation) OldTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// AddTime adds i to the "time" field.
func (m *VaultWithdrawalMutation) AddTime(i int64) {
	if m.addtime != nil {
		*m.addtime += i
	} else {
		m.addtime = &i
	}
}

// AddedTime returns the value that was added to the "time" field in this mutation.
func (m *VaultWithdrawalMutation) AddedTime() (r int64, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime resets all changes to the "time" field.
func (m *VaultWithdrawalMutation) ResetTime() {
	m.time = nil
	m.addtime = nil
}

// SetAddress sets the "address" field.
func (m *VaultWithdrawalMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *VaultWithdrawalMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the VaultWithdrawal entity.
// If the VaultWithdrawal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VaultWithdrawalMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *VaultWithdrawalMutation) ResetAddress() {
	m.address = nil
}

// Where appends a list predicates to the VaultWithdrawalMutation builder.
func (m *VaultWithdrawalMutation) Where(ps ...predicate.VaultWithdrawal) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VaultWithdrawalMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VaultWithdrawalMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.VaultWithdrawal, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VaultWithdrawalMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VaultWithdrawalMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (VaultWithdrawal).
func (m *VaultWithdrawalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VaultWithdrawalMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.vault != nil {
		fields = append(fields, vaultwithdrawal.FieldVault)
	}
	if m.user != nil {
		fields = append(fields, vaultwithdrawal.FieldUser)
	}
	if m.requested_usd != nil {
		fields = append(fields, vaultwithdrawal.FieldRequestedUsd)
	}
	if m.commission != nil {
		fields = append(fields, vaultwithdrawal.FieldCommission)
	}
	if m.closing_cost != nil {
		fields = append(fields, vaultwithdrawal.FieldClosingCost)
	}
	if m.basis != nil {
		fields = append(fields, vaultwithdrawal.FieldBasis)
	}
	if m.net_withdrawn_usd != nil {
		fields = append(fields, vaultwithdrawal.FieldNetWithdrawnUsd)
	}
	if m.time != nil {
		fields = append(fields, vaultwithdrawal.FieldTime)
	}
	if m.address != nil {
		fields = append(fields, vaultwithdrawal.FieldAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VaultWithdrawalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vaultwithdrawal.FieldVault:
		return m.Vault()
	case vaultwithdrawal.FieldUser:
		return m.User()
	case vaultwithdrawal.FieldRequestedUsd:
		return m.RequestedUsd()
	case vaultwithdrawal.FieldCommission:
		return m.Commission()
	case vaultwithdrawal.FieldClosingCost:
		return m.ClosingCost()
	case vaultwithdrawal.FieldBasis:
		return m.Basis()
	case vaultwithdrawal.FieldNetWithdrawnUsd:
		return m.NetWithdrawnUsd()
	case vaultwithdrawal.FieldTime:
		return m.Time()
	case vaultwithdrawal.FieldAddress:
		return m.Address()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VaultWithdrawalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vaultwithdrawal.FieldVault:
		return m.OldVault(ctx)
	case vaultwithdrawal.FieldUser:
		return m.OldUser(ctx)
	case vaultwithdrawal.FieldRequestedUsd:
		return m.OldRequestedUsd(ctx)
	case vaultwithdrawal.FieldCommission:
		return m.OldCommission(ctx)
	case vaultwithdrawal.FieldClosingCost:
		return m.OldClosingCost(ctx)
	case vaultwithdrawal.FieldBasis:
		return m.OldBasis(ctx)
	case vaultwithdrawal.FieldNetWithdrawnUsd:
		return m.OldNetWithdrawnUsd(ctx)
	case vaultwithdrawal.FieldTime:
		return m.OldTime(ctx)
	case vaultwithdrawal.FieldAddress:
		return m.OldAddress(ctx)
	}
	return nil, fmt.Errorf("unknown VaultWithdrawal field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VaultWithdrawalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vaultwithdrawal.FieldVault:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVault(v)
		return nil
	case vaultwithdrawal.FieldUser:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUser(v)
		return nil
	case vaultwithdrawal.FieldRequestedUsd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestedUsd(v)
		return nil
	case vaultwithdrawal.FieldCommission:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommission(v)
		return nil
	case vaultwithdrawal.FieldClosingCost:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClosingCost(v)
		return nil
	case vaultwithdrawal.FieldBasis:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBasis(v)
		return nil
	case vaultwithdrawal.FieldNetWithdrawnUsd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNetWithdrawnUsd(v)
		return nil
	case vaultwithdrawal.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case vaultwithdrawal.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	}
	return fmt.Errorf("unknown VaultWithdrawal field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VaultWithdrawalMutation) AddedFields() []string {
	var fields []string
	if m.addtime != nil {
		fields = append(fields, vaultwithdrawal.FieldTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VaultWithdrawalMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case vaultwithdrawal.FieldTime:
		return m.AddedTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VaultWithdrawalMutation) AddField(name string, value ent.Value) error {
	switch name {
	case vaultwithdrawal.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTime(v)
		return nil
	}
	return fmt.Errorf("unknown VaultWithdrawal numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VaultWithdrawalMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VaultWithdrawalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VaultWithdrawalMutation) ClearField(name string) error {
	return fmt.Errorf("unknown VaultWithdrawal nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VaultWithdrawalMutation) ResetField(name string) error {
	switch name {
	case vaultwithdrawal.FieldVault:
		m.ResetVault()
		return nil
	case vaultwithdrawal.FieldUser:
		m.ResetUser()
		return nil
	case vaultwithdrawal.FieldRequestedUsd:
		m.ResetRequestedUsd()
		return nil
	case vaultwithdrawal.FieldCommission:
		m.ResetCommission()
		return nil
	case vaultwithdrawal.FieldClosingCost:
		m.ResetClosingCost()
		return nil
	case vaultwithdrawal.FieldBasis:
		m.ResetBasis()
		return nil
	case vaultwithdrawal.FieldNetWithdrawnUsd:
		m.ResetNetWithdrawnUsd()
		return nil
	case vaultwithdrawal.FieldTime:
		m.ResetTime()
		return nil
	case vaultwithdrawal.FieldAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown VaultWithdrawal field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VaultWithdrawalMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VaultWithdrawalMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VaultWithdrawalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VaultWithdrawalMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VaultWithdrawalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VaultWithdrawalMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VaultWithdrawalMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown VaultWithdrawal unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VaultWithdrawalMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown VaultWithdrawal edge %s", name)
}

// WithdrawMutation represents an operation that mutates the Withdraw nodes in the graph.
type WithdrawMutation struct {
	config
	op            Op
	typ           string
	id            *int
	usdc          *string
	nonce         *int64
	addnonce      *int64
	fee           *string
	time          *int64
	addtime       *int64
	address       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Withdraw, error)
	predicates    []predicate.Withdraw
}

var _ ent.Mutation = (*WithdrawMutation)(nil)

// withdrawOption allows management of the mutation configuration using functional options.
type withdrawOption func(*WithdrawMutation)

// newWithdrawMutation creates new mutation for the Withdraw entity.
func newWithdrawMutation(c config, op Op, opts ...withdrawOption) *WithdrawMutation {
	m := &WithdrawMutation{
		config:        c,
		op:            op,
		typ:           TypeWithdraw,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWithdrawID sets the ID field of the mutation.
func withWithdrawID(id int) withdrawOption {
	return func(m *WithdrawMutation) {
		var (
			err   error
			once  sync.Once
			value *Withdraw
		)
		m.oldValue = func(ctx context.Context) (*Withdraw, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Withdraw.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWithdraw sets the old Withdraw of the mutation.
func withWithdraw(node *Withdraw) withdrawOption {
	return func(m *WithdrawMutation) {
		m.oldValue = func(context.Context) (*Withdraw, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WithdrawMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WithdrawMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WithdrawMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WithdrawMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Withdraw.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsdc sets the "usdc" field.
func (m *WithdrawMutation) SetUsdc(s string) {
	m.usdc = &s
}

// Usdc returns the value of the "usdc" field in the mutation.
func (m *WithdrawMutation) Usdc() (r string, exists bool) {
	v := m.usdc
	if v == nil {
		return
	}
	return *v, true
}

// OldUsdc returns the old "usdc" field's value of the Withdraw entity.
// If the Withdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WithdrawMutation) OldUsdc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsdc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsdc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsdc: %w", err)
	}
	return oldValue.Usdc, nil
}

// ResetUsdc resets all changes to the "usdc" field.
func (m *WithdrawMutation) ResetUsdc() {
	m.usdc = nil
}

// SetNonce sets the "nonce" field.
func (m *WithdrawMutation) SetNonce(i int64) {
	m.nonce = &i
	m.addnonce = nil
}

// Nonce returns the value of the "nonce" field in the mutation.
func (m *WithdrawMutation) Nonce() (r int64, exists bool) {
	v := m.nonce
	if v == nil {
		return
	}
	return *v, true
}

// OldNonce returns the old "nonce" field's value of the Withdraw entity.
// If the Withdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WithdrawMutation) OldNonce(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNonce is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNonce requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNonce: %w", err)
	}
	return oldValue.Nonce, nil
}

// AddNonce adds i to the "nonce" field.
func (m *WithdrawMutation) AddNonce(i int64) {
	if m.addnonce != nil {
		*m.addnonce += i
	} else {
		m.addnonce = &i
	}
}

// AddedNonce returns the value that was added to the "nonce" field in this mutation.
func (m *WithdrawMutation) AddedNonce() (r int64, exists bool) {
	v := m.addnonce
	if v == nil {
		return
	}
	return *v, true
}

// ResetNonce resets all changes to the "nonce" field.
func (m *WithdrawMutation) ResetNonce() {
	m.nonce = nil
	m.addnonce = nil
}

// SetFee sets the "fee" field.
func (m *WithdrawMutation) SetFee(s string) {
	m.fee = &s
}

// Fee returns the value of the "fee" field in the mutation.
func (m *WithdrawMutation) Fee() (r string, exists bool) {
	v := m.fee
	if v == nil {
		return
	}
	return *v, true
}

// OldFee returns the old "fee" field's value of the Withdraw entity.
// If the Withdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WithdrawMutation) OldFee(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFee: %w", err)
	}
	return oldValue.Fee, nil
}

// ResetFee resets all changes to the "fee" field.
func (m *WithdrawMutation) ResetFee() {
	m.fee = nil
}

// SetTime sets the "time" field.
func (m *WithdrawMutation) SetTime(i int64) {
	m.time = &i
	m.addtime = nil
}

// Time returns the value of the "time" field in the mutation.
func (m *WithdrawMutation) Time() (r int64, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Withdraw entity.
// If the Withdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WithdrawMutation) OldTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// AddTime adds i to the "time" field.
func (m *WithdrawMutation) AddTime(i int64) {
	if m.addtime != nil {
		*m.addtime += i
	} else {
		m.addtime = &i
	}
}

// AddedTime returns the value that was added to the "time" field in this mutation.
func (m *WithdrawMutation) AddedTime() (r int64, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime resets all changes to the "time" field.
func (m *WithdrawMutation) ResetTime() {
	m.time = nil
	m.addtime = nil
}

// SetAddress sets the "address" field.
func (m *WithdrawMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *WithdrawMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Withdraw entity.
// If the Withdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WithdrawMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *WithdrawMutation) ResetAddress() {
	m.address = nil
}

// Where appends a list predicates to the WithdrawMutation builder.
func (m *WithdrawMutation) Where(ps ...predicate.Withdraw) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WithdrawMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WithdrawMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Withdraw, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WithdrawMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WithdrawMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Withdraw).
func (m *WithdrawMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WithdrawMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.usdc != nil {
		fields = append(fields, withdraw.FieldUsdc)
	}
	if m.nonce != nil {
		fields = append(fields, withdraw.FieldNonce)
	}
	if m.fee != nil {
		fields = append(fields, withdraw.FieldFee)
	}
	if m.time != nil {
		fields = append(fields, withdraw.FieldTime)
	}
	if m.address != nil {
		fields = append(fields, withdraw.FieldAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WithdrawMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case withdraw.FieldUsdc:
		return m.Usdc()
	case withdraw.FieldNonce:
		return m.Nonce()
	case withdraw.FieldFee:
		return m.Fee()
	case withdraw.FieldTime:
		return m.Time()
	case withdraw.FieldAddress:
		return m.Address()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WithdrawMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case withdraw.FieldUsdc:
		return m.OldUsdc(ctx)
	case withdraw.FieldNonce:
		return m.OldNonce(ctx)
	case withdraw.FieldFee:
		return m.OldFee(ctx)
	case withdraw.FieldTime:
		return m.OldTime(ctx)
	case withdraw.FieldAddress:
		return m.OldAddress(ctx)
	}
	return nil, fmt.Errorf("unknown Withdraw field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WithdrawMutation) SetField(name string, value ent.Value) error {
	switch name {
	case withdraw.FieldUsdc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsdc(v)
		return nil
	case withdraw.FieldNonce:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNonce(v)
		return nil
	case withdraw.FieldFee:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFee(v)
		return nil
	case withdraw.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case withdraw.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	}
	return fmt.Errorf("unknown Withdraw field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WithdrawMutation) AddedFields() []string {
	var fields []string
	if m.addnonce != nil {
		fields = append(fields, withdraw.FieldNonce)
	}
	if m.addtime != nil {
		fields = append(fields, withdraw.FieldTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WithdrawMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case withdraw.FieldNonce:
		return m.AddedNonce()
	case withdraw.FieldTime:
		return m.AddedTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WithdrawMutation) AddField(name string, value ent.Value) error {
	switch name {
	case withdraw.FieldNonce:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNonce(v)
		return nil
	case withdraw.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTime(v)
		return nil
	}
	return fmt.Errorf("unknown Withdraw numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WithdrawMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WithdrawMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WithdrawMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Withdraw nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WithdrawMutation) ResetField(name string) error {
	switch name {
	case withdraw.FieldUsdc:
		m.ResetUsdc()
		return nil
	case withdraw.FieldNonce:
		m.ResetNonce()
		return nil
	case withdraw.FieldFee:
		m.ResetFee()
		return nil
	case withdraw.FieldTime:
		m.ResetTime()
		return nil
	case withdraw.FieldAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown Withdraw field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WithdrawMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WithdrawMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WithdrawMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WithdrawMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WithdrawMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WithdrawMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WithdrawMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Withdraw unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WithdrawMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Withdraw edge %s", name)
}
