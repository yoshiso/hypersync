// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/rewardsclaim"
)

// RewardsClaimCreate is the builder for creating a RewardsClaim entity.
type RewardsClaimCreate struct {
	config
	mutation *RewardsClaimMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAmount sets the "amount" field.
func (rcc *RewardsClaimCreate) SetAmount(s string) *RewardsClaimCreate {
	rcc.mutation.SetAmount(s)
	return rcc
}

// SetTime sets the "time" field.
func (rcc *RewardsClaimCreate) SetTime(i int64) *RewardsClaimCreate {
	rcc.mutation.SetTime(i)
	return rcc
}

// SetAddress sets the "address" field.
func (rcc *RewardsClaimCreate) SetAddress(s string) *RewardsClaimCreate {
	rcc.mutation.SetAddress(s)
	return rcc
}

// Mutation returns the RewardsClaimMutation object of the builder.
func (rcc *RewardsClaimCreate) Mutation() *RewardsClaimMutation {
	return rcc.mutation
}

// Save creates the RewardsClaim in the database.
func (rcc *RewardsClaimCreate) Save(ctx context.Context) (*RewardsClaim, error) {
	return withHooks(ctx, rcc.sqlSave, rcc.mutation, rcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rcc *RewardsClaimCreate) SaveX(ctx context.Context) *RewardsClaim {
	v, err := rcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcc *RewardsClaimCreate) Exec(ctx context.Context) error {
	_, err := rcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcc *RewardsClaimCreate) ExecX(ctx context.Context) {
	if err := rcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcc *RewardsClaimCreate) check() error {
	if _, ok := rcc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "RewardsClaim.amount"`)}
	}
	if _, ok := rcc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "RewardsClaim.time"`)}
	}
	if _, ok := rcc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "RewardsClaim.address"`)}
	}
	return nil
}

func (rcc *RewardsClaimCreate) sqlSave(ctx context.Context) (*RewardsClaim, error) {
	if err := rcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rcc.mutation.id = &_node.ID
	rcc.mutation.done = true
	return _node, nil
}

func (rcc *RewardsClaimCreate) createSpec() (*RewardsClaim, *sqlgraph.CreateSpec) {
	var (
		_node = &RewardsClaim{config: rcc.config}
		_spec = sqlgraph.NewCreateSpec(rewardsclaim.Table, sqlgraph.NewFieldSpec(rewardsclaim.FieldID, field.TypeInt))
	)
	_spec.OnConflict = rcc.conflict
	if value, ok := rcc.mutation.Amount(); ok {
		_spec.SetField(rewardsclaim.FieldAmount, field.TypeString, value)
		_node.Amount = value
	}
	if value, ok := rcc.mutation.Time(); ok {
		_spec.SetField(rewardsclaim.FieldTime, field.TypeInt64, value)
		_node.Time = value
	}
	if value, ok := rcc.mutation.Address(); ok {
		_spec.SetField(rewardsclaim.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RewardsClaim.Create().
//		SetAmount(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RewardsClaimUpsert) {
//			SetAmount(v+v).
//		}).
//		Exec(ctx)
func (rcc *RewardsClaimCreate) OnConflict(opts ...sql.ConflictOption) *RewardsClaimUpsertOne {
	rcc.conflict = opts
	return &RewardsClaimUpsertOne{
		create: rcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RewardsClaim.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcc *RewardsClaimCreate) OnConflictColumns(columns ...string) *RewardsClaimUpsertOne {
	rcc.conflict = append(rcc.conflict, sql.ConflictColumns(columns...))
	return &RewardsClaimUpsertOne{
		create: rcc,
	}
}

type (
	// RewardsClaimUpsertOne is the builder for "upsert"-ing
	//  one RewardsClaim node.
	RewardsClaimUpsertOne struct {
		create *RewardsClaimCreate
	}

	// RewardsClaimUpsert is the "OnConflict" setter.
	RewardsClaimUpsert struct {
		*sql.UpdateSet
	}
)

// SetAmount sets the "amount" field.
func (u *RewardsClaimUpsert) SetAmount(v string) *RewardsClaimUpsert {
	u.Set(rewardsclaim.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *RewardsClaimUpsert) UpdateAmount() *RewardsClaimUpsert {
	u.SetExcluded(rewardsclaim.FieldAmount)
	return u
}

// SetTime sets the "time" field.
func (u *RewardsClaimUpsert) SetTime(v int64) *RewardsClaimUpsert {
	u.Set(rewardsclaim.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *RewardsClaimUpsert) UpdateTime() *RewardsClaimUpsert {
	u.SetExcluded(rewardsclaim.FieldTime)
	return u
}

// AddTime adds v to the "time" field.
func (u *RewardsClaimUpsert) AddTime(v int64) *RewardsClaimUpsert {
	u.Add(rewardsclaim.FieldTime, v)
	return u
}

// SetAddress sets the "address" field.
func (u *RewardsClaimUpsert) SetAddress(v string) *RewardsClaimUpsert {
	u.Set(rewardsclaim.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *RewardsClaimUpsert) UpdateAddress() *RewardsClaimUpsert {
	u.SetExcluded(rewardsclaim.FieldAddress)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.RewardsClaim.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RewardsClaimUpsertOne) UpdateNewValues() *RewardsClaimUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RewardsClaim.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RewardsClaimUpsertOne) Ignore() *RewardsClaimUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RewardsClaimUpsertOne) DoNothing() *RewardsClaimUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RewardsClaimCreate.OnConflict
// documentation for more info.
func (u *RewardsClaimUpsertOne) Update(set func(*RewardsClaimUpsert)) *RewardsClaimUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RewardsClaimUpsert{UpdateSet: update})
	}))
	return u
}

// SetAmount sets the "amount" field.
func (u *RewardsClaimUpsertOne) SetAmount(v string) *RewardsClaimUpsertOne {
	return u.Update(func(s *RewardsClaimUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *RewardsClaimUpsertOne) UpdateAmount() *RewardsClaimUpsertOne {
	return u.Update(func(s *RewardsClaimUpsert) {
		s.UpdateAmount()
	})
}

// SetTime sets the "time" field.
func (u *RewardsClaimUpsertOne) SetTime(v int64) *RewardsClaimUpsertOne {
	return u.Update(func(s *RewardsClaimUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *RewardsClaimUpsertOne) AddTime(v int64) *RewardsClaimUpsertOne {
	return u.Update(func(s *RewardsClaimUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *RewardsClaimUpsertOne) UpdateTime() *RewardsClaimUpsertOne {
	return u.Update(func(s *RewardsClaimUpsert) {
		s.UpdateTime()
	})
}

// SetAddress sets the "address" field.
func (u *RewardsClaimUpsertOne) SetAddress(v string) *RewardsClaimUpsertOne {
	return u.Update(func(s *RewardsClaimUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *RewardsClaimUpsertOne) UpdateAddress() *RewardsClaimUpsertOne {
	return u.Update(func(s *RewardsClaimUpsert) {
		s.UpdateAddress()
	})
}

// Exec executes the query.
func (u *RewardsClaimUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RewardsClaimCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RewardsClaimUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RewardsClaimUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RewardsClaimUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RewardsClaimCreateBulk is the builder for creating many RewardsClaim entities in bulk.
type RewardsClaimCreateBulk struct {
	config
	err      error
	builders []*RewardsClaimCreate
	conflict []sql.ConflictOption
}

// Save creates the RewardsClaim entities in the database.
func (rccb *RewardsClaimCreateBulk) Save(ctx context.Context) ([]*RewardsClaim, error) {
	if rccb.err != nil {
		return nil, rccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rccb.builders))
	nodes := make([]*RewardsClaim, len(rccb.builders))
	mutators := make([]Mutator, len(rccb.builders))
	for i := range rccb.builders {
		func(i int, root context.Context) {
			builder := rccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RewardsClaimMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rccb *RewardsClaimCreateBulk) SaveX(ctx context.Context) []*RewardsClaim {
	v, err := rccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rccb *RewardsClaimCreateBulk) Exec(ctx context.Context) error {
	_, err := rccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rccb *RewardsClaimCreateBulk) ExecX(ctx context.Context) {
	if err := rccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RewardsClaim.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RewardsClaimUpsert) {
//			SetAmount(v+v).
//		}).
//		Exec(ctx)
func (rccb *RewardsClaimCreateBulk) OnConflict(opts ...sql.ConflictOption) *RewardsClaimUpsertBulk {
	rccb.conflict = opts
	return &RewardsClaimUpsertBulk{
		create: rccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RewardsClaim.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rccb *RewardsClaimCreateBulk) OnConflictColumns(columns ...string) *RewardsClaimUpsertBulk {
	rccb.conflict = append(rccb.conflict, sql.ConflictColumns(columns...))
	return &RewardsClaimUpsertBulk{
		create: rccb,
	}
}

// RewardsClaimUpsertBulk is the builder for "upsert"-ing
// a bulk of RewardsClaim nodes.
type RewardsClaimUpsertBulk struct {
	create *RewardsClaimCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RewardsClaim.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RewardsClaimUpsertBulk) UpdateNewValues() *RewardsClaimUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RewardsClaim.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RewardsClaimUpsertBulk) Ignore() *RewardsClaimUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RewardsClaimUpsertBulk) DoNothing() *RewardsClaimUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RewardsClaimCreateBulk.OnConflict
// documentation for more info.
func (u *RewardsClaimUpsertBulk) Update(set func(*RewardsClaimUpsert)) *RewardsClaimUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RewardsClaimUpsert{UpdateSet: update})
	}))
	return u
}

// SetAmount sets the "amount" field.
func (u *RewardsClaimUpsertBulk) SetAmount(v string) *RewardsClaimUpsertBulk {
	return u.Update(func(s *RewardsClaimUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *RewardsClaimUpsertBulk) UpdateAmount() *RewardsClaimUpsertBulk {
	return u.Update(func(s *RewardsClaimUpsert) {
		s.UpdateAmount()
	})
}

// SetTime sets the "time" field.
func (u *RewardsClaimUpsertBulk) SetTime(v int64) *RewardsClaimUpsertBulk {
	return u.Update(func(s *RewardsClaimUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *RewardsClaimUpsertBulk) AddTime(v int64) *RewardsClaimUpsertBulk {
	return u.Update(func(s *RewardsClaimUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *RewardsClaimUpsertBulk) UpdateTime() *RewardsClaimUpsertBulk {
	return u.Update(func(s *RewardsClaimUpsert) {
		s.UpdateTime()
	})
}

// SetAddress sets the "address" field.
func (u *RewardsClaimUpsertBulk) SetAddress(v string) *RewardsClaimUpsertBulk {
	return u.Update(func(s *RewardsClaimUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *RewardsClaimUpsertBulk) UpdateAddress() *RewardsClaimUpsertBulk {
	return u.Update(func(s *RewardsClaimUpsert) {
		s.UpdateAddress()
	})
}

// Exec executes the query.
func (u *RewardsClaimUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RewardsClaimCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RewardsClaimCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RewardsClaimUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
