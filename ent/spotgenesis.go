// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yoshiso/hypersync/ent/spotgenesis"
)

// SpotGenesis is the model entity for the SpotGenesis schema.
type SpotGenesis struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Coin holds the value of the "coin" field.
	Coin string `json:"coin,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount string `json:"amount,omitempty"`
	// Time holds the value of the "time" field.
	Time int64 `json:"time,omitempty"`
	// Address holds the value of the "address" field.
	Address      string `json:"address,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SpotGenesis) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case spotgenesis.FieldID, spotgenesis.FieldTime:
			values[i] = new(sql.NullInt64)
		case spotgenesis.FieldCoin, spotgenesis.FieldAmount, spotgenesis.FieldAddress:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SpotGenesis fields.
func (sg *SpotGenesis) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case spotgenesis.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sg.ID = int(value.Int64)
		case spotgenesis.FieldCoin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field coin", values[i])
			} else if value.Valid {
				sg.Coin = value.String
			}
		case spotgenesis.FieldAmount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				sg.Amount = value.String
			}
		case spotgenesis.FieldTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				sg.Time = value.Int64
			}
		case spotgenesis.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				sg.Address = value.String
			}
		default:
			sg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SpotGenesis.
// This includes values selected through modifiers, order, etc.
func (sg *SpotGenesis) Value(name string) (ent.Value, error) {
	return sg.selectValues.Get(name)
}

// Update returns a builder for updating this SpotGenesis.
// Note that you need to call SpotGenesis.Unwrap() before calling this method if this SpotGenesis
// was returned from a transaction, and the transaction was committed or rolled back.
func (sg *SpotGenesis) Update() *SpotGenesisUpdateOne {
	return NewSpotGenesisClient(sg.config).UpdateOne(sg)
}

// Unwrap unwraps the SpotGenesis entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sg *SpotGenesis) Unwrap() *SpotGenesis {
	_tx, ok := sg.config.driver.(*txDriver)
	if !ok {
		panic("ent: SpotGenesis is not a transactional entity")
	}
	sg.config.driver = _tx.drv
	return sg
}

// String implements the fmt.Stringer.
func (sg *SpotGenesis) String() string {
	var builder strings.Builder
	builder.WriteString("SpotGenesis(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sg.ID))
	builder.WriteString("coin=")
	builder.WriteString(sg.Coin)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(sg.Amount)
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(fmt.Sprintf("%v", sg.Time))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(sg.Address)
	builder.WriteByte(')')
	return builder.String()
}

// SpotGeneses is a parsable slice of SpotGenesis.
type SpotGeneses []*SpotGenesis
