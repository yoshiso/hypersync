// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/spotgenesis"
)

// SpotGenesisCreate is the builder for creating a SpotGenesis entity.
type SpotGenesisCreate struct {
	config
	mutation *SpotGenesisMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCoin sets the "coin" field.
func (sgc *SpotGenesisCreate) SetCoin(s string) *SpotGenesisCreate {
	sgc.mutation.SetCoin(s)
	return sgc
}

// SetAmount sets the "amount" field.
func (sgc *SpotGenesisCreate) SetAmount(s string) *SpotGenesisCreate {
	sgc.mutation.SetAmount(s)
	return sgc
}

// SetTime sets the "time" field.
func (sgc *SpotGenesisCreate) SetTime(i int64) *SpotGenesisCreate {
	sgc.mutation.SetTime(i)
	return sgc
}

// SetAddress sets the "address" field.
func (sgc *SpotGenesisCreate) SetAddress(s string) *SpotGenesisCreate {
	sgc.mutation.SetAddress(s)
	return sgc
}

// Mutation returns the SpotGenesisMutation object of the builder.
func (sgc *SpotGenesisCreate) Mutation() *SpotGenesisMutation {
	return sgc.mutation
}

// Save creates the SpotGenesis in the database.
func (sgc *SpotGenesisCreate) Save(ctx context.Context) (*SpotGenesis, error) {
	return withHooks(ctx, sgc.sqlSave, sgc.mutation, sgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sgc *SpotGenesisCreate) SaveX(ctx context.Context) *SpotGenesis {
	v, err := sgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sgc *SpotGenesisCreate) Exec(ctx context.Context) error {
	_, err := sgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgc *SpotGenesisCreate) ExecX(ctx context.Context) {
	if err := sgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sgc *SpotGenesisCreate) check() error {
	if _, ok := sgc.mutation.Coin(); !ok {
		return &ValidationError{Name: "coin", err: errors.New(`ent: missing required field "SpotGenesis.coin"`)}
	}
	if _, ok := sgc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "SpotGenesis.amount"`)}
	}
	if _, ok := sgc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "SpotGenesis.time"`)}
	}
	if _, ok := sgc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "SpotGenesis.address"`)}
	}
	return nil
}

func (sgc *SpotGenesisCreate) sqlSave(ctx context.Context) (*SpotGenesis, error) {
	if err := sgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sgc.mutation.id = &_node.ID
	sgc.mutation.done = true
	return _node, nil
}

func (sgc *SpotGenesisCreate) createSpec() (*SpotGenesis, *sqlgraph.CreateSpec) {
	var (
		_node = &SpotGenesis{config: sgc.config}
		_spec = sqlgraph.NewCreateSpec(spotgenesis.Table, sqlgraph.NewFieldSpec(spotgenesis.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sgc.conflict
	if value, ok := sgc.mutation.Coin(); ok {
		_spec.SetField(spotgenesis.FieldCoin, field.TypeString, value)
		_node.Coin = value
	}
	if value, ok := sgc.mutation.Amount(); ok {
		_spec.SetField(spotgenesis.FieldAmount, field.TypeString, value)
		_node.Amount = value
	}
	if value, ok := sgc.mutation.Time(); ok {
		_spec.SetField(spotgenesis.FieldTime, field.TypeInt64, value)
		_node.Time = value
	}
	if value, ok := sgc.mutation.Address(); ok {
		_spec.SetField(spotgenesis.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SpotGenesis.Create().
//		SetCoin(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SpotGenesisUpsert) {
//			SetCoin(v+v).
//		}).
//		Exec(ctx)
func (sgc *SpotGenesisCreate) OnConflict(opts ...sql.ConflictOption) *SpotGenesisUpsertOne {
	sgc.conflict = opts
	return &SpotGenesisUpsertOne{
		create: sgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SpotGenesis.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sgc *SpotGenesisCreate) OnConflictColumns(columns ...string) *SpotGenesisUpsertOne {
	sgc.conflict = append(sgc.conflict, sql.ConflictColumns(columns...))
	return &SpotGenesisUpsertOne{
		create: sgc,
	}
}

type (
	// SpotGenesisUpsertOne is the builder for "upsert"-ing
	//  one SpotGenesis node.
	SpotGenesisUpsertOne struct {
		create *SpotGenesisCreate
	}

	// SpotGenesisUpsert is the "OnConflict" setter.
	SpotGenesisUpsert struct {
		*sql.UpdateSet
	}
)

// SetCoin sets the "coin" field.
func (u *SpotGenesisUpsert) SetCoin(v string) *SpotGenesisUpsert {
	u.Set(spotgenesis.FieldCoin, v)
	return u
}

// UpdateCoin sets the "coin" field to the value that was provided on create.
func (u *SpotGenesisUpsert) UpdateCoin() *SpotGenesisUpsert {
	u.SetExcluded(spotgenesis.FieldCoin)
	return u
}

// SetAmount sets the "amount" field.
func (u *SpotGenesisUpsert) SetAmount(v string) *SpotGenesisUpsert {
	u.Set(spotgenesis.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *SpotGenesisUpsert) UpdateAmount() *SpotGenesisUpsert {
	u.SetExcluded(spotgenesis.FieldAmount)
	return u
}

// SetTime sets the "time" field.
func (u *SpotGenesisUpsert) SetTime(v int64) *SpotGenesisUpsert {
	u.Set(spotgenesis.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *SpotGenesisUpsert) UpdateTime() *SpotGenesisUpsert {
	u.SetExcluded(spotgenesis.FieldTime)
	return u
}

// AddTime adds v to the "time" field.
func (u *SpotGenesisUpsert) AddTime(v int64) *SpotGenesisUpsert {
	u.Add(spotgenesis.FieldTime, v)
	return u
}

// SetAddress sets the "address" field.
func (u *SpotGenesisUpsert) SetAddress(v string) *SpotGenesisUpsert {
	u.Set(spotgenesis.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *SpotGenesisUpsert) UpdateAddress() *SpotGenesisUpsert {
	u.SetExcluded(spotgenesis.FieldAddress)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SpotGenesis.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SpotGenesisUpsertOne) UpdateNewValues() *SpotGenesisUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SpotGenesis.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SpotGenesisUpsertOne) Ignore() *SpotGenesisUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SpotGenesisUpsertOne) DoNothing() *SpotGenesisUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SpotGenesisCreate.OnConflict
// documentation for more info.
func (u *SpotGenesisUpsertOne) Update(set func(*SpotGenesisUpsert)) *SpotGenesisUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SpotGenesisUpsert{UpdateSet: update})
	}))
	return u
}

// SetCoin sets the "coin" field.
func (u *SpotGenesisUpsertOne) SetCoin(v string) *SpotGenesisUpsertOne {
	return u.Update(func(s *SpotGenesisUpsert) {
		s.SetCoin(v)
	})
}

// UpdateCoin sets the "coin" field to the value that was provided on create.
func (u *SpotGenesisUpsertOne) UpdateCoin() *SpotGenesisUpsertOne {
	return u.Update(func(s *SpotGenesisUpsert) {
		s.UpdateCoin()
	})
}

// SetAmount sets the "amount" field.
func (u *SpotGenesisUpsertOne) SetAmount(v string) *SpotGenesisUpsertOne {
	return u.Update(func(s *SpotGenesisUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *SpotGenesisUpsertOne) UpdateAmount() *SpotGenesisUpsertOne {
	return u.Update(func(s *SpotGenesisUpsert) {
		s.UpdateAmount()
	})
}

// SetTime sets the "time" field.
func (u *SpotGenesisUpsertOne) SetTime(v int64) *SpotGenesisUpsertOne {
	return u.Update(func(s *SpotGenesisUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *SpotGenesisUpsertOne) AddTime(v int64) *SpotGenesisUpsertOne {
	return u.Update(func(s *SpotGenesisUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *SpotGenesisUpsertOne) UpdateTime() *SpotGenesisUpsertOne {
	return u.Update(func(s *SpotGenesisUpsert) {
		s.UpdateTime()
	})
}

// SetAddress sets the "address" field.
func (u *SpotGenesisUpsertOne) SetAddress(v string) *SpotGenesisUpsertOne {
	return u.Update(func(s *SpotGenesisUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *SpotGenesisUpsertOne) UpdateAddress() *SpotGenesisUpsertOne {
	return u.Update(func(s *SpotGenesisUpsert) {
		s.UpdateAddress()
	})
}

// Exec executes the query.
func (u *SpotGenesisUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SpotGenesisCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SpotGenesisUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SpotGenesisUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SpotGenesisUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SpotGenesisCreateBulk is the builder for creating many SpotGenesis entities in bulk.
type SpotGenesisCreateBulk struct {
	config
	err      error
	builders []*SpotGenesisCreate
	conflict []sql.ConflictOption
}

// Save creates the SpotGenesis entities in the database.
func (sgcb *SpotGenesisCreateBulk) Save(ctx context.Context) ([]*SpotGenesis, error) {
	if sgcb.err != nil {
		return nil, sgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sgcb.builders))
	nodes := make([]*SpotGenesis, len(sgcb.builders))
	mutators := make([]Mutator, len(sgcb.builders))
	for i := range sgcb.builders {
		func(i int, root context.Context) {
			builder := sgcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SpotGenesisMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sgcb *SpotGenesisCreateBulk) SaveX(ctx context.Context) []*SpotGenesis {
	v, err := sgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sgcb *SpotGenesisCreateBulk) Exec(ctx context.Context) error {
	_, err := sgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgcb *SpotGenesisCreateBulk) ExecX(ctx context.Context) {
	if err := sgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SpotGenesis.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SpotGenesisUpsert) {
//			SetCoin(v+v).
//		}).
//		Exec(ctx)
func (sgcb *SpotGenesisCreateBulk) OnConflict(opts ...sql.ConflictOption) *SpotGenesisUpsertBulk {
	sgcb.conflict = opts
	return &SpotGenesisUpsertBulk{
		create: sgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SpotGenesis.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sgcb *SpotGenesisCreateBulk) OnConflictColumns(columns ...string) *SpotGenesisUpsertBulk {
	sgcb.conflict = append(sgcb.conflict, sql.ConflictColumns(columns...))
	return &SpotGenesisUpsertBulk{
		create: sgcb,
	}
}

// SpotGenesisUpsertBulk is the builder for "upsert"-ing
// a bulk of SpotGenesis nodes.
type SpotGenesisUpsertBulk struct {
	create *SpotGenesisCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SpotGenesis.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SpotGenesisUpsertBulk) UpdateNewValues() *SpotGenesisUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SpotGenesis.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SpotGenesisUpsertBulk) Ignore() *SpotGenesisUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SpotGenesisUpsertBulk) DoNothing() *SpotGenesisUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SpotGenesisCreateBulk.OnConflict
// documentation for more info.
func (u *SpotGenesisUpsertBulk) Update(set func(*SpotGenesisUpsert)) *SpotGenesisUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SpotGenesisUpsert{UpdateSet: update})
	}))
	return u
}

// SetCoin sets the "coin" field.
func (u *SpotGenesisUpsertBulk) SetCoin(v string) *SpotGenesisUpsertBulk {
	return u.Update(func(s *SpotGenesisUpsert) {
		s.SetCoin(v)
	})
}

// UpdateCoin sets the "coin" field to the value that was provided on create.
func (u *SpotGenesisUpsertBulk) UpdateCoin() *SpotGenesisUpsertBulk {
	return u.Update(func(s *SpotGenesisUpsert) {
		s.UpdateCoin()
	})
}

// SetAmount sets the "amount" field.
func (u *SpotGenesisUpsertBulk) SetAmount(v string) *SpotGenesisUpsertBulk {
	return u.Update(func(s *SpotGenesisUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *SpotGenesisUpsertBulk) UpdateAmount() *SpotGenesisUpsertBulk {
	return u.Update(func(s *SpotGenesisUpsert) {
		s.UpdateAmount()
	})
}

// SetTime sets the "time" field.
func (u *SpotGenesisUpsertBulk) SetTime(v int64) *SpotGenesisUpsertBulk {
	return u.Update(func(s *SpotGenesisUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *SpotGenesisUpsertBulk) AddTime(v int64) *SpotGenesisUpsertBulk {
	return u.Update(func(s *SpotGenesisUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *SpotGenesisUpsertBulk) UpdateTime() *SpotGenesisUpsertBulk {
	return u.Update(func(s *SpotGenesisUpsert) {
		s.UpdateTime()
	})
}

// SetAddress sets the "address" field.
func (u *SpotGenesisUpsertBulk) SetAddress(v string) *SpotGenesisUpsertBulk {
	return u.Update(func(s *SpotGenesisUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *SpotGenesisUpsertBulk) UpdateAddress() *SpotGenesisUpsertBulk {
	return u.Update(func(s *SpotGenesisUpsert) {
		s.UpdateAddress()
	})
}

// Exec executes the query.
func (u *SpotGenesisUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SpotGenesisCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SpotGenesisCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SpotGenesisUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
