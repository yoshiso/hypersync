// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/predicate"
	"github.com/yoshiso/hypersync/ent/spotgenesis"
)

// SpotGenesisUpdate is the builder for updating SpotGenesis entities.
type SpotGenesisUpdate struct {
	config
	hooks    []Hook
	mutation *SpotGenesisMutation
}

// Where appends a list predicates to the SpotGenesisUpdate builder.
func (sgu *SpotGenesisUpdate) Where(ps ...predicate.SpotGenesis) *SpotGenesisUpdate {
	sgu.mutation.Where(ps...)
	return sgu
}

// SetCoin sets the "coin" field.
func (sgu *SpotGenesisUpdate) SetCoin(s string) *SpotGenesisUpdate {
	sgu.mutation.SetCoin(s)
	return sgu
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (sgu *SpotGenesisUpdate) SetNillableCoin(s *string) *SpotGenesisUpdate {
	if s != nil {
		sgu.SetCoin(*s)
	}
	return sgu
}

// SetAmount sets the "amount" field.
func (sgu *SpotGenesisUpdate) SetAmount(s string) *SpotGenesisUpdate {
	sgu.mutation.SetAmount(s)
	return sgu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (sgu *SpotGenesisUpdate) SetNillableAmount(s *string) *SpotGenesisUpdate {
	if s != nil {
		sgu.SetAmount(*s)
	}
	return sgu
}

// SetTime sets the "time" field.
func (sgu *SpotGenesisUpdate) SetTime(i int64) *SpotGenesisUpdate {
	sgu.mutation.ResetTime()
	sgu.mutation.SetTime(i)
	return sgu
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (sgu *SpotGenesisUpdate) SetNillableTime(i *int64) *SpotGenesisUpdate {
	if i != nil {
		sgu.SetTime(*i)
	}
	return sgu
}

// AddTime adds i to the "time" field.
func (sgu *SpotGenesisUpdate) AddTime(i int64) *SpotGenesisUpdate {
	sgu.mutation.AddTime(i)
	return sgu
}

// SetAddress sets the "address" field.
func (sgu *SpotGenesisUpdate) SetAddress(s string) *SpotGenesisUpdate {
	sgu.mutation.SetAddress(s)
	return sgu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (sgu *SpotGenesisUpdate) SetNillableAddress(s *string) *SpotGenesisUpdate {
	if s != nil {
		sgu.SetAddress(*s)
	}
	return sgu
}

// Mutation returns the SpotGenesisMutation object of the builder.
func (sgu *SpotGenesisUpdate) Mutation() *SpotGenesisMutation {
	return sgu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sgu *SpotGenesisUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sgu.sqlSave, sgu.mutation, sgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sgu *SpotGenesisUpdate) SaveX(ctx context.Context) int {
	affected, err := sgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sgu *SpotGenesisUpdate) Exec(ctx context.Context) error {
	_, err := sgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgu *SpotGenesisUpdate) ExecX(ctx context.Context) {
	if err := sgu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sgu *SpotGenesisUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(spotgenesis.Table, spotgenesis.Columns, sqlgraph.NewFieldSpec(spotgenesis.FieldID, field.TypeInt))
	if ps := sgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgu.mutation.Coin(); ok {
		_spec.SetField(spotgenesis.FieldCoin, field.TypeString, value)
	}
	if value, ok := sgu.mutation.Amount(); ok {
		_spec.SetField(spotgenesis.FieldAmount, field.TypeString, value)
	}
	if value, ok := sgu.mutation.Time(); ok {
		_spec.SetField(spotgenesis.FieldTime, field.TypeInt64, value)
	}
	if value, ok := sgu.mutation.AddedTime(); ok {
		_spec.AddField(spotgenesis.FieldTime, field.TypeInt64, value)
	}
	if value, ok := sgu.mutation.Address(); ok {
		_spec.SetField(spotgenesis.FieldAddress, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spotgenesis.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sgu.mutation.done = true
	return n, nil
}

// SpotGenesisUpdateOne is the builder for updating a single SpotGenesis entity.
type SpotGenesisUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpotGenesisMutation
}

// SetCoin sets the "coin" field.
func (sguo *SpotGenesisUpdateOne) SetCoin(s string) *SpotGenesisUpdateOne {
	sguo.mutation.SetCoin(s)
	return sguo
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (sguo *SpotGenesisUpdateOne) SetNillableCoin(s *string) *SpotGenesisUpdateOne {
	if s != nil {
		sguo.SetCoin(*s)
	}
	return sguo
}

// SetAmount sets the "amount" field.
func (sguo *SpotGenesisUpdateOne) SetAmount(s string) *SpotGenesisUpdateOne {
	sguo.mutation.SetAmount(s)
	return sguo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (sguo *SpotGenesisUpdateOne) SetNillableAmount(s *string) *SpotGenesisUpdateOne {
	if s != nil {
		sguo.SetAmount(*s)
	}
	return sguo
}

// SetTime sets the "time" field.
func (sguo *SpotGenesisUpdateOne) SetTime(i int64) *SpotGenesisUpdateOne {
	sguo.mutation.ResetTime()
	sguo.mutation.SetTime(i)
	return sguo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (sguo *SpotGenesisUpdateOne) SetNillableTime(i *int64) *SpotGenesisUpdateOne {
	if i != nil {
		sguo.SetTime(*i)
	}
	return sguo
}

// AddTime adds i to the "time" field.
func (sguo *SpotGenesisUpdateOne) AddTime(i int64) *SpotGenesisUpdateOne {
	sguo.mutation.AddTime(i)
	return sguo
}

// SetAddress sets the "address" field.
func (sguo *SpotGenesisUpdateOne) SetAddress(s string) *SpotGenesisUpdateOne {
	sguo.mutation.SetAddress(s)
	return sguo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (sguo *SpotGenesisUpdateOne) SetNillableAddress(s *string) *SpotGenesisUpdateOne {
	if s != nil {
		sguo.SetAddress(*s)
	}
	return sguo
}

// Mutation returns the SpotGenesisMutation object of the builder.
func (sguo *SpotGenesisUpdateOne) Mutation() *SpotGenesisMutation {
	return sguo.mutation
}

// Where appends a list predicates to the SpotGenesisUpdate builder.
func (sguo *SpotGenesisUpdateOne) Where(ps ...predicate.SpotGenesis) *SpotGenesisUpdateOne {
	sguo.mutation.Where(ps...)
	return sguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sguo *SpotGenesisUpdateOne) Select(field string, fields ...string) *SpotGenesisUpdateOne {
	sguo.fields = append([]string{field}, fields...)
	return sguo
}

// Save executes the query and returns the updated SpotGenesis entity.
func (sguo *SpotGenesisUpdateOne) Save(ctx context.Context) (*SpotGenesis, error) {
	return withHooks(ctx, sguo.sqlSave, sguo.mutation, sguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sguo *SpotGenesisUpdateOne) SaveX(ctx context.Context) *SpotGenesis {
	node, err := sguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sguo *SpotGenesisUpdateOne) Exec(ctx context.Context) error {
	_, err := sguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sguo *SpotGenesisUpdateOne) ExecX(ctx context.Context) {
	if err := sguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sguo *SpotGenesisUpdateOne) sqlSave(ctx context.Context) (_node *SpotGenesis, err error) {
	_spec := sqlgraph.NewUpdateSpec(spotgenesis.Table, spotgenesis.Columns, sqlgraph.NewFieldSpec(spotgenesis.FieldID, field.TypeInt))
	id, ok := sguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SpotGenesis.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spotgenesis.FieldID)
		for _, f := range fields {
			if !spotgenesis.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != spotgenesis.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sguo.mutation.Coin(); ok {
		_spec.SetField(spotgenesis.FieldCoin, field.TypeString, value)
	}
	if value, ok := sguo.mutation.Amount(); ok {
		_spec.SetField(spotgenesis.FieldAmount, field.TypeString, value)
	}
	if value, ok := sguo.mutation.Time(); ok {
		_spec.SetField(spotgenesis.FieldTime, field.TypeInt64, value)
	}
	if value, ok := sguo.mutation.AddedTime(); ok {
		_spec.AddField(spotgenesis.FieldTime, field.TypeInt64, value)
	}
	if value, ok := sguo.mutation.Address(); ok {
		_spec.SetField(spotgenesis.FieldAddress, field.TypeString, value)
	}
	_node = &SpotGenesis{config: sguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spotgenesis.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sguo.mutation.done = true
	return _node, nil
}
