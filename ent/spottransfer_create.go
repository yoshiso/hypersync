// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/spottransfer"
)

// SpotTransferCreate is the builder for creating a SpotTransfer entity.
type SpotTransferCreate struct {
	config
	mutation *SpotTransferMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUser sets the "user" field.
func (stc *SpotTransferCreate) SetUser(s string) *SpotTransferCreate {
	stc.mutation.SetUser(s)
	return stc
}

// SetDestination sets the "destination" field.
func (stc *SpotTransferCreate) SetDestination(s string) *SpotTransferCreate {
	stc.mutation.SetDestination(s)
	return stc
}

// SetToken sets the "token" field.
func (stc *SpotTransferCreate) SetToken(s string) *SpotTransferCreate {
	stc.mutation.SetToken(s)
	return stc
}

// SetAmount sets the "amount" field.
func (stc *SpotTransferCreate) SetAmount(s string) *SpotTransferCreate {
	stc.mutation.SetAmount(s)
	return stc
}

// SetFee sets the "fee" field.
func (stc *SpotTransferCreate) SetFee(s string) *SpotTransferCreate {
	stc.mutation.SetFee(s)
	return stc
}

// SetTime sets the "time" field.
func (stc *SpotTransferCreate) SetTime(i int64) *SpotTransferCreate {
	stc.mutation.SetTime(i)
	return stc
}

// SetAddress sets the "address" field.
func (stc *SpotTransferCreate) SetAddress(s string) *SpotTransferCreate {
	stc.mutation.SetAddress(s)
	return stc
}

// Mutation returns the SpotTransferMutation object of the builder.
func (stc *SpotTransferCreate) Mutation() *SpotTransferMutation {
	return stc.mutation
}

// Save creates the SpotTransfer in the database.
func (stc *SpotTransferCreate) Save(ctx context.Context) (*SpotTransfer, error) {
	return withHooks(ctx, stc.sqlSave, stc.mutation, stc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stc *SpotTransferCreate) SaveX(ctx context.Context) *SpotTransfer {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *SpotTransferCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *SpotTransferCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *SpotTransferCreate) check() error {
	if _, ok := stc.mutation.User(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required field "SpotTransfer.user"`)}
	}
	if _, ok := stc.mutation.Destination(); !ok {
		return &ValidationError{Name: "destination", err: errors.New(`ent: missing required field "SpotTransfer.destination"`)}
	}
	if _, ok := stc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "SpotTransfer.token"`)}
	}
	if _, ok := stc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "SpotTransfer.amount"`)}
	}
	if _, ok := stc.mutation.Fee(); !ok {
		return &ValidationError{Name: "fee", err: errors.New(`ent: missing required field "SpotTransfer.fee"`)}
	}
	if _, ok := stc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "SpotTransfer.time"`)}
	}
	if _, ok := stc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "SpotTransfer.address"`)}
	}
	return nil
}

func (stc *SpotTransferCreate) sqlSave(ctx context.Context) (*SpotTransfer, error) {
	if err := stc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	stc.mutation.id = &_node.ID
	stc.mutation.done = true
	return _node, nil
}

func (stc *SpotTransferCreate) createSpec() (*SpotTransfer, *sqlgraph.CreateSpec) {
	var (
		_node = &SpotTransfer{config: stc.config}
		_spec = sqlgraph.NewCreateSpec(spottransfer.Table, sqlgraph.NewFieldSpec(spottransfer.FieldID, field.TypeInt))
	)
	_spec.OnConflict = stc.conflict
	if value, ok := stc.mutation.User(); ok {
		_spec.SetField(spottransfer.FieldUser, field.TypeString, value)
		_node.User = value
	}
	if value, ok := stc.mutation.Destination(); ok {
		_spec.SetField(spottransfer.FieldDestination, field.TypeString, value)
		_node.Destination = value
	}
	if value, ok := stc.mutation.Token(); ok {
		_spec.SetField(spottransfer.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := stc.mutation.Amount(); ok {
		_spec.SetField(spottransfer.FieldAmount, field.TypeString, value)
		_node.Amount = value
	}
	if value, ok := stc.mutation.Fee(); ok {
		_spec.SetField(spottransfer.FieldFee, field.TypeString, value)
		_node.Fee = value
	}
	if value, ok := stc.mutation.Time(); ok {
		_spec.SetField(spottransfer.FieldTime, field.TypeInt64, value)
		_node.Time = value
	}
	if value, ok := stc.mutation.Address(); ok {
		_spec.SetField(spottransfer.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SpotTransfer.Create().
//		SetUser(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SpotTransferUpsert) {
//			SetUser(v+v).
//		}).
//		Exec(ctx)
func (stc *SpotTransferCreate) OnConflict(opts ...sql.ConflictOption) *SpotTransferUpsertOne {
	stc.conflict = opts
	return &SpotTransferUpsertOne{
		create: stc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SpotTransfer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stc *SpotTransferCreate) OnConflictColumns(columns ...string) *SpotTransferUpsertOne {
	stc.conflict = append(stc.conflict, sql.ConflictColumns(columns...))
	return &SpotTransferUpsertOne{
		create: stc,
	}
}

type (
	// SpotTransferUpsertOne is the builder for "upsert"-ing
	//  one SpotTransfer node.
	SpotTransferUpsertOne struct {
		create *SpotTransferCreate
	}

	// SpotTransferUpsert is the "OnConflict" setter.
	SpotTransferUpsert struct {
		*sql.UpdateSet
	}
)

// SetUser sets the "user" field.
func (u *SpotTransferUpsert) SetUser(v string) *SpotTransferUpsert {
	u.Set(spottransfer.FieldUser, v)
	return u
}

// UpdateUser sets the "user" field to the value that was provided on create.
func (u *SpotTransferUpsert) UpdateUser() *SpotTransferUpsert {
	u.SetExcluded(spottransfer.FieldUser)
	return u
}

// SetDestination sets the "destination" field.
func (u *SpotTransferUpsert) SetDestination(v string) *SpotTransferUpsert {
	u.Set(spottransfer.FieldDestination, v)
	return u
}

// UpdateDestination sets the "destination" field to the value that was provided on create.
func (u *SpotTransferUpsert) UpdateDestination() *SpotTransferUpsert {
	u.SetExcluded(spottransfer.FieldDestination)
	return u
}

// SetToken sets the "token" field.
func (u *SpotTransferUpsert) SetToken(v string) *SpotTransferUpsert {
	u.Set(spottransfer.FieldToken, v)
	return u
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *SpotTransferUpsert) UpdateToken() *SpotTransferUpsert {
	u.SetExcluded(spottransfer.FieldToken)
	return u
}

// SetAmount sets the "amount" field.
func (u *SpotTransferUpsert) SetAmount(v string) *SpotTransferUpsert {
	u.Set(spottransfer.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *SpotTransferUpsert) UpdateAmount() *SpotTransferUpsert {
	u.SetExcluded(spottransfer.FieldAmount)
	return u
}

// SetFee sets the "fee" field.
func (u *SpotTransferUpsert) SetFee(v string) *SpotTransferUpsert {
	u.Set(spottransfer.FieldFee, v)
	return u
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *SpotTransferUpsert) UpdateFee() *SpotTransferUpsert {
	u.SetExcluded(spottransfer.FieldFee)
	return u
}

// SetTime sets the "time" field.
func (u *SpotTransferUpsert) SetTime(v int64) *SpotTransferUpsert {
	u.Set(spottransfer.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *SpotTransferUpsert) UpdateTime() *SpotTransferUpsert {
	u.SetExcluded(spottransfer.FieldTime)
	return u
}

// AddTime adds v to the "time" field.
func (u *SpotTransferUpsert) AddTime(v int64) *SpotTransferUpsert {
	u.Add(spottransfer.FieldTime, v)
	return u
}

// SetAddress sets the "address" field.
func (u *SpotTransferUpsert) SetAddress(v string) *SpotTransferUpsert {
	u.Set(spottransfer.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *SpotTransferUpsert) UpdateAddress() *SpotTransferUpsert {
	u.SetExcluded(spottransfer.FieldAddress)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SpotTransfer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SpotTransferUpsertOne) UpdateNewValues() *SpotTransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SpotTransfer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SpotTransferUpsertOne) Ignore() *SpotTransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SpotTransferUpsertOne) DoNothing() *SpotTransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SpotTransferCreate.OnConflict
// documentation for more info.
func (u *SpotTransferUpsertOne) Update(set func(*SpotTransferUpsert)) *SpotTransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SpotTransferUpsert{UpdateSet: update})
	}))
	return u
}

// SetUser sets the "user" field.
func (u *SpotTransferUpsertOne) SetUser(v string) *SpotTransferUpsertOne {
	return u.Update(func(s *SpotTransferUpsert) {
		s.SetUser(v)
	})
}

// UpdateUser sets the "user" field to the value that was provided on create.
func (u *SpotTransferUpsertOne) UpdateUser() *SpotTransferUpsertOne {
	return u.Update(func(s *SpotTransferUpsert) {
		s.UpdateUser()
	})
}

// SetDestination sets the "destination" field.
func (u *SpotTransferUpsertOne) SetDestination(v string) *SpotTransferUpsertOne {
	return u.Update(func(s *SpotTransferUpsert) {
		s.SetDestination(v)
	})
}

// UpdateDestination sets the "destination" field to the value that was provided on create.
func (u *SpotTransferUpsertOne) UpdateDestination() *SpotTransferUpsertOne {
	return u.Update(func(s *SpotTransferUpsert) {
		s.UpdateDestination()
	})
}

// SetToken sets the "token" field.
func (u *SpotTransferUpsertOne) SetToken(v string) *SpotTransferUpsertOne {
	return u.Update(func(s *SpotTransferUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *SpotTransferUpsertOne) UpdateToken() *SpotTransferUpsertOne {
	return u.Update(func(s *SpotTransferUpsert) {
		s.UpdateToken()
	})
}

// SetAmount sets the "amount" field.
func (u *SpotTransferUpsertOne) SetAmount(v string) *SpotTransferUpsertOne {
	return u.Update(func(s *SpotTransferUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *SpotTransferUpsertOne) UpdateAmount() *SpotTransferUpsertOne {
	return u.Update(func(s *SpotTransferUpsert) {
		s.UpdateAmount()
	})
}

// SetFee sets the "fee" field.
func (u *SpotTransferUpsertOne) SetFee(v string) *SpotTransferUpsertOne {
	return u.Update(func(s *SpotTransferUpsert) {
		s.SetFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *SpotTransferUpsertOne) UpdateFee() *SpotTransferUpsertOne {
	return u.Update(func(s *SpotTransferUpsert) {
		s.UpdateFee()
	})
}

// SetTime sets the "time" field.
func (u *SpotTransferUpsertOne) SetTime(v int64) *SpotTransferUpsertOne {
	return u.Update(func(s *SpotTransferUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *SpotTransferUpsertOne) AddTime(v int64) *SpotTransferUpsertOne {
	return u.Update(func(s *SpotTransferUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *SpotTransferUpsertOne) UpdateTime() *SpotTransferUpsertOne {
	return u.Update(func(s *SpotTransferUpsert) {
		s.UpdateTime()
	})
}

// SetAddress sets the "address" field.
func (u *SpotTransferUpsertOne) SetAddress(v string) *SpotTransferUpsertOne {
	return u.Update(func(s *SpotTransferUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *SpotTransferUpsertOne) UpdateAddress() *SpotTransferUpsertOne {
	return u.Update(func(s *SpotTransferUpsert) {
		s.UpdateAddress()
	})
}

// Exec executes the query.
func (u *SpotTransferUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SpotTransferCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SpotTransferUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SpotTransferUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SpotTransferUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SpotTransferCreateBulk is the builder for creating many SpotTransfer entities in bulk.
type SpotTransferCreateBulk struct {
	config
	err      error
	builders []*SpotTransferCreate
	conflict []sql.ConflictOption
}

// Save creates the SpotTransfer entities in the database.
func (stcb *SpotTransferCreateBulk) Save(ctx context.Context) ([]*SpotTransfer, error) {
	if stcb.err != nil {
		return nil, stcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*SpotTransfer, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SpotTransferMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = stcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *SpotTransferCreateBulk) SaveX(ctx context.Context) []*SpotTransfer {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *SpotTransferCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *SpotTransferCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SpotTransfer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SpotTransferUpsert) {
//			SetUser(v+v).
//		}).
//		Exec(ctx)
func (stcb *SpotTransferCreateBulk) OnConflict(opts ...sql.ConflictOption) *SpotTransferUpsertBulk {
	stcb.conflict = opts
	return &SpotTransferUpsertBulk{
		create: stcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SpotTransfer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stcb *SpotTransferCreateBulk) OnConflictColumns(columns ...string) *SpotTransferUpsertBulk {
	stcb.conflict = append(stcb.conflict, sql.ConflictColumns(columns...))
	return &SpotTransferUpsertBulk{
		create: stcb,
	}
}

// SpotTransferUpsertBulk is the builder for "upsert"-ing
// a bulk of SpotTransfer nodes.
type SpotTransferUpsertBulk struct {
	create *SpotTransferCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SpotTransfer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SpotTransferUpsertBulk) UpdateNewValues() *SpotTransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SpotTransfer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SpotTransferUpsertBulk) Ignore() *SpotTransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SpotTransferUpsertBulk) DoNothing() *SpotTransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SpotTransferCreateBulk.OnConflict
// documentation for more info.
func (u *SpotTransferUpsertBulk) Update(set func(*SpotTransferUpsert)) *SpotTransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SpotTransferUpsert{UpdateSet: update})
	}))
	return u
}

// SetUser sets the "user" field.
func (u *SpotTransferUpsertBulk) SetUser(v string) *SpotTransferUpsertBulk {
	return u.Update(func(s *SpotTransferUpsert) {
		s.SetUser(v)
	})
}

// UpdateUser sets the "user" field to the value that was provided on create.
func (u *SpotTransferUpsertBulk) UpdateUser() *SpotTransferUpsertBulk {
	return u.Update(func(s *SpotTransferUpsert) {
		s.UpdateUser()
	})
}

// SetDestination sets the "destination" field.
func (u *SpotTransferUpsertBulk) SetDestination(v string) *SpotTransferUpsertBulk {
	return u.Update(func(s *SpotTransferUpsert) {
		s.SetDestination(v)
	})
}

// UpdateDestination sets the "destination" field to the value that was provided on create.
func (u *SpotTransferUpsertBulk) UpdateDestination() *SpotTransferUpsertBulk {
	return u.Update(func(s *SpotTransferUpsert) {
		s.UpdateDestination()
	})
}

// SetToken sets the "token" field.
func (u *SpotTransferUpsertBulk) SetToken(v string) *SpotTransferUpsertBulk {
	return u.Update(func(s *SpotTransferUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *SpotTransferUpsertBulk) UpdateToken() *SpotTransferUpsertBulk {
	return u.Update(func(s *SpotTransferUpsert) {
		s.UpdateToken()
	})
}

// SetAmount sets the "amount" field.
func (u *SpotTransferUpsertBulk) SetAmount(v string) *SpotTransferUpsertBulk {
	return u.Update(func(s *SpotTransferUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *SpotTransferUpsertBulk) UpdateAmount() *SpotTransferUpsertBulk {
	return u.Update(func(s *SpotTransferUpsert) {
		s.UpdateAmount()
	})
}

// SetFee sets the "fee" field.
func (u *SpotTransferUpsertBulk) SetFee(v string) *SpotTransferUpsertBulk {
	return u.Update(func(s *SpotTransferUpsert) {
		s.SetFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *SpotTransferUpsertBulk) UpdateFee() *SpotTransferUpsertBulk {
	return u.Update(func(s *SpotTransferUpsert) {
		s.UpdateFee()
	})
}

// SetTime sets the "time" field.
func (u *SpotTransferUpsertBulk) SetTime(v int64) *SpotTransferUpsertBulk {
	return u.Update(func(s *SpotTransferUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *SpotTransferUpsertBulk) AddTime(v int64) *SpotTransferUpsertBulk {
	return u.Update(func(s *SpotTransferUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *SpotTransferUpsertBulk) UpdateTime() *SpotTransferUpsertBulk {
	return u.Update(func(s *SpotTransferUpsert) {
		s.UpdateTime()
	})
}

// SetAddress sets the "address" field.
func (u *SpotTransferUpsertBulk) SetAddress(v string) *SpotTransferUpsertBulk {
	return u.Update(func(s *SpotTransferUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *SpotTransferUpsertBulk) UpdateAddress() *SpotTransferUpsertBulk {
	return u.Update(func(s *SpotTransferUpsert) {
		s.UpdateAddress()
	})
}

// Exec executes the query.
func (u *SpotTransferUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SpotTransferCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SpotTransferCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SpotTransferUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
