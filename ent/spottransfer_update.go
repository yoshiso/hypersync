// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/predicate"
	"github.com/yoshiso/hypersync/ent/spottransfer"
)

// SpotTransferUpdate is the builder for updating SpotTransfer entities.
type SpotTransferUpdate struct {
	config
	hooks    []Hook
	mutation *SpotTransferMutation
}

// Where appends a list predicates to the SpotTransferUpdate builder.
func (stu *SpotTransferUpdate) Where(ps ...predicate.SpotTransfer) *SpotTransferUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetUser sets the "user" field.
func (stu *SpotTransferUpdate) SetUser(s string) *SpotTransferUpdate {
	stu.mutation.SetUser(s)
	return stu
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (stu *SpotTransferUpdate) SetNillableUser(s *string) *SpotTransferUpdate {
	if s != nil {
		stu.SetUser(*s)
	}
	return stu
}

// SetDestination sets the "destination" field.
func (stu *SpotTransferUpdate) SetDestination(s string) *SpotTransferUpdate {
	stu.mutation.SetDestination(s)
	return stu
}

// SetNillableDestination sets the "destination" field if the given value is not nil.
func (stu *SpotTransferUpdate) SetNillableDestination(s *string) *SpotTransferUpdate {
	if s != nil {
		stu.SetDestination(*s)
	}
	return stu
}

// SetToken sets the "token" field.
func (stu *SpotTransferUpdate) SetToken(s string) *SpotTransferUpdate {
	stu.mutation.SetToken(s)
	return stu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (stu *SpotTransferUpdate) SetNillableToken(s *string) *SpotTransferUpdate {
	if s != nil {
		stu.SetToken(*s)
	}
	return stu
}

// SetAmount sets the "amount" field.
func (stu *SpotTransferUpdate) SetAmount(s string) *SpotTransferUpdate {
	stu.mutation.SetAmount(s)
	return stu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (stu *SpotTransferUpdate) SetNillableAmount(s *string) *SpotTransferUpdate {
	if s != nil {
		stu.SetAmount(*s)
	}
	return stu
}

// SetFee sets the "fee" field.
func (stu *SpotTransferUpdate) SetFee(s string) *SpotTransferUpdate {
	stu.mutation.SetFee(s)
	return stu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (stu *SpotTransferUpdate) SetNillableFee(s *string) *SpotTransferUpdate {
	if s != nil {
		stu.SetFee(*s)
	}
	return stu
}

// SetTime sets the "time" field.
func (stu *SpotTransferUpdate) SetTime(i int64) *SpotTransferUpdate {
	stu.mutation.ResetTime()
	stu.mutation.SetTime(i)
	return stu
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (stu *SpotTransferUpdate) SetNillableTime(i *int64) *SpotTransferUpdate {
	if i != nil {
		stu.SetTime(*i)
	}
	return stu
}

// AddTime adds i to the "time" field.
func (stu *SpotTransferUpdate) AddTime(i int64) *SpotTransferUpdate {
	stu.mutation.AddTime(i)
	return stu
}

// SetAddress sets the "address" field.
func (stu *SpotTransferUpdate) SetAddress(s string) *SpotTransferUpdate {
	stu.mutation.SetAddress(s)
	return stu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (stu *SpotTransferUpdate) SetNillableAddress(s *string) *SpotTransferUpdate {
	if s != nil {
		stu.SetAddress(*s)
	}
	return stu
}

// Mutation returns the SpotTransferMutation object of the builder.
func (stu *SpotTransferUpdate) Mutation() *SpotTransferMutation {
	return stu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *SpotTransferUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SpotTransferUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SpotTransferUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SpotTransferUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stu *SpotTransferUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(spottransfer.Table, spottransfer.Columns, sqlgraph.NewFieldSpec(spottransfer.FieldID, field.TypeInt))
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.User(); ok {
		_spec.SetField(spottransfer.FieldUser, field.TypeString, value)
	}
	if value, ok := stu.mutation.Destination(); ok {
		_spec.SetField(spottransfer.FieldDestination, field.TypeString, value)
	}
	if value, ok := stu.mutation.Token(); ok {
		_spec.SetField(spottransfer.FieldToken, field.TypeString, value)
	}
	if value, ok := stu.mutation.Amount(); ok {
		_spec.SetField(spottransfer.FieldAmount, field.TypeString, value)
	}
	if value, ok := stu.mutation.Fee(); ok {
		_spec.SetField(spottransfer.FieldFee, field.TypeString, value)
	}
	if value, ok := stu.mutation.Time(); ok {
		_spec.SetField(spottransfer.FieldTime, field.TypeInt64, value)
	}
	if value, ok := stu.mutation.AddedTime(); ok {
		_spec.AddField(spottransfer.FieldTime, field.TypeInt64, value)
	}
	if value, ok := stu.mutation.Address(); ok {
		_spec.SetField(spottransfer.FieldAddress, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spottransfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// SpotTransferUpdateOne is the builder for updating a single SpotTransfer entity.
type SpotTransferUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpotTransferMutation
}

// SetUser sets the "user" field.
func (stuo *SpotTransferUpdateOne) SetUser(s string) *SpotTransferUpdateOne {
	stuo.mutation.SetUser(s)
	return stuo
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (stuo *SpotTransferUpdateOne) SetNillableUser(s *string) *SpotTransferUpdateOne {
	if s != nil {
		stuo.SetUser(*s)
	}
	return stuo
}

// SetDestination sets the "destination" field.
func (stuo *SpotTransferUpdateOne) SetDestination(s string) *SpotTransferUpdateOne {
	stuo.mutation.SetDestination(s)
	return stuo
}

// SetNillableDestination sets the "destination" field if the given value is not nil.
func (stuo *SpotTransferUpdateOne) SetNillableDestination(s *string) *SpotTransferUpdateOne {
	if s != nil {
		stuo.SetDestination(*s)
	}
	return stuo
}

// SetToken sets the "token" field.
func (stuo *SpotTransferUpdateOne) SetToken(s string) *SpotTransferUpdateOne {
	stuo.mutation.SetToken(s)
	return stuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (stuo *SpotTransferUpdateOne) SetNillableToken(s *string) *SpotTransferUpdateOne {
	if s != nil {
		stuo.SetToken(*s)
	}
	return stuo
}

// SetAmount sets the "amount" field.
func (stuo *SpotTransferUpdateOne) SetAmount(s string) *SpotTransferUpdateOne {
	stuo.mutation.SetAmount(s)
	return stuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (stuo *SpotTransferUpdateOne) SetNillableAmount(s *string) *SpotTransferUpdateOne {
	if s != nil {
		stuo.SetAmount(*s)
	}
	return stuo
}

// SetFee sets the "fee" field.
func (stuo *SpotTransferUpdateOne) SetFee(s string) *SpotTransferUpdateOne {
	stuo.mutation.SetFee(s)
	return stuo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (stuo *SpotTransferUpdateOne) SetNillableFee(s *string) *SpotTransferUpdateOne {
	if s != nil {
		stuo.SetFee(*s)
	}
	return stuo
}

// SetTime sets the "time" field.
func (stuo *SpotTransferUpdateOne) SetTime(i int64) *SpotTransferUpdateOne {
	stuo.mutation.ResetTime()
	stuo.mutation.SetTime(i)
	return stuo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (stuo *SpotTransferUpdateOne) SetNillableTime(i *int64) *SpotTransferUpdateOne {
	if i != nil {
		stuo.SetTime(*i)
	}
	return stuo
}

// AddTime adds i to the "time" field.
func (stuo *SpotTransferUpdateOne) AddTime(i int64) *SpotTransferUpdateOne {
	stuo.mutation.AddTime(i)
	return stuo
}

// SetAddress sets the "address" field.
func (stuo *SpotTransferUpdateOne) SetAddress(s string) *SpotTransferUpdateOne {
	stuo.mutation.SetAddress(s)
	return stuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (stuo *SpotTransferUpdateOne) SetNillableAddress(s *string) *SpotTransferUpdateOne {
	if s != nil {
		stuo.SetAddress(*s)
	}
	return stuo
}

// Mutation returns the SpotTransferMutation object of the builder.
func (stuo *SpotTransferUpdateOne) Mutation() *SpotTransferMutation {
	return stuo.mutation
}

// Where appends a list predicates to the SpotTransferUpdate builder.
func (stuo *SpotTransferUpdateOne) Where(ps ...predicate.SpotTransfer) *SpotTransferUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *SpotTransferUpdateOne) Select(field string, fields ...string) *SpotTransferUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated SpotTransfer entity.
func (stuo *SpotTransferUpdateOne) Save(ctx context.Context) (*SpotTransfer, error) {
	return withHooks(ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SpotTransferUpdateOne) SaveX(ctx context.Context) *SpotTransfer {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *SpotTransferUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SpotTransferUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stuo *SpotTransferUpdateOne) sqlSave(ctx context.Context) (_node *SpotTransfer, err error) {
	_spec := sqlgraph.NewUpdateSpec(spottransfer.Table, spottransfer.Columns, sqlgraph.NewFieldSpec(spottransfer.FieldID, field.TypeInt))
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SpotTransfer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spottransfer.FieldID)
		for _, f := range fields {
			if !spottransfer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != spottransfer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.User(); ok {
		_spec.SetField(spottransfer.FieldUser, field.TypeString, value)
	}
	if value, ok := stuo.mutation.Destination(); ok {
		_spec.SetField(spottransfer.FieldDestination, field.TypeString, value)
	}
	if value, ok := stuo.mutation.Token(); ok {
		_spec.SetField(spottransfer.FieldToken, field.TypeString, value)
	}
	if value, ok := stuo.mutation.Amount(); ok {
		_spec.SetField(spottransfer.FieldAmount, field.TypeString, value)
	}
	if value, ok := stuo.mutation.Fee(); ok {
		_spec.SetField(spottransfer.FieldFee, field.TypeString, value)
	}
	if value, ok := stuo.mutation.Time(); ok {
		_spec.SetField(spottransfer.FieldTime, field.TypeInt64, value)
	}
	if value, ok := stuo.mutation.AddedTime(); ok {
		_spec.AddField(spottransfer.FieldTime, field.TypeInt64, value)
	}
	if value, ok := stuo.mutation.Address(); ok {
		_spec.SetField(spottransfer.FieldAddress, field.TypeString, value)
	}
	_node = &SpotTransfer{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spottransfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
