// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yoshiso/hypersync/ent/twapslicefill"
)

// TwapSliceFill is the model entity for the TwapSliceFill schema.
type TwapSliceFill struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Coin holds the value of the "coin" field.
	Coin string `json:"coin,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Px holds the value of the "px" field.
	Px string `json:"px,omitempty"`
	// Sz holds the value of the "sz" field.
	Sz string `json:"sz,omitempty"`
	// Side holds the value of the "side" field.
	Side string `json:"side,omitempty"`
	// Time holds the value of the "time" field.
	Time int64 `json:"time,omitempty"`
	// StartPosition holds the value of the "start_position" field.
	StartPosition string `json:"start_position,omitempty"`
	// ClosedPnl holds the value of the "closed_pnl" field.
	ClosedPnl string `json:"closed_pnl,omitempty"`
	// Dir holds the value of the "dir" field.
	Dir string `json:"dir,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Crossed holds the value of the "crossed" field.
	Crossed bool `json:"crossed,omitempty"`
	// Fee holds the value of the "fee" field.
	Fee string `json:"fee,omitempty"`
	// Oid holds the value of the "oid" field.
	Oid int64 `json:"oid,omitempty"`
	// Tid holds the value of the "tid" field.
	Tid int64 `json:"tid,omitempty"`
	// TwapID holds the value of the "twap_id" field.
	TwapID int64 `json:"twap_id,omitempty"`
	// FeeToken holds the value of the "fee_token" field.
	FeeToken string `json:"fee_token,omitempty"`
	// BuilderFee holds the value of the "builder_fee" field.
	BuilderFee   string `json:"builder_fee,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TwapSliceFill) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case twapslicefill.FieldCrossed:
			values[i] = new(sql.NullBool)
		case twapslicefill.FieldID, twapslicefill.FieldTime, twapslicefill.FieldOid, twapslicefill.FieldTid, twapslicefill.FieldTwapID:
			values[i] = new(sql.NullInt64)
		case twapslicefill.FieldCoin, twapslicefill.FieldAddress, twapslicefill.FieldPx, twapslicefill.FieldSz, twapslicefill.FieldSide, twapslicefill.FieldStartPosition, twapslicefill.FieldClosedPnl, twapslicefill.FieldDir, twapslicefill.FieldHash, twapslicefill.FieldFee, twapslicefill.FieldFeeToken, twapslicefill.FieldBuilderFee:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TwapSliceFill fields.
func (tsf *TwapSliceFill) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case twapslicefill.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tsf.ID = int(value.Int64)
		case twapslicefill.FieldCoin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field coin", values[i])
			} else if value.Valid {
				tsf.Coin = value.String
			}
		case twapslicefill.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				tsf.Address = value.String
			}
		case twapslicefill.FieldPx:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field px", values[i])
			} else if value.Valid {
				tsf.Px = value.String
			}
		case twapslicefill.FieldSz:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sz", values[i])
			} else if value.Valid {
				tsf.Sz = value.String
			}
		case twapslicefill.FieldSide:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field side", values[i])
			} else if value.Valid {
				tsf.Side = value.String
			}
		case twapslicefill.FieldTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				tsf.Time = value.Int64
			}
		case twapslicefill.FieldStartPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field start_position", values[i])
			} else if value.Valid {
				tsf.StartPosition = value.String
			}
		case twapslicefill.FieldClosedPnl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field closed_pnl", values[i])
			} else if value.Valid {
				tsf.ClosedPnl = value.String
			}
		case twapslicefill.FieldDir:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dir", values[i])
			} else if value.Valid {
				tsf.Dir = value.String
			}
		case twapslicefill.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				tsf.Hash = value.String
			}
		case twapslicefill.FieldCrossed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field crossed", values[i])
			} else if value.Valid {
				tsf.Crossed = value.Bool
			}
		case twapslicefill.FieldFee:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fee", values[i])
			} else if value.Valid {
				tsf.Fee = value.String
			}
		case twapslicefill.FieldOid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field oid", values[i])
			} else if value.Valid {
				tsf.Oid = value.Int64
			}
		case twapslicefill.FieldTid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tid", values[i])
			} else if value.Valid {
				tsf.Tid = value.Int64
			}
		case twapslicefill.FieldTwapID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field twap_id", values[i])
			} else if value.Valid {
				tsf.TwapID = value.Int64
			}
		case twapslicefill.FieldFeeToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fee_token", values[i])
			} else if value.Valid {
				tsf.FeeToken = value.String
			}
		case twapslicefill.FieldBuilderFee:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field builder_fee", values[i])
			} else if value.Valid {
				tsf.BuilderFee = value.String
			}
		default:
			tsf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TwapSliceFill.
// This includes values selected through modifiers, order, etc.
func (tsf *TwapSliceFill) Value(name string) (ent.Value, error) {
	return tsf.selectValues.Get(name)
}

// Update returns a builder for updating this TwapSliceFill.
// Note that you need to call TwapSliceFill.Unwrap() before calling this method if this TwapSliceFill
// was returned from a transaction, and the transaction was committed or rolled back.
func (tsf *TwapSliceFill) Update() *TwapSliceFillUpdateOne {
	return NewTwapSliceFillClient(tsf.config).UpdateOne(tsf)
}

// Unwrap unwraps the TwapSliceFill entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tsf *TwapSliceFill) Unwrap() *TwapSliceFill {
	_tx, ok := tsf.config.driver.(*txDriver)
	if !ok {
		panic("ent: TwapSliceFill is not a transactional entity")
	}
	tsf.config.driver = _tx.drv
	return tsf
}

// String implements the fmt.Stringer.
func (tsf *TwapSliceFill) String() string {
	var builder strings.Builder
	builder.WriteString("TwapSliceFill(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tsf.ID))
	builder.WriteString("coin=")
	builder.WriteString(tsf.Coin)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(tsf.Address)
	builder.WriteString(", ")
	builder.WriteString("px=")
	builder.WriteString(tsf.Px)
	builder.WriteString(", ")
	builder.WriteString("sz=")
	builder.WriteString(tsf.Sz)
	builder.WriteString(", ")
	builder.WriteString("side=")
	builder.WriteString(tsf.Side)
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(fmt.Sprintf("%v", tsf.Time))
	builder.WriteString(", ")
	builder.WriteString("start_position=")
	builder.WriteString(tsf.StartPosition)
	builder.WriteString(", ")
	builder.WriteString("closed_pnl=")
	builder.WriteString(tsf.ClosedPnl)
	builder.WriteString(", ")
	builder.WriteString("dir=")
	builder.WriteString(tsf.Dir)
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(tsf.Hash)
	builder.WriteString(", ")
	builder.WriteString("crossed=")
	builder.WriteString(fmt.Sprintf("%v", tsf.Crossed))
	builder.WriteString(", ")
	builder.WriteString("fee=")
	builder.WriteString(tsf.Fee)
	builder.WriteString(", ")
	builder.WriteString("oid=")
	builder.WriteString(fmt.Sprintf("%v", tsf.Oid))
	builder.WriteString(", ")
	builder.WriteString("tid=")
	builder.WriteString(fmt.Sprintf("%v", tsf.Tid))
	builder.WriteString(", ")
	builder.WriteString("twap_id=")
	builder.WriteString(fmt.Sprintf("%v", tsf.TwapID))
	builder.WriteString(", ")
	builder.WriteString("fee_token=")
	builder.WriteString(tsf.FeeToken)
	builder.WriteString(", ")
	builder.WriteString("builder_fee=")
	builder.WriteString(tsf.BuilderFee)
	builder.WriteByte(')')
	return builder.String()
}

// TwapSliceFills is a parsable slice of TwapSliceFill.
type TwapSliceFills []*TwapSliceFill
