// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/twapslicefill"
)

// TwapSliceFillCreate is the builder for creating a TwapSliceFill entity.
type TwapSliceFillCreate struct {
	config
	mutation *TwapSliceFillMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCoin sets the "coin" field.
func (tsfc *TwapSliceFillCreate) SetCoin(s string) *TwapSliceFillCreate {
	tsfc.mutation.SetCoin(s)
	return tsfc
}

// SetAddress sets the "address" field.
func (tsfc *TwapSliceFillCreate) SetAddress(s string) *TwapSliceFillCreate {
	tsfc.mutation.SetAddress(s)
	return tsfc
}

// SetPx sets the "px" field.
func (tsfc *TwapSliceFillCreate) SetPx(s string) *TwapSliceFillCreate {
	tsfc.mutation.SetPx(s)
	return tsfc
}

// SetSz sets the "sz" field.
func (tsfc *TwapSliceFillCreate) SetSz(s string) *TwapSliceFillCreate {
	tsfc.mutation.SetSz(s)
	return tsfc
}

// SetSide sets the "side" field.
func (tsfc *TwapSliceFillCreate) SetSide(s string) *TwapSliceFillCreate {
	tsfc.mutation.SetSide(s)
	return tsfc
}

// SetTime sets the "time" field.
func (tsfc *TwapSliceFillCreate) SetTime(i int64) *TwapSliceFillCreate {
	tsfc.mutation.SetTime(i)
	return tsfc
}

// SetStartPosition sets the "start_position" field.
func (tsfc *TwapSliceFillCreate) SetStartPosition(s string) *TwapSliceFillCreate {
	tsfc.mutation.SetStartPosition(s)
	return tsfc
}

// SetClosedPnl sets the "closed_pnl" field.
func (tsfc *TwapSliceFillCreate) SetClosedPnl(s string) *TwapSliceFillCreate {
	tsfc.mutation.SetClosedPnl(s)
	return tsfc
}

// SetDir sets the "dir" field.
func (tsfc *TwapSliceFillCreate) SetDir(s string) *TwapSliceFillCreate {
	tsfc.mutation.SetDir(s)
	return tsfc
}

// SetHash sets the "hash" field.
func (tsfc *TwapSliceFillCreate) SetHash(s string) *TwapSliceFillCreate {
	tsfc.mutation.SetHash(s)
	return tsfc
}

// SetCrossed sets the "crossed" field.
func (tsfc *TwapSliceFillCreate) SetCrossed(b bool) *TwapSliceFillCreate {
	tsfc.mutation.SetCrossed(b)
	return tsfc
}

// SetFee sets the "fee" field.
func (tsfc *TwapSliceFillCreate) SetFee(s string) *TwapSliceFillCreate {
	tsfc.mutation.SetFee(s)
	return tsfc
}

// SetOid sets the "oid" field.
func (tsfc *TwapSliceFillCreate) SetOid(i int64) *TwapSliceFillCreate {
	tsfc.mutation.SetOid(i)
	return tsfc
}

// SetTid sets the "tid" field.
func (tsfc *TwapSliceFillCreate) SetTid(i int64) *TwapSliceFillCreate {
	tsfc.mutation.SetTid(i)
	return tsfc
}

// SetTwapID sets the "twap_id" field.
func (tsfc *TwapSliceFillCreate) SetTwapID(i int64) *TwapSliceFillCreate {
	tsfc.mutation.SetTwapID(i)
	return tsfc
}

// SetFeeToken sets the "fee_token" field.
func (tsfc *TwapSliceFillCreate) SetFeeToken(s string) *TwapSliceFillCreate {
	tsfc.mutation.SetFeeToken(s)
	return tsfc
}

// SetBuilderFee sets the "builder_fee" field.
func (tsfc *TwapSliceFillCreate) SetBuilderFee(s string) *TwapSliceFillCreate {
	tsfc.mutation.SetBuilderFee(s)
	return tsfc
}

// SetNillableBuilderFee sets the "builder_fee" field if the given value is not nil.
func (tsfc *TwapSliceFillCreate) SetNillableBuilderFee(s *string) *TwapSliceFillCreate {
	if s != nil {
		tsfc.SetBuilderFee(*s)
	}
	return tsfc
}

// Mutation returns the TwapSliceFillMutation object of the builder.
func (tsfc *TwapSliceFillCreate) Mutation() *TwapSliceFillMutation {
	return tsfc.mutation
}

// Save creates the TwapSliceFill in the database.
func (tsfc *TwapSliceFillCreate) Save(ctx context.Context) (*TwapSliceFill, error) {
	return withHooks(ctx, tsfc.sqlSave, tsfc.mutation, tsfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tsfc *TwapSliceFillCreate) SaveX(ctx context.Context) *TwapSliceFill {
	v, err := tsfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsfc *TwapSliceFillCreate) Exec(ctx context.Context) error {
	_, err := tsfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsfc *TwapSliceFillCreate) ExecX(ctx context.Context) {
	if err := tsfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsfc *TwapSliceFillCreate) check() error {
	if _, ok := tsfc.mutation.Coin(); !ok {
		return &ValidationError{Name: "coin", err: errors.New(`ent: missing required field "TwapSliceFill.coin"`)}
	}
	if _, ok := tsfc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "TwapSliceFill.address"`)}
	}
	if _, ok := tsfc.mutation.Px(); !ok {
		return &ValidationError{Name: "px", err: errors.New(`ent: missing required field "TwapSliceFill.px"`)}
	}
	if _, ok := tsfc.mutation.Sz(); !ok {
		return &ValidationError{Name: "sz", err: errors.New(`ent: missing required field "TwapSliceFill.sz"`)}
	}
	if _, ok := tsfc.mutation.Side(); !ok {
		return &ValidationError{Name: "side", err: errors.New(`ent: missing required field "TwapSliceFill.side"`)}
	}
	if _, ok := tsfc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "TwapSliceFill.time"`)}
	}
	if _, ok := tsfc.mutation.StartPosition(); !ok {
		return &ValidationError{Name: "start_position", err: errors.New(`ent: missing required field "TwapSliceFill.start_position"`)}
	}
	if _, ok := tsfc.mutation.ClosedPnl(); !ok {
		return &ValidationError{Name: "closed_pnl", err: errors.New(`ent: missing required field "TwapSliceFill.closed_pnl"`)}
	}
	if _, ok := tsfc.mutation.Dir(); !ok {
		return &ValidationError{Name: "dir", err: errors.New(`ent: missing required field "TwapSliceFill.dir"`)}
	}
	if _, ok := tsfc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "TwapSliceFill.hash"`)}
	}
	if _, ok := tsfc.mutation.Crossed(); !ok {
		return &ValidationError{Name: "crossed", err: errors.New(`ent: missing required field "TwapSliceFill.crossed"`)}
	}
	if _, ok := tsfc.mutation.Fee(); !ok {
		return &ValidationError{Name: "fee", err: errors.New(`ent: missing required field "TwapSliceFill.fee"`)}
	}
	if _, ok := tsfc.mutation.Oid(); !ok {
		return &ValidationError{Name: "oid", err: errors.New(`ent: missing required field "TwapSliceFill.oid"`)}
	}
	if _, ok := tsfc.mutation.Tid(); !ok {
		return &ValidationError{Name: "tid", err: errors.New(`ent: missing required field "TwapSliceFill.tid"`)}
	}
	if _, ok := tsfc.mutation.TwapID(); !ok {
		return &ValidationError{Name: "twap_id", err: errors.New(`ent: missing required field "TwapSliceFill.twap_id"`)}
	}
	if _, ok := tsfc.mutation.FeeToken(); !ok {
		return &ValidationError{Name: "fee_token", err: errors.New(`ent: missing required field "TwapSliceFill.fee_token"`)}
	}
	return nil
}

func (tsfc *TwapSliceFillCreate) sqlSave(ctx context.Context) (*TwapSliceFill, error) {
	if err := tsfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tsfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tsfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tsfc.mutation.id = &_node.ID
	tsfc.mutation.done = true
	return _node, nil
}

func (tsfc *TwapSliceFillCreate) createSpec() (*TwapSliceFill, *sqlgraph.CreateSpec) {
	var (
		_node = &TwapSliceFill{config: tsfc.config}
		_spec = sqlgraph.NewCreateSpec(twapslicefill.Table, sqlgraph.NewFieldSpec(twapslicefill.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tsfc.conflict
	if value, ok := tsfc.mutation.Coin(); ok {
		_spec.SetField(twapslicefill.FieldCoin, field.TypeString, value)
		_node.Coin = value
	}
	if value, ok := tsfc.mutation.Address(); ok {
		_spec.SetField(twapslicefill.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := tsfc.mutation.Px(); ok {
		_spec.SetField(twapslicefill.FieldPx, field.TypeString, value)
		_node.Px = value
	}
	if value, ok := tsfc.mutation.Sz(); ok {
		_spec.SetField(twapslicefill.FieldSz, field.TypeString, value)
		_node.Sz = value
	}
	if value, ok := tsfc.mutation.Side(); ok {
		_spec.SetField(twapslicefill.FieldSide, field.TypeString, value)
		_node.Side = value
	}
	if value, ok := tsfc.mutation.Time(); ok {
		_spec.SetField(twapslicefill.FieldTime, field.TypeInt64, value)
		_node.Time = value
	}
	if value, ok := tsfc.mutation.StartPosition(); ok {
		_spec.SetField(twapslicefill.FieldStartPosition, field.TypeString, value)
		_node.StartPosition = value
	}
	if value, ok := tsfc.mutation.ClosedPnl(); ok {
		_spec.SetField(twapslicefill.FieldClosedPnl, field.TypeString, value)
		_node.ClosedPnl = value
	}
	if value, ok := tsfc.mutation.Dir(); ok {
		_spec.SetField(twapslicefill.FieldDir, field.TypeString, value)
		_node.Dir = value
	}
	if value, ok := tsfc.mutation.Hash(); ok {
		_spec.SetField(twapslicefill.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := tsfc.mutation.Crossed(); ok {
		_spec.SetField(twapslicefill.FieldCrossed, field.TypeBool, value)
		_node.Crossed = value
	}
	if value, ok := tsfc.mutation.Fee(); ok {
		_spec.SetField(twapslicefill.FieldFee, field.TypeString, value)
		_node.Fee = value
	}
	if value, ok := tsfc.mutation.Oid(); ok {
		_spec.SetField(twapslicefill.FieldOid, field.TypeInt64, value)
		_node.Oid = value
	}
	if value, ok := tsfc.mutation.Tid(); ok {
		_spec.SetField(twapslicefill.FieldTid, field.TypeInt64, value)
		_node.Tid = value
	}
	if value, ok := tsfc.mutation.TwapID(); ok {
		_spec.SetField(twapslicefill.FieldTwapID, field.TypeInt64, value)
		_node.TwapID = value
	}
	if value, ok := tsfc.mutation.FeeToken(); ok {
		_spec.SetField(twapslicefill.FieldFeeToken, field.TypeString, value)
		_node.FeeToken = value
	}
	if value, ok := tsfc.mutation.BuilderFee(); ok {
		_spec.SetField(twapslicefill.FieldBuilderFee, field.TypeString, value)
		_node.BuilderFee = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TwapSliceFill.Create().
//		SetCoin(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TwapSliceFillUpsert) {
//			SetCoin(v+v).
//		}).
//		Exec(ctx)
func (tsfc *TwapSliceFillCreate) OnConflict(opts ...sql.ConflictOption) *TwapSliceFillUpsertOne {
	tsfc.conflict = opts
	return &TwapSliceFillUpsertOne{
		create: tsfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TwapSliceFill.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tsfc *TwapSliceFillCreate) OnConflictColumns(columns ...string) *TwapSliceFillUpsertOne {
	tsfc.conflict = append(tsfc.conflict, sql.ConflictColumns(columns...))
	return &TwapSliceFillUpsertOne{
		create: tsfc,
	}
}

type (
	// TwapSliceFillUpsertOne is the builder for "upsert"-ing
	//  one TwapSliceFill node.
	TwapSliceFillUpsertOne struct {
		create *TwapSliceFillCreate
	}

	// TwapSliceFillUpsert is the "OnConflict" setter.
	TwapSliceFillUpsert struct {
		*sql.UpdateSet
	}
)

// SetCoin sets the "coin" field.
func (u *TwapSliceFillUpsert) SetCoin(v string) *TwapSliceFillUpsert {
	u.Set(twapslicefill.FieldCoin, v)
	return u
}

// UpdateCoin sets the "coin" field to the value that was provided on create.
func (u *TwapSliceFillUpsert) UpdateCoin() *TwapSliceFillUpsert {
	u.SetExcluded(twapslicefill.FieldCoin)
	return u
}

// SetAddress sets the "address" field.
func (u *TwapSliceFillUpsert) SetAddress(v string) *TwapSliceFillUpsert {
	u.Set(twapslicefill.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *TwapSliceFillUpsert) UpdateAddress() *TwapSliceFillUpsert {
	u.SetExcluded(twapslicefill.FieldAddress)
	return u
}

// SetPx sets the "px" field.
func (u *TwapSliceFillUpsert) SetPx(v string) *TwapSliceFillUpsert {
	u.Set(twapslicefill.FieldPx, v)
	return u
}

// UpdatePx sets the "px" field to the value that was provided on create.
func (u *TwapSliceFillUpsert) UpdatePx() *TwapSliceFillUpsert {
	u.SetExcluded(twapslicefill.FieldPx)
	return u
}

// SetSz sets the "sz" field.
func (u *TwapSliceFillUpsert) SetSz(v string) *TwapSliceFillUpsert {
	u.Set(twapslicefill.FieldSz, v)
	return u
}

// UpdateSz sets the "sz" field to the value that was provided on create.
func (u *TwapSliceFillUpsert) UpdateSz() *TwapSliceFillUpsert {
	u.SetExcluded(twapslicefill.FieldSz)
	return u
}

// SetSide sets the "side" field.
func (u *TwapSliceFillUpsert) SetSide(v string) *TwapSliceFillUpsert {
	u.Set(twapslicefill.FieldSide, v)
	return u
}

// UpdateSide sets the "side" field to the value that was provided on create.
func (u *TwapSliceFillUpsert) UpdateSide() *TwapSliceFillUpsert {
	u.SetExcluded(twapslicefill.FieldSide)
	return u
}

// SetTime sets the "time" field.
func (u *TwapSliceFillUpsert) SetTime(v int64) *TwapSliceFillUpsert {
	u.Set(twapslicefill.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *TwapSliceFillUpsert) UpdateTime() *TwapSliceFillUpsert {
	u.SetExcluded(twapslicefill.FieldTime)
	return u
}

// AddTime adds v to the "time" field.
func (u *TwapSliceFillUpsert) AddTime(v int64) *TwapSliceFillUpsert {
	u.Add(twapslicefill.FieldTime, v)
	return u
}

// SetStartPosition sets the "start_position" field.
func (u *TwapSliceFillUpsert) SetStartPosition(v string) *TwapSliceFillUpsert {
	u.Set(twapslicefill.FieldStartPosition, v)
	return u
}

// UpdateStartPosition sets the "start_position" field to the value that was provided on create.
func (u *TwapSliceFillUpsert) UpdateStartPosition() *TwapSliceFillUpsert {
	u.SetExcluded(twapslicefill.FieldStartPosition)
	return u
}

// SetClosedPnl sets the "closed_pnl" field.
func (u *TwapSliceFillUpsert) SetClosedPnl(v string) *TwapSliceFillUpsert {
	u.Set(twapslicefill.FieldClosedPnl, v)
	return u
}

// UpdateClosedPnl sets the "closed_pnl" field to the value that was provided on create.
func (u *TwapSliceFillUpsert) UpdateClosedPnl() *TwapSliceFillUpsert {
	u.SetExcluded(twapslicefill.FieldClosedPnl)
	return u
}

// SetDir sets the "dir" field.
func (u *TwapSliceFillUpsert) SetDir(v string) *TwapSliceFillUpsert {
	u.Set(twapslicefill.FieldDir, v)
	return u
}

// UpdateDir sets the "dir" field to the value that was provided on create.
func (u *TwapSliceFillUpsert) UpdateDir() *TwapSliceFillUpsert {
	u.SetExcluded(twapslicefill.FieldDir)
	return u
}

// SetHash sets the "hash" field.
func (u *TwapSliceFillUpsert) SetHash(v string) *TwapSliceFillUpsert {
	u.Set(twapslicefill.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *TwapSliceFillUpsert) UpdateHash() *TwapSliceFillUpsert {
	u.SetExcluded(twapslicefill.FieldHash)
	return u
}

// SetCrossed sets the "crossed" field.
func (u *TwapSliceFillUpsert) SetCrossed(v bool) *TwapSliceFillUpsert {
	u.Set(twapslicefill.FieldCrossed, v)
	return u
}

// UpdateCrossed sets the "crossed" field to the value that was provided on create.
func (u *TwapSliceFillUpsert) UpdateCrossed() *TwapSliceFillUpsert {
	u.SetExcluded(twapslicefill.FieldCrossed)
	return u
}

// SetFee sets the "fee" field.
func (u *TwapSliceFillUpsert) SetFee(v string) *TwapSliceFillUpsert {
	u.Set(twapslicefill.FieldFee, v)
	return u
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *TwapSliceFillUpsert) UpdateFee() *TwapSliceFillUpsert {
	u.SetExcluded(twapslicefill.FieldFee)
	return u
}

// SetOid sets the "oid" field.
func (u *TwapSliceFillUpsert) SetOid(v int64) *TwapSliceFillUpsert {
	u.Set(twapslicefill.FieldOid, v)
	return u
}

// UpdateOid sets the "oid" field to the value that was provided on create.
func (u *TwapSliceFillUpsert) UpdateOid() *TwapSliceFillUpsert {
	u.SetExcluded(twapslicefill.FieldOid)
	return u
}

// AddOid adds v to the "oid" field.
func (u *TwapSliceFillUpsert) AddOid(v int64) *TwapSliceFillUpsert {
	u.Add(twapslicefill.FieldOid, v)
	return u
}

// SetTid sets the "tid" field.
func (u *TwapSliceFillUpsert) SetTid(v int64) *TwapSliceFillUpsert {
	u.Set(twapslicefill.FieldTid, v)
	return u
}

// UpdateTid sets the "tid" field to the value that was provided on create.
func (u *TwapSliceFillUpsert) UpdateTid() *TwapSliceFillUpsert {
	u.SetExcluded(twapslicefill.FieldTid)
	return u
}

// AddTid adds v to the "tid" field.
func (u *TwapSliceFillUpsert) AddTid(v int64) *TwapSliceFillUpsert {
	u.Add(twapslicefill.FieldTid, v)
	return u
}

// SetTwapID sets the "twap_id" field.
func (u *TwapSliceFillUpsert) SetTwapID(v int64) *TwapSliceFillUpsert {
	u.Set(twapslicefill.FieldTwapID, v)
	return u
}

// UpdateTwapID sets the "twap_id" field to the value that was provided on create.
func (u *TwapSliceFillUpsert) UpdateTwapID() *TwapSliceFillUpsert {
	u.SetExcluded(twapslicefill.FieldTwapID)
	return u
}

// AddTwapID adds v to the "twap_id" field.
func (u *TwapSliceFillUpsert) AddTwapID(v int64) *TwapSliceFillUpsert {
	u.Add(twapslicefill.FieldTwapID, v)
	return u
}

// SetFeeToken sets the "fee_token" field.
func (u *TwapSliceFillUpsert) SetFeeToken(v string) *TwapSliceFillUpsert {
	u.Set(twapslicefill.FieldFeeToken, v)
	return u
}

// UpdateFeeToken sets the "fee_token" field to the value that was provided on create.
func (u *TwapSliceFillUpsert) UpdateFeeToken() *TwapSliceFillUpsert {
	u.SetExcluded(twapslicefill.FieldFeeToken)
	return u
}

// SetBuilderFee sets the "builder_fee" field.
func (u *TwapSliceFillUpsert) SetBuilderFee(v string) *TwapSliceFillUpsert {
	u.Set(twapslicefill.FieldBuilderFee, v)
	return u
}

// UpdateBuilderFee sets the "builder_fee" field to the value that was provided on create.
func (u *TwapSliceFillUpsert) UpdateBuilderFee() *TwapSliceFillUpsert {
	u.SetExcluded(twapslicefill.FieldBuilderFee)
	return u
}

// ClearBuilderFee clears the value of the "builder_fee" field.
func (u *TwapSliceFillUpsert) ClearBuilderFee() *TwapSliceFillUpsert {
	u.SetNull(twapslicefill.FieldBuilderFee)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TwapSliceFill.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TwapSliceFillUpsertOne) UpdateNewValues() *TwapSliceFillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TwapSliceFill.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TwapSliceFillUpsertOne) Ignore() *TwapSliceFillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TwapSliceFillUpsertOne) DoNothing() *TwapSliceFillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TwapSliceFillCreate.OnConflict
// documentation for more info.
func (u *TwapSliceFillUpsertOne) Update(set func(*TwapSliceFillUpsert)) *TwapSliceFillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TwapSliceFillUpsert{UpdateSet: update})
	}))
	return u
}

// SetCoin sets the "coin" field.
func (u *TwapSliceFillUpsertOne) SetCoin(v string) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetCoin(v)
	})
}

// UpdateCoin sets the "coin" field to the value that was provided on create.
func (u *TwapSliceFillUpsertOne) UpdateCoin() *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateCoin()
	})
}

// SetAddress sets the "address" field.
func (u *TwapSliceFillUpsertOne) SetAddress(v string) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *TwapSliceFillUpsertOne) UpdateAddress() *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateAddress()
	})
}

// SetPx sets the "px" field.
func (u *TwapSliceFillUpsertOne) SetPx(v string) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetPx(v)
	})
}

// UpdatePx sets the "px" field to the value that was provided on create.
func (u *TwapSliceFillUpsertOne) UpdatePx() *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdatePx()
	})
}

// SetSz sets the "sz" field.
func (u *TwapSliceFillUpsertOne) SetSz(v string) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetSz(v)
	})
}

// UpdateSz sets the "sz" field to the value that was provided on create.
func (u *TwapSliceFillUpsertOne) UpdateSz() *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateSz()
	})
}

// SetSide sets the "side" field.
func (u *TwapSliceFillUpsertOne) SetSide(v string) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetSide(v)
	})
}

// UpdateSide sets the "side" field to the value that was provided on create.
func (u *TwapSliceFillUpsertOne) UpdateSide() *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateSide()
	})
}

// SetTime sets the "time" field.
func (u *TwapSliceFillUpsertOne) SetTime(v int64) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *TwapSliceFillUpsertOne) AddTime(v int64) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *TwapSliceFillUpsertOne) UpdateTime() *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateTime()
	})
}

// SetStartPosition sets the "start_position" field.
func (u *TwapSliceFillUpsertOne) SetStartPosition(v string) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetStartPosition(v)
	})
}

// UpdateStartPosition sets the "start_position" field to the value that was provided on create.
func (u *TwapSliceFillUpsertOne) UpdateStartPosition() *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateStartPosition()
	})
}

// SetClosedPnl sets the "closed_pnl" field.
func (u *TwapSliceFillUpsertOne) SetClosedPnl(v string) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetClosedPnl(v)
	})
}

// UpdateClosedPnl sets the "closed_pnl" field to the value that was provided on create.
func (u *TwapSliceFillUpsertOne) UpdateClosedPnl() *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateClosedPnl()
	})
}

// SetDir sets the "dir" field.
func (u *TwapSliceFillUpsertOne) SetDir(v string) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetDir(v)
	})
}

// UpdateDir sets the "dir" field to the value that was provided on create.
func (u *TwapSliceFillUpsertOne) UpdateDir() *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateDir()
	})
}

// SetHash sets the "hash" field.
func (u *TwapSliceFillUpsertOne) SetHash(v string) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *TwapSliceFillUpsertOne) UpdateHash() *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateHash()
	})
}

// SetCrossed sets the "crossed" field.
func (u *TwapSliceFillUpsertOne) SetCrossed(v bool) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetCrossed(v)
	})
}

// UpdateCrossed sets the "crossed" field to the value that was provided on create.
func (u *TwapSliceFillUpsertOne) UpdateCrossed() *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateCrossed()
	})
}

// SetFee sets the "fee" field.
func (u *TwapSliceFillUpsertOne) SetFee(v string) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *TwapSliceFillUpsertOne) UpdateFee() *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateFee()
	})
}

// SetOid sets the "oid" field.
func (u *TwapSliceFillUpsertOne) SetOid(v int64) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetOid(v)
	})
}

// AddOid adds v to the "oid" field.
func (u *TwapSliceFillUpsertOne) AddOid(v int64) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.AddOid(v)
	})
}

// UpdateOid sets the "oid" field to the value that was provided on create.
func (u *TwapSliceFillUpsertOne) UpdateOid() *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateOid()
	})
}

// SetTid sets the "tid" field.
func (u *TwapSliceFillUpsertOne) SetTid(v int64) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetTid(v)
	})
}

// AddTid adds v to the "tid" field.
func (u *TwapSliceFillUpsertOne) AddTid(v int64) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.AddTid(v)
	})
}

// UpdateTid sets the "tid" field to the value that was provided on create.
func (u *TwapSliceFillUpsertOne) UpdateTid() *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateTid()
	})
}

// SetTwapID sets the "twap_id" field.
func (u *TwapSliceFillUpsertOne) SetTwapID(v int64) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetTwapID(v)
	})
}

// AddTwapID adds v to the "twap_id" field.
func (u *TwapSliceFillUpsertOne) AddTwapID(v int64) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.AddTwapID(v)
	})
}

// UpdateTwapID sets the "twap_id" field to the value that was provided on create.
func (u *TwapSliceFillUpsertOne) UpdateTwapID() *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateTwapID()
	})
}

// SetFeeToken sets the "fee_token" field.
func (u *TwapSliceFillUpsertOne) SetFeeToken(v string) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetFeeToken(v)
	})
}

// UpdateFeeToken sets the "fee_token" field to the value that was provided on create.
func (u *TwapSliceFillUpsertOne) UpdateFeeToken() *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateFeeToken()
	})
}

// SetBuilderFee sets the "builder_fee" field.
func (u *TwapSliceFillUpsertOne) SetBuilderFee(v string) *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetBuilderFee(v)
	})
}

// UpdateBuilderFee sets the "builder_fee" field to the value that was provided on create.
func (u *TwapSliceFillUpsertOne) UpdateBuilderFee() *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateBuilderFee()
	})
}

// ClearBuilderFee clears the value of the "builder_fee" field.
func (u *TwapSliceFillUpsertOne) ClearBuilderFee() *TwapSliceFillUpsertOne {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.ClearBuilderFee()
	})
}

// Exec executes the query.
func (u *TwapSliceFillUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TwapSliceFillCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TwapSliceFillUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TwapSliceFillUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TwapSliceFillUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TwapSliceFillCreateBulk is the builder for creating many TwapSliceFill entities in bulk.
type TwapSliceFillCreateBulk struct {
	config
	err      error
	builders []*TwapSliceFillCreate
	conflict []sql.ConflictOption
}

// Save creates the TwapSliceFill entities in the database.
func (tsfcb *TwapSliceFillCreateBulk) Save(ctx context.Context) ([]*TwapSliceFill, error) {
	if tsfcb.err != nil {
		return nil, tsfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tsfcb.builders))
	nodes := make([]*TwapSliceFill, len(tsfcb.builders))
	mutators := make([]Mutator, len(tsfcb.builders))
	for i := range tsfcb.builders {
		func(i int, root context.Context) {
			builder := tsfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TwapSliceFillMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tsfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tsfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tsfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tsfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tsfcb *TwapSliceFillCreateBulk) SaveX(ctx context.Context) []*TwapSliceFill {
	v, err := tsfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsfcb *TwapSliceFillCreateBulk) Exec(ctx context.Context) error {
	_, err := tsfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsfcb *TwapSliceFillCreateBulk) ExecX(ctx context.Context) {
	if err := tsfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TwapSliceFill.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TwapSliceFillUpsert) {
//			SetCoin(v+v).
//		}).
//		Exec(ctx)
func (tsfcb *TwapSliceFillCreateBulk) OnConflict(opts ...sql.ConflictOption) *TwapSliceFillUpsertBulk {
	tsfcb.conflict = opts
	return &TwapSliceFillUpsertBulk{
		create: tsfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TwapSliceFill.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tsfcb *TwapSliceFillCreateBulk) OnConflictColumns(columns ...string) *TwapSliceFillUpsertBulk {
	tsfcb.conflict = append(tsfcb.conflict, sql.ConflictColumns(columns...))
	return &TwapSliceFillUpsertBulk{
		create: tsfcb,
	}
}

// TwapSliceFillUpsertBulk is the builder for "upsert"-ing
// a bulk of TwapSliceFill nodes.
type TwapSliceFillUpsertBulk struct {
	create *TwapSliceFillCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TwapSliceFill.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TwapSliceFillUpsertBulk) UpdateNewValues() *TwapSliceFillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TwapSliceFill.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TwapSliceFillUpsertBulk) Ignore() *TwapSliceFillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TwapSliceFillUpsertBulk) DoNothing() *TwapSliceFillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TwapSliceFillCreateBulk.OnConflict
// documentation for more info.
func (u *TwapSliceFillUpsertBulk) Update(set func(*TwapSliceFillUpsert)) *TwapSliceFillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TwapSliceFillUpsert{UpdateSet: update})
	}))
	return u
}

// SetCoin sets the "coin" field.
func (u *TwapSliceFillUpsertBulk) SetCoin(v string) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetCoin(v)
	})
}

// UpdateCoin sets the "coin" field to the value that was provided on create.
func (u *TwapSliceFillUpsertBulk) UpdateCoin() *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateCoin()
	})
}

// SetAddress sets the "address" field.
func (u *TwapSliceFillUpsertBulk) SetAddress(v string) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *TwapSliceFillUpsertBulk) UpdateAddress() *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateAddress()
	})
}

// SetPx sets the "px" field.
func (u *TwapSliceFillUpsertBulk) SetPx(v string) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetPx(v)
	})
}

// UpdatePx sets the "px" field to the value that was provided on create.
func (u *TwapSliceFillUpsertBulk) UpdatePx() *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdatePx()
	})
}

// SetSz sets the "sz" field.
func (u *TwapSliceFillUpsertBulk) SetSz(v string) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetSz(v)
	})
}

// UpdateSz sets the "sz" field to the value that was provided on create.
func (u *TwapSliceFillUpsertBulk) UpdateSz() *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateSz()
	})
}

// SetSide sets the "side" field.
func (u *TwapSliceFillUpsertBulk) SetSide(v string) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetSide(v)
	})
}

// UpdateSide sets the "side" field to the value that was provided on create.
func (u *TwapSliceFillUpsertBulk) UpdateSide() *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateSide()
	})
}

// SetTime sets the "time" field.
func (u *TwapSliceFillUpsertBulk) SetTime(v int64) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *TwapSliceFillUpsertBulk) AddTime(v int64) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *TwapSliceFillUpsertBulk) UpdateTime() *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateTime()
	})
}

// SetStartPosition sets the "start_position" field.
func (u *TwapSliceFillUpsertBulk) SetStartPosition(v string) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetStartPosition(v)
	})
}

// UpdateStartPosition sets the "start_position" field to the value that was provided on create.
func (u *TwapSliceFillUpsertBulk) UpdateStartPosition() *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateStartPosition()
	})
}

// SetClosedPnl sets the "closed_pnl" field.
func (u *TwapSliceFillUpsertBulk) SetClosedPnl(v string) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetClosedPnl(v)
	})
}

// UpdateClosedPnl sets the "closed_pnl" field to the value that was provided on create.
func (u *TwapSliceFillUpsertBulk) UpdateClosedPnl() *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateClosedPnl()
	})
}

// SetDir sets the "dir" field.
func (u *TwapSliceFillUpsertBulk) SetDir(v string) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetDir(v)
	})
}

// UpdateDir sets the "dir" field to the value that was provided on create.
func (u *TwapSliceFillUpsertBulk) UpdateDir() *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateDir()
	})
}

// SetHash sets the "hash" field.
func (u *TwapSliceFillUpsertBulk) SetHash(v string) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *TwapSliceFillUpsertBulk) UpdateHash() *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateHash()
	})
}

// SetCrossed sets the "crossed" field.
func (u *TwapSliceFillUpsertBulk) SetCrossed(v bool) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetCrossed(v)
	})
}

// UpdateCrossed sets the "crossed" field to the value that was provided on create.
func (u *TwapSliceFillUpsertBulk) UpdateCrossed() *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateCrossed()
	})
}

// SetFee sets the "fee" field.
func (u *TwapSliceFillUpsertBulk) SetFee(v string) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *TwapSliceFillUpsertBulk) UpdateFee() *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateFee()
	})
}

// SetOid sets the "oid" field.
func (u *TwapSliceFillUpsertBulk) SetOid(v int64) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetOid(v)
	})
}

// AddOid adds v to the "oid" field.
func (u *TwapSliceFillUpsertBulk) AddOid(v int64) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.AddOid(v)
	})
}

// UpdateOid sets the "oid" field to the value that was provided on create.
func (u *TwapSliceFillUpsertBulk) UpdateOid() *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateOid()
	})
}

// SetTid sets the "tid" field.
func (u *TwapSliceFillUpsertBulk) SetTid(v int64) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetTid(v)
	})
}

// AddTid adds v to the "tid" field.
func (u *TwapSliceFillUpsertBulk) AddTid(v int64) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.AddTid(v)
	})
}

// UpdateTid sets the "tid" field to the value that was provided on create.
func (u *TwapSliceFillUpsertBulk) UpdateTid() *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateTid()
	})
}

// SetTwapID sets the "twap_id" field.
func (u *TwapSliceFillUpsertBulk) SetTwapID(v int64) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetTwapID(v)
	})
}

// AddTwapID adds v to the "twap_id" field.
func (u *TwapSliceFillUpsertBulk) AddTwapID(v int64) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.AddTwapID(v)
	})
}

// UpdateTwapID sets the "twap_id" field to the value that was provided on create.
func (u *TwapSliceFillUpsertBulk) UpdateTwapID() *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateTwapID()
	})
}

// SetFeeToken sets the "fee_token" field.
func (u *TwapSliceFillUpsertBulk) SetFeeToken(v string) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetFeeToken(v)
	})
}

// UpdateFeeToken sets the "fee_token" field to the value that was provided on create.
func (u *TwapSliceFillUpsertBulk) UpdateFeeToken() *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateFeeToken()
	})
}

// SetBuilderFee sets the "builder_fee" field.
func (u *TwapSliceFillUpsertBulk) SetBuilderFee(v string) *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.SetBuilderFee(v)
	})
}

// UpdateBuilderFee sets the "builder_fee" field to the value that was provided on create.
func (u *TwapSliceFillUpsertBulk) UpdateBuilderFee() *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.UpdateBuilderFee()
	})
}

// ClearBuilderFee clears the value of the "builder_fee" field.
func (u *TwapSliceFillUpsertBulk) ClearBuilderFee() *TwapSliceFillUpsertBulk {
	return u.Update(func(s *TwapSliceFillUpsert) {
		s.ClearBuilderFee()
	})
}

// Exec executes the query.
func (u *TwapSliceFillUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TwapSliceFillCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TwapSliceFillCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TwapSliceFillUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
