// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/predicate"
	"github.com/yoshiso/hypersync/ent/twapslicefill"
)

// TwapSliceFillDelete is the builder for deleting a TwapSliceFill entity.
type TwapSliceFillDelete struct {
	config
	hooks    []Hook
	mutation *TwapSliceFillMutation
}

// Where appends a list predicates to the TwapSliceFillDelete builder.
func (tsfd *TwapSliceFillDelete) Where(ps ...predicate.TwapSliceFill) *TwapSliceFillDelete {
	tsfd.mutation.Where(ps...)
	return tsfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tsfd *TwapSliceFillDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tsfd.sqlExec, tsfd.mutation, tsfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tsfd *TwapSliceFillDelete) ExecX(ctx context.Context) int {
	n, err := tsfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tsfd *TwapSliceFillDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(twapslicefill.Table, sqlgraph.NewFieldSpec(twapslicefill.FieldID, field.TypeInt))
	if ps := tsfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tsfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tsfd.mutation.done = true
	return affected, err
}

// TwapSliceFillDeleteOne is the builder for deleting a single TwapSliceFill entity.
type TwapSliceFillDeleteOne struct {
	tsfd *TwapSliceFillDelete
}

// Where appends a list predicates to the TwapSliceFillDelete builder.
func (tsfdo *TwapSliceFillDeleteOne) Where(ps ...predicate.TwapSliceFill) *TwapSliceFillDeleteOne {
	tsfdo.tsfd.mutation.Where(ps...)
	return tsfdo
}

// Exec executes the deletion query.
func (tsfdo *TwapSliceFillDeleteOne) Exec(ctx context.Context) error {
	n, err := tsfdo.tsfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{twapslicefill.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tsfdo *TwapSliceFillDeleteOne) ExecX(ctx context.Context) {
	if err := tsfdo.Exec(ctx); err != nil {
		panic(err)
	}
}
