// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/predicate"
	"github.com/yoshiso/hypersync/ent/twapslicefill"
)

// TwapSliceFillUpdate is the builder for updating TwapSliceFill entities.
type TwapSliceFillUpdate struct {
	config
	hooks    []Hook
	mutation *TwapSliceFillMutation
}

// Where appends a list predicates to the TwapSliceFillUpdate builder.
func (tsfu *TwapSliceFillUpdate) Where(ps ...predicate.TwapSliceFill) *TwapSliceFillUpdate {
	tsfu.mutation.Where(ps...)
	return tsfu
}

// SetCoin sets the "coin" field.
func (tsfu *TwapSliceFillUpdate) SetCoin(s string) *TwapSliceFillUpdate {
	tsfu.mutation.SetCoin(s)
	return tsfu
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (tsfu *TwapSliceFillUpdate) SetNillableCoin(s *string) *TwapSliceFillUpdate {
	if s != nil {
		tsfu.SetCoin(*s)
	}
	return tsfu
}

// SetAddress sets the "address" field.
func (tsfu *TwapSliceFillUpdate) SetAddress(s string) *TwapSliceFillUpdate {
	tsfu.mutation.SetAddress(s)
	return tsfu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (tsfu *TwapSliceFillUpdate) SetNillableAddress(s *string) *TwapSliceFillUpdate {
	if s != nil {
		tsfu.SetAddress(*s)
	}
	return tsfu
}

// SetPx sets the "px" field.
func (tsfu *TwapSliceFillUpdate) SetPx(s string) *TwapSliceFillUpdate {
	tsfu.mutation.SetPx(s)
	return tsfu
}

// SetNillablePx sets the "px" field if the given value is not nil.
func (tsfu *TwapSliceFillUpdate) SetNillablePx(s *string) *TwapSliceFillUpdate {
	if s != nil {
		tsfu.SetPx(*s)
	}
	return tsfu
}

// SetSz sets the "sz" field.
func (tsfu *TwapSliceFillUpdate) SetSz(s string) *TwapSliceFillUpdate {
	tsfu.mutation.SetSz(s)
	return tsfu
}

// SetNillableSz sets the "sz" field if the given value is not nil.
func (tsfu *TwapSliceFillUpdate) SetNillableSz(s *string) *TwapSliceFillUpdate {
	if s != nil {
		tsfu.SetSz(*s)
	}
	return tsfu
}

// SetSide sets the "side" field.
func (tsfu *TwapSliceFillUpdate) SetSide(s string) *TwapSliceFillUpdate {
	tsfu.mutation.SetSide(s)
	return tsfu
}

// SetNillableSide sets the "side" field if the given value is not nil.
func (tsfu *TwapSliceFillUpdate) SetNillableSide(s *string) *TwapSliceFillUpdate {
	if s != nil {
		tsfu.SetSide(*s)
	}
	return tsfu
}

// SetTime sets the "time" field.
func (tsfu *TwapSliceFillUpdate) SetTime(i int64) *TwapSliceFillUpdate {
	tsfu.mutation.ResetTime()
	tsfu.mutation.SetTime(i)
	return tsfu
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (tsfu *TwapSliceFillUpdate) SetNillableTime(i *int64) *TwapSliceFillUpdate {
	if i != nil {
		tsfu.SetTime(*i)
	}
	return tsfu
}

// AddTime adds i to the "time" field.
func (tsfu *TwapSliceFillUpdate) AddTime(i int64) *TwapSliceFillUpdate {
	tsfu.mutation.AddTime(i)
	return tsfu
}

// SetStartPosition sets the "start_position" field.
func (tsfu *TwapSliceFillUpdate) SetStartPosition(s string) *TwapSliceFillUpdate {
	tsfu.mutation.SetStartPosition(s)
	return tsfu
}

// SetNillableStartPosition sets the "start_position" field if the given value is not nil.
func (tsfu *TwapSliceFillUpdate) SetNillableStartPosition(s *string) *TwapSliceFillUpdate {
	if s != nil {
		tsfu.SetStartPosition(*s)
	}
	return tsfu
}

// SetClosedPnl sets the "closed_pnl" field.
func (tsfu *TwapSliceFillUpdate) SetClosedPnl(s string) *TwapSliceFillUpdate {
	tsfu.mutation.SetClosedPnl(s)
	return tsfu
}

// SetNillableClosedPnl sets the "closed_pnl" field if the given value is not nil.
func (tsfu *TwapSliceFillUpdate) SetNillableClosedPnl(s *string) *TwapSliceFillUpdate {
	if s != nil {
		tsfu.SetClosedPnl(*s)
	}
	return tsfu
}

// SetDir sets the "dir" field.
func (tsfu *TwapSliceFillUpdate) SetDir(s string) *TwapSliceFillUpdate {
	tsfu.mutation.SetDir(s)
	return tsfu
}

// SetNillableDir sets the "dir" field if the given value is not nil.
func (tsfu *TwapSliceFillUpdate) SetNillableDir(s *string) *TwapSliceFillUpdate {
	if s != nil {
		tsfu.SetDir(*s)
	}
	return tsfu
}

// SetHash sets the "hash" field.
func (tsfu *TwapSliceFillUpdate) SetHash(s string) *TwapSliceFillUpdate {
	tsfu.mutation.SetHash(s)
	return tsfu
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (tsfu *TwapSliceFillUpdate) SetNillableHash(s *string) *TwapSliceFillUpdate {
	if s != nil {
		tsfu.SetHash(*s)
	}
	return tsfu
}

// SetCrossed sets the "crossed" field.
func (tsfu *TwapSliceFillUpdate) SetCrossed(b bool) *TwapSliceFillUpdate {
	tsfu.mutation.SetCrossed(b)
	return tsfu
}

// SetNillableCrossed sets the "crossed" field if the given value is not nil.
func (tsfu *TwapSliceFillUpdate) SetNillableCrossed(b *bool) *TwapSliceFillUpdate {
	if b != nil {
		tsfu.SetCrossed(*b)
	}
	return tsfu
}

// SetFee sets the "fee" field.
func (tsfu *TwapSliceFillUpdate) SetFee(s string) *TwapSliceFillUpdate {
	tsfu.mutation.SetFee(s)
	return tsfu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (tsfu *TwapSliceFillUpdate) SetNillableFee(s *string) *TwapSliceFillUpdate {
	if s != nil {
		tsfu.SetFee(*s)
	}
	return tsfu
}

// SetOid sets the "oid" field.
func (tsfu *TwapSliceFillUpdate) SetOid(i int64) *TwapSliceFillUpdate {
	tsfu.mutation.ResetOid()
	tsfu.mutation.SetOid(i)
	return tsfu
}

// SetNillableOid sets the "oid" field if the given value is not nil.
func (tsfu *TwapSliceFillUpdate) SetNillableOid(i *int64) *TwapSliceFillUpdate {
	if i != nil {
		tsfu.SetOid(*i)
	}
	return tsfu
}

// AddOid adds i to the "oid" field.
func (tsfu *TwapSliceFillUpdate) AddOid(i int64) *TwapSliceFillUpdate {
	tsfu.mutation.AddOid(i)
	return tsfu
}

// SetTid sets the "tid" field.
func (tsfu *TwapSliceFillUpdate) SetTid(i int64) *TwapSliceFillUpdate {
	tsfu.mutation.ResetTid()
	tsfu.mutation.SetTid(i)
	return tsfu
}

// SetNillableTid sets the "tid" field if the given value is not nil.
func (tsfu *TwapSliceFillUpdate) SetNillableTid(i *int64) *TwapSliceFillUpdate {
	if i != nil {
		tsfu.SetTid(*i)
	}
	return tsfu
}

// AddTid adds i to the "tid" field.
func (tsfu *TwapSliceFillUpdate) AddTid(i int64) *TwapSliceFillUpdate {
	tsfu.mutation.AddTid(i)
	return tsfu
}

// SetTwapID sets the "twap_id" field.
func (tsfu *TwapSliceFillUpdate) SetTwapID(i int64) *TwapSliceFillUpdate {
	tsfu.mutation.ResetTwapID()
	tsfu.mutation.SetTwapID(i)
	return tsfu
}

// SetNillableTwapID sets the "twap_id" field if the given value is not nil.
func (tsfu *TwapSliceFillUpdate) SetNillableTwapID(i *int64) *TwapSliceFillUpdate {
	if i != nil {
		tsfu.SetTwapID(*i)
	}
	return tsfu
}

// AddTwapID adds i to the "twap_id" field.
func (tsfu *TwapSliceFillUpdate) AddTwapID(i int64) *TwapSliceFillUpdate {
	tsfu.mutation.AddTwapID(i)
	return tsfu
}

// SetFeeToken sets the "fee_token" field.
func (tsfu *TwapSliceFillUpdate) SetFeeToken(s string) *TwapSliceFillUpdate {
	tsfu.mutation.SetFeeToken(s)
	return tsfu
}

// SetNillableFeeToken sets the "fee_token" field if the given value is not nil.
func (tsfu *TwapSliceFillUpdate) SetNillableFeeToken(s *string) *TwapSliceFillUpdate {
	if s != nil {
		tsfu.SetFeeToken(*s)
	}
	return tsfu
}

// SetBuilderFee sets the "builder_fee" field.
func (tsfu *TwapSliceFillUpdate) SetBuilderFee(s string) *TwapSliceFillUpdate {
	tsfu.mutation.SetBuilderFee(s)
	return tsfu
}

// SetNillableBuilderFee sets the "builder_fee" field if the given value is not nil.
func (tsfu *TwapSliceFillUpdate) SetNillableBuilderFee(s *string) *TwapSliceFillUpdate {
	if s != nil {
		tsfu.SetBuilderFee(*s)
	}
	return tsfu
}

// ClearBuilderFee clears the value of the "builder_fee" field.
func (tsfu *TwapSliceFillUpdate) ClearBuilderFee() *TwapSliceFillUpdate {
	tsfu.mutation.ClearBuilderFee()
	return tsfu
}

// Mutation returns the TwapSliceFillMutation object of the builder.
func (tsfu *TwapSliceFillUpdate) Mutation() *TwapSliceFillMutation {
	return tsfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tsfu *TwapSliceFillUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tsfu.sqlSave, tsfu.mutation, tsfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsfu *TwapSliceFillUpdate) SaveX(ctx context.Context) int {
	affected, err := tsfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tsfu *TwapSliceFillUpdate) Exec(ctx context.Context) error {
	_, err := tsfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsfu *TwapSliceFillUpdate) ExecX(ctx context.Context) {
	if err := tsfu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tsfu *TwapSliceFillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(twapslicefill.Table, twapslicefill.Columns, sqlgraph.NewFieldSpec(twapslicefill.FieldID, field.TypeInt))
	if ps := tsfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsfu.mutation.Coin(); ok {
		_spec.SetField(twapslicefill.FieldCoin, field.TypeString, value)
	}
	if value, ok := tsfu.mutation.Address(); ok {
		_spec.SetField(twapslicefill.FieldAddress, field.TypeString, value)
	}
	if value, ok := tsfu.mutation.Px(); ok {
		_spec.SetField(twapslicefill.FieldPx, field.TypeString, value)
	}
	if value, ok := tsfu.mutation.Sz(); ok {
		_spec.SetField(twapslicefill.FieldSz, field.TypeString, value)
	}
	if value, ok := tsfu.mutation.Side(); ok {
		_spec.SetField(twapslicefill.FieldSide, field.TypeString, value)
	}
	if value, ok := tsfu.mutation.Time(); ok {
		_spec.SetField(twapslicefill.FieldTime, field.TypeInt64, value)
	}
	if value, ok := tsfu.mutation.AddedTime(); ok {
		_spec.AddField(twapslicefill.FieldTime, field.TypeInt64, value)
	}
	if value, ok := tsfu.mutation.StartPosition(); ok {
		_spec.SetField(twapslicefill.FieldStartPosition, field.TypeString, value)
	}
	if value, ok := tsfu.mutation.ClosedPnl(); ok {
		_spec.SetField(twapslicefill.FieldClosedPnl, field.TypeString, value)
	}
	if value, ok := tsfu.mutation.Dir(); ok {
		_spec.SetField(twapslicefill.FieldDir, field.TypeString, value)
	}
	if value, ok := tsfu.mutation.Hash(); ok {
		_spec.SetField(twapslicefill.FieldHash, field.TypeString, value)
	}
	if value, ok := tsfu.mutation.Crossed(); ok {
		_spec.SetField(twapslicefill.FieldCrossed, field.TypeBool, value)
	}
	if value, ok := tsfu.mutation.Fee(); ok {
		_spec.SetField(twapslicefill.FieldFee, field.TypeString, value)
	}
	if value, ok := tsfu.mutation.Oid(); ok {
		_spec.SetField(twapslicefill.FieldOid, field.TypeInt64, value)
	}
	if value, ok := tsfu.mutation.AddedOid(); ok {
		_spec.AddField(twapslicefill.FieldOid, field.TypeInt64, value)
	}
	if value, ok := tsfu.mutation.Tid(); ok {
		_spec.SetField(twapslicefill.FieldTid, field.TypeInt64, value)
	}
	if value, ok := tsfu.mutation.AddedTid(); ok {
		_spec.AddField(twapslicefill.FieldTid, field.TypeInt64, value)
	}
	if value, ok := tsfu.mutation.TwapID(); ok {
		_spec.SetField(twapslicefill.FieldTwapID, field.TypeInt64, value)
	}
	if value, ok := tsfu.mutation.AddedTwapID(); ok {
		_spec.AddField(twapslicefill.FieldTwapID, field.TypeInt64, value)
	}
	if value, ok := tsfu.mutation.FeeToken(); ok {
		_spec.SetField(twapslicefill.FieldFeeToken, field.TypeString, value)
	}
	if value, ok := tsfu.mutation.BuilderFee(); ok {
		_spec.SetField(twapslicefill.FieldBuilderFee, field.TypeString, value)
	}
	if tsfu.mutation.BuilderFeeCleared() {
		_spec.ClearField(twapslicefill.FieldBuilderFee, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tsfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twapslicefill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tsfu.mutation.done = true
	return n, nil
}

// TwapSliceFillUpdateOne is the builder for updating a single TwapSliceFill entity.
type TwapSliceFillUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TwapSliceFillMutation
}

// SetCoin sets the "coin" field.
func (tsfuo *TwapSliceFillUpdateOne) SetCoin(s string) *TwapSliceFillUpdateOne {
	tsfuo.mutation.SetCoin(s)
	return tsfuo
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (tsfuo *TwapSliceFillUpdateOne) SetNillableCoin(s *string) *TwapSliceFillUpdateOne {
	if s != nil {
		tsfuo.SetCoin(*s)
	}
	return tsfuo
}

// SetAddress sets the "address" field.
func (tsfuo *TwapSliceFillUpdateOne) SetAddress(s string) *TwapSliceFillUpdateOne {
	tsfuo.mutation.SetAddress(s)
	return tsfuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (tsfuo *TwapSliceFillUpdateOne) SetNillableAddress(s *string) *TwapSliceFillUpdateOne {
	if s != nil {
		tsfuo.SetAddress(*s)
	}
	return tsfuo
}

// SetPx sets the "px" field.
func (tsfuo *TwapSliceFillUpdateOne) SetPx(s string) *TwapSliceFillUpdateOne {
	tsfuo.mutation.SetPx(s)
	return tsfuo
}

// SetNillablePx sets the "px" field if the given value is not nil.
func (tsfuo *TwapSliceFillUpdateOne) SetNillablePx(s *string) *TwapSliceFillUpdateOne {
	if s != nil {
		tsfuo.SetPx(*s)
	}
	return tsfuo
}

// SetSz sets the "sz" field.
func (tsfuo *TwapSliceFillUpdateOne) SetSz(s string) *TwapSliceFillUpdateOne {
	tsfuo.mutation.SetSz(s)
	return tsfuo
}

// SetNillableSz sets the "sz" field if the given value is not nil.
func (tsfuo *TwapSliceFillUpdateOne) SetNillableSz(s *string) *TwapSliceFillUpdateOne {
	if s != nil {
		tsfuo.SetSz(*s)
	}
	return tsfuo
}

// SetSide sets the "side" field.
func (tsfuo *TwapSliceFillUpdateOne) SetSide(s string) *TwapSliceFillUpdateOne {
	tsfuo.mutation.SetSide(s)
	return tsfuo
}

// SetNillableSide sets the "side" field if the given value is not nil.
func (tsfuo *TwapSliceFillUpdateOne) SetNillableSide(s *string) *TwapSliceFillUpdateOne {
	if s != nil {
		tsfuo.SetSide(*s)
	}
	return tsfuo
}

// SetTime sets the "time" field.
func (tsfuo *TwapSliceFillUpdateOne) SetTime(i int64) *TwapSliceFillUpdateOne {
	tsfuo.mutation.ResetTime()
	tsfuo.mutation.SetTime(i)
	return tsfuo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (tsfuo *TwapSliceFillUpdateOne) SetNillableTime(i *int64) *TwapSliceFillUpdateOne {
	if i != nil {
		tsfuo.SetTime(*i)
	}
	return tsfuo
}

// AddTime adds i to the "time" field.
func (tsfuo *TwapSliceFillUpdateOne) AddTime(i int64) *TwapSliceFillUpdateOne {
	tsfuo.mutation.AddTime(i)
	return tsfuo
}

// SetStartPosition sets the "start_position" field.
func (tsfuo *TwapSliceFillUpdateOne) SetStartPosition(s string) *TwapSliceFillUpdateOne {
	tsfuo.mutation.SetStartPosition(s)
	return tsfuo
}

// SetNillableStartPosition sets the "start_position" field if the given value is not nil.
func (tsfuo *TwapSliceFillUpdateOne) SetNillableStartPosition(s *string) *TwapSliceFillUpdateOne {
	if s != nil {
		tsfuo.SetStartPosition(*s)
	}
	return tsfuo
}

// SetClosedPnl sets the "closed_pnl" field.
func (tsfuo *TwapSliceFillUpdateOne) SetClosedPnl(s string) *TwapSliceFillUpdateOne {
	tsfuo.mutation.SetClosedPnl(s)
	return tsfuo
}

// SetNillableClosedPnl sets the "closed_pnl" field if the given value is not nil.
func (tsfuo *TwapSliceFillUpdateOne) SetNillableClosedPnl(s *string) *TwapSliceFillUpdateOne {
	if s != nil {
		tsfuo.SetClosedPnl(*s)
	}
	return tsfuo
}

// SetDir sets the "dir" field.
func (tsfuo *TwapSliceFillUpdateOne) SetDir(s string) *TwapSliceFillUpdateOne {
	tsfuo.mutation.SetDir(s)
	return tsfuo
}

// SetNillableDir sets the "dir" field if the given value is not nil.
func (tsfuo *TwapSliceFillUpdateOne) SetNillableDir(s *string) *TwapSliceFillUpdateOne {
	if s != nil {
		tsfuo.SetDir(*s)
	}
	return tsfuo
}

// SetHash sets the "hash" field.
func (tsfuo *TwapSliceFillUpdateOne) SetHash(s string) *TwapSliceFillUpdateOne {
	tsfuo.mutation.SetHash(s)
	return tsfuo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (tsfuo *TwapSliceFillUpdateOne) SetNillableHash(s *string) *TwapSliceFillUpdateOne {
	if s != nil {
		tsfuo.SetHash(*s)
	}
	return tsfuo
}

// SetCrossed sets the "crossed" field.
func (tsfuo *TwapSliceFillUpdateOne) SetCrossed(b bool) *TwapSliceFillUpdateOne {
	tsfuo.mutation.SetCrossed(b)
	return tsfuo
}

// SetNillableCrossed sets the "crossed" field if the given value is not nil.
func (tsfuo *TwapSliceFillUpdateOne) SetNillableCrossed(b *bool) *TwapSliceFillUpdateOne {
	if b != nil {
		tsfuo.SetCrossed(*b)
	}
	return tsfuo
}

// SetFee sets the "fee" field.
func (tsfuo *TwapSliceFillUpdateOne) SetFee(s string) *TwapSliceFillUpdateOne {
	tsfuo.mutation.SetFee(s)
	return tsfuo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (tsfuo *TwapSliceFillUpdateOne) SetNillableFee(s *string) *TwapSliceFillUpdateOne {
	if s != nil {
		tsfuo.SetFee(*s)
	}
	return tsfuo
}

// SetOid sets the "oid" field.
func (tsfuo *TwapSliceFillUpdateOne) SetOid(i int64) *TwapSliceFillUpdateOne {
	tsfuo.mutation.ResetOid()
	tsfuo.mutation.SetOid(i)
	return tsfuo
}

// SetNillableOid sets the "oid" field if the given value is not nil.
func (tsfuo *TwapSliceFillUpdateOne) SetNillableOid(i *int64) *TwapSliceFillUpdateOne {
	if i != nil {
		tsfuo.SetOid(*i)
	}
	return tsfuo
}

// AddOid adds i to the "oid" field.
func (tsfuo *TwapSliceFillUpdateOne) AddOid(i int64) *TwapSliceFillUpdateOne {
	tsfuo.mutation.AddOid(i)
	return tsfuo
}

// SetTid sets the "tid" field.
func (tsfuo *TwapSliceFillUpdateOne) SetTid(i int64) *TwapSliceFillUpdateOne {
	tsfuo.mutation.ResetTid()
	tsfuo.mutation.SetTid(i)
	return tsfuo
}

// SetNillableTid sets the "tid" field if the given value is not nil.
func (tsfuo *TwapSliceFillUpdateOne) SetNillableTid(i *int64) *TwapSliceFillUpdateOne {
	if i != nil {
		tsfuo.SetTid(*i)
	}
	return tsfuo
}

// AddTid adds i to the "tid" field.
func (tsfuo *TwapSliceFillUpdateOne) AddTid(i int64) *TwapSliceFillUpdateOne {
	tsfuo.mutation.AddTid(i)
	return tsfuo
}

// SetTwapID sets the "twap_id" field.
func (tsfuo *TwapSliceFillUpdateOne) SetTwapID(i int64) *TwapSliceFillUpdateOne {
	tsfuo.mutation.ResetTwapID()
	tsfuo.mutation.SetTwapID(i)
	return tsfuo
}

// SetNillableTwapID sets the "twap_id" field if the given value is not nil.
func (tsfuo *TwapSliceFillUpdateOne) SetNillableTwapID(i *int64) *TwapSliceFillUpdateOne {
	if i != nil {
		tsfuo.SetTwapID(*i)
	}
	return tsfuo
}

// AddTwapID adds i to the "twap_id" field.
func (tsfuo *TwapSliceFillUpdateOne) AddTwapID(i int64) *TwapSliceFillUpdateOne {
	tsfuo.mutation.AddTwapID(i)
	return tsfuo
}

// SetFeeToken sets the "fee_token" field.
func (tsfuo *TwapSliceFillUpdateOne) SetFeeToken(s string) *TwapSliceFillUpdateOne {
	tsfuo.mutation.SetFeeToken(s)
	return tsfuo
}

// SetNillableFeeToken sets the "fee_token" field if the given value is not nil.
func (tsfuo *TwapSliceFillUpdateOne) SetNillableFeeToken(s *string) *TwapSliceFillUpdateOne {
	if s != nil {
		tsfuo.SetFeeToken(*s)
	}
	return tsfuo
}

// SetBuilderFee sets the "builder_fee" field.
func (tsfuo *TwapSliceFillUpdateOne) SetBuilderFee(s string) *TwapSliceFillUpdateOne {
	tsfuo.mutation.SetBuilderFee(s)
	return tsfuo
}

// SetNillableBuilderFee sets the "builder_fee" field if the given value is not nil.
func (tsfuo *TwapSliceFillUpdateOne) SetNillableBuilderFee(s *string) *TwapSliceFillUpdateOne {
	if s != nil {
		tsfuo.SetBuilderFee(*s)
	}
	return tsfuo
}

// ClearBuilderFee clears the value of the "builder_fee" field.
func (tsfuo *TwapSliceFillUpdateOne) ClearBuilderFee() *TwapSliceFillUpdateOne {
	tsfuo.mutation.ClearBuilderFee()
	return tsfuo
}

// Mutation returns the TwapSliceFillMutation object of the builder.
func (tsfuo *TwapSliceFillUpdateOne) Mutation() *TwapSliceFillMutation {
	return tsfuo.mutation
}

// Where appends a list predicates to the TwapSliceFillUpdate builder.
func (tsfuo *TwapSliceFillUpdateOne) Where(ps ...predicate.TwapSliceFill) *TwapSliceFillUpdateOne {
	tsfuo.mutation.Where(ps...)
	return tsfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tsfuo *TwapSliceFillUpdateOne) Select(field string, fields ...string) *TwapSliceFillUpdateOne {
	tsfuo.fields = append([]string{field}, fields...)
	return tsfuo
}

// Save executes the query and returns the updated TwapSliceFill entity.
func (tsfuo *TwapSliceFillUpdateOne) Save(ctx context.Context) (*TwapSliceFill, error) {
	return withHooks(ctx, tsfuo.sqlSave, tsfuo.mutation, tsfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsfuo *TwapSliceFillUpdateOne) SaveX(ctx context.Context) *TwapSliceFill {
	node, err := tsfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tsfuo *TwapSliceFillUpdateOne) Exec(ctx context.Context) error {
	_, err := tsfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsfuo *TwapSliceFillUpdateOne) ExecX(ctx context.Context) {
	if err := tsfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tsfuo *TwapSliceFillUpdateOne) sqlSave(ctx context.Context) (_node *TwapSliceFill, err error) {
	_spec := sqlgraph.NewUpdateSpec(twapslicefill.Table, twapslicefill.Columns, sqlgraph.NewFieldSpec(twapslicefill.FieldID, field.TypeInt))
	id, ok := tsfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TwapSliceFill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tsfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, twapslicefill.FieldID)
		for _, f := range fields {
			if !twapslicefill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != twapslicefill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tsfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsfuo.mutation.Coin(); ok {
		_spec.SetField(twapslicefill.FieldCoin, field.TypeString, value)
	}
	if value, ok := tsfuo.mutation.Address(); ok {
		_spec.SetField(twapslicefill.FieldAddress, field.TypeString, value)
	}
	if value, ok := tsfuo.mutation.Px(); ok {
		_spec.SetField(twapslicefill.FieldPx, field.TypeString, value)
	}
	if value, ok := tsfuo.mutation.Sz(); ok {
		_spec.SetField(twapslicefill.FieldSz, field.TypeString, value)
	}
	if value, ok := tsfuo.mutation.Side(); ok {
		_spec.SetField(twapslicefill.FieldSide, field.TypeString, value)
	}
	if value, ok := tsfuo.mutation.Time(); ok {
		_spec.SetField(twapslicefill.FieldTime, field.TypeInt64, value)
	}
	if value, ok := tsfuo.mutation.AddedTime(); ok {
		_spec.AddField(twapslicefill.FieldTime, field.TypeInt64, value)
	}
	if value, ok := tsfuo.mutation.StartPosition(); ok {
		_spec.SetField(twapslicefill.FieldStartPosition, field.TypeString, value)
	}
	if value, ok := tsfuo.mutation.ClosedPnl(); ok {
		_spec.SetField(twapslicefill.FieldClosedPnl, field.TypeString, value)
	}
	if value, ok := tsfuo.mutation.Dir(); ok {
		_spec.SetField(twapslicefill.FieldDir, field.TypeString, value)
	}
	if value, ok := tsfuo.mutation.Hash(); ok {
		_spec.SetField(twapslicefill.FieldHash, field.TypeString, value)
	}
	if value, ok := tsfuo.mutation.Crossed(); ok {
		_spec.SetField(twapslicefill.FieldCrossed, field.TypeBool, value)
	}
	if value, ok := tsfuo.mutation.Fee(); ok {
		_spec.SetField(twapslicefill.FieldFee, field.TypeString, value)
	}
	if value, ok := tsfuo.mutation.Oid(); ok {
		_spec.SetField(twapslicefill.FieldOid, field.TypeInt64, value)
	}
	if value, ok := tsfuo.mutation.AddedOid(); ok {
		_spec.AddField(twapslicefill.FieldOid, field.TypeInt64, value)
	}
	if value, ok := tsfuo.mutation.Tid(); ok {
		_spec.SetField(twapslicefill.FieldTid, field.TypeInt64, value)
	}
	if value, ok := tsfuo.mutation.AddedTid(); ok {
		_spec.AddField(twapslicefill.FieldTid, field.TypeInt64, value)
	}
	if value, ok := tsfuo.mutation.TwapID(); ok {
		_spec.SetField(twapslicefill.FieldTwapID, field.TypeInt64, value)
	}
	if value, ok := tsfuo.mutation.AddedTwapID(); ok {
		_spec.AddField(twapslicefill.FieldTwapID, field.TypeInt64, value)
	}
	if value, ok := tsfuo.mutation.FeeToken(); ok {
		_spec.SetField(twapslicefill.FieldFeeToken, field.TypeString, value)
	}
	if value, ok := tsfuo.mutation.BuilderFee(); ok {
		_spec.SetField(twapslicefill.FieldBuilderFee, field.TypeString, value)
	}
	if tsfuo.mutation.BuilderFeeCleared() {
		_spec.ClearField(twapslicefill.FieldBuilderFee, field.TypeString)
	}
	_node = &TwapSliceFill{config: tsfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tsfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twapslicefill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tsfuo.mutation.done = true
	return _node, nil
}
