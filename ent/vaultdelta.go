// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yoshiso/hypersync/ent/vaultdelta"
)

// VaultDelta is the model entity for the VaultDelta schema.
type VaultDelta struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Vault holds the value of the "vault" field.
	Vault string `json:"vault,omitempty"`
	// Usdc holds the value of the "usdc" field.
	Usdc string `json:"usdc,omitempty"`
	// Time holds the value of the "time" field.
	Time int64 `json:"time,omitempty"`
	// Address holds the value of the "address" field.
	Address      string `json:"address,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VaultDelta) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vaultdelta.FieldID, vaultdelta.FieldTime:
			values[i] = new(sql.NullInt64)
		case vaultdelta.FieldType, vaultdelta.FieldVault, vaultdelta.FieldUsdc, vaultdelta.FieldAddress:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VaultDelta fields.
func (vd *VaultDelta) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vaultdelta.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vd.ID = int(value.Int64)
		case vaultdelta.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				vd.Type = value.String
			}
		case vaultdelta.FieldVault:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vault", values[i])
			} else if value.Valid {
				vd.Vault = value.String
			}
		case vaultdelta.FieldUsdc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field usdc", values[i])
			} else if value.Valid {
				vd.Usdc = value.String
			}
		case vaultdelta.FieldTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				vd.Time = value.Int64
			}
		case vaultdelta.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				vd.Address = value.String
			}
		default:
			vd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VaultDelta.
// This includes values selected through modifiers, order, etc.
func (vd *VaultDelta) Value(name string) (ent.Value, error) {
	return vd.selectValues.Get(name)
}

// Update returns a builder for updating this VaultDelta.
// Note that you need to call VaultDelta.Unwrap() before calling this method if this VaultDelta
// was returned from a transaction, and the transaction was committed or rolled back.
func (vd *VaultDelta) Update() *VaultDeltaUpdateOne {
	return NewVaultDeltaClient(vd.config).UpdateOne(vd)
}

// Unwrap unwraps the VaultDelta entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vd *VaultDelta) Unwrap() *VaultDelta {
	_tx, ok := vd.config.driver.(*txDriver)
	if !ok {
		panic("ent: VaultDelta is not a transactional entity")
	}
	vd.config.driver = _tx.drv
	return vd
}

// String implements the fmt.Stringer.
func (vd *VaultDelta) String() string {
	var builder strings.Builder
	builder.WriteString("VaultDelta(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vd.ID))
	builder.WriteString("type=")
	builder.WriteString(vd.Type)
	builder.WriteString(", ")
	builder.WriteString("vault=")
	builder.WriteString(vd.Vault)
	builder.WriteString(", ")
	builder.WriteString("usdc=")
	builder.WriteString(vd.Usdc)
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(fmt.Sprintf("%v", vd.Time))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(vd.Address)
	builder.WriteByte(')')
	return builder.String()
}

// VaultDeltaSlice is a parsable slice of VaultDelta.
type VaultDeltaSlice []*VaultDelta
