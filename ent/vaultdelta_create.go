// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/vaultdelta"
)

// VaultDeltaCreate is the builder for creating a VaultDelta entity.
type VaultDeltaCreate struct {
	config
	mutation *VaultDeltaMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (vdc *VaultDeltaCreate) SetType(s string) *VaultDeltaCreate {
	vdc.mutation.SetType(s)
	return vdc
}

// SetVault sets the "vault" field.
func (vdc *VaultDeltaCreate) SetVault(s string) *VaultDeltaCreate {
	vdc.mutation.SetVault(s)
	return vdc
}

// SetUsdc sets the "usdc" field.
func (vdc *VaultDeltaCreate) SetUsdc(s string) *VaultDeltaCreate {
	vdc.mutation.SetUsdc(s)
	return vdc
}

// SetTime sets the "time" field.
func (vdc *VaultDeltaCreate) SetTime(i int64) *VaultDeltaCreate {
	vdc.mutation.SetTime(i)
	return vdc
}

// SetAddress sets the "address" field.
func (vdc *VaultDeltaCreate) SetAddress(s string) *VaultDeltaCreate {
	vdc.mutation.SetAddress(s)
	return vdc
}

// Mutation returns the VaultDeltaMutation object of the builder.
func (vdc *VaultDeltaCreate) Mutation() *VaultDeltaMutation {
	return vdc.mutation
}

// Save creates the VaultDelta in the database.
func (vdc *VaultDeltaCreate) Save(ctx context.Context) (*VaultDelta, error) {
	return withHooks(ctx, vdc.sqlSave, vdc.mutation, vdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vdc *VaultDeltaCreate) SaveX(ctx context.Context) *VaultDelta {
	v, err := vdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vdc *VaultDeltaCreate) Exec(ctx context.Context) error {
	_, err := vdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdc *VaultDeltaCreate) ExecX(ctx context.Context) {
	if err := vdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vdc *VaultDeltaCreate) check() error {
	if _, ok := vdc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "VaultDelta.type"`)}
	}
	if _, ok := vdc.mutation.Vault(); !ok {
		return &ValidationError{Name: "vault", err: errors.New(`ent: missing required field "VaultDelta.vault"`)}
	}
	if _, ok := vdc.mutation.Usdc(); !ok {
		return &ValidationError{Name: "usdc", err: errors.New(`ent: missing required field "VaultDelta.usdc"`)}
	}
	if _, ok := vdc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "VaultDelta.time"`)}
	}
	if _, ok := vdc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "VaultDelta.address"`)}
	}
	return nil
}

func (vdc *VaultDeltaCreate) sqlSave(ctx context.Context) (*VaultDelta, error) {
	if err := vdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vdc.mutation.id = &_node.ID
	vdc.mutation.done = true
	return _node, nil
}

func (vdc *VaultDeltaCreate) createSpec() (*VaultDelta, *sqlgraph.CreateSpec) {
	var (
		_node = &VaultDelta{config: vdc.config}
		_spec = sqlgraph.NewCreateSpec(vaultdelta.Table, sqlgraph.NewFieldSpec(vaultdelta.FieldID, field.TypeInt))
	)
	_spec.OnConflict = vdc.conflict
	if value, ok := vdc.mutation.GetType(); ok {
		_spec.SetField(vaultdelta.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := vdc.mutation.Vault(); ok {
		_spec.SetField(vaultdelta.FieldVault, field.TypeString, value)
		_node.Vault = value
	}
	if value, ok := vdc.mutation.Usdc(); ok {
		_spec.SetField(vaultdelta.FieldUsdc, field.TypeString, value)
		_node.Usdc = value
	}
	if value, ok := vdc.mutation.Time(); ok {
		_spec.SetField(vaultdelta.FieldTime, field.TypeInt64, value)
		_node.Time = value
	}
	if value, ok := vdc.mutation.Address(); ok {
		_spec.SetField(vaultdelta.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VaultDelta.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VaultDeltaUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (vdc *VaultDeltaCreate) OnConflict(opts ...sql.ConflictOption) *VaultDeltaUpsertOne {
	vdc.conflict = opts
	return &VaultDeltaUpsertOne{
		create: vdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VaultDelta.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vdc *VaultDeltaCreate) OnConflictColumns(columns ...string) *VaultDeltaUpsertOne {
	vdc.conflict = append(vdc.conflict, sql.ConflictColumns(columns...))
	return &VaultDeltaUpsertOne{
		create: vdc,
	}
}

type (
	// VaultDeltaUpsertOne is the builder for "upsert"-ing
	//  one VaultDelta node.
	VaultDeltaUpsertOne struct {
		create *VaultDeltaCreate
	}

	// VaultDeltaUpsert is the "OnConflict" setter.
	VaultDeltaUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *VaultDeltaUpsert) SetType(v string) *VaultDeltaUpsert {
	u.Set(vaultdelta.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *VaultDeltaUpsert) UpdateType() *VaultDeltaUpsert {
	u.SetExcluded(vaultdelta.FieldType)
	return u
}

// SetVault sets the "vault" field.
func (u *VaultDeltaUpsert) SetVault(v string) *VaultDeltaUpsert {
	u.Set(vaultdelta.FieldVault, v)
	return u
}

// UpdateVault sets the "vault" field to the value that was provided on create.
func (u *VaultDeltaUpsert) UpdateVault() *VaultDeltaUpsert {
	u.SetExcluded(vaultdelta.FieldVault)
	return u
}

// SetUsdc sets the "usdc" field.
func (u *VaultDeltaUpsert) SetUsdc(v string) *VaultDeltaUpsert {
	u.Set(vaultdelta.FieldUsdc, v)
	return u
}

// UpdateUsdc sets the "usdc" field to the value that was provided on create.
func (u *VaultDeltaUpsert) UpdateUsdc() *VaultDeltaUpsert {
	u.SetExcluded(vaultdelta.FieldUsdc)
	return u
}

// SetTime sets the "time" field.
func (u *VaultDeltaUpsert) SetTime(v int64) *VaultDeltaUpsert {
	u.Set(vaultdelta.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *VaultDeltaUpsert) UpdateTime() *VaultDeltaUpsert {
	u.SetExcluded(vaultdelta.FieldTime)
	return u
}

// AddTime adds v to the "time" field.
func (u *VaultDeltaUpsert) AddTime(v int64) *VaultDeltaUpsert {
	u.Add(vaultdelta.FieldTime, v)
	return u
}

// SetAddress sets the "address" field.
func (u *VaultDeltaUpsert) SetAddress(v string) *VaultDeltaUpsert {
	u.Set(vaultdelta.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *VaultDeltaUpsert) UpdateAddress() *VaultDeltaUpsert {
	u.SetExcluded(vaultdelta.FieldAddress)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.VaultDelta.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VaultDeltaUpsertOne) UpdateNewValues() *VaultDeltaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VaultDelta.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VaultDeltaUpsertOne) Ignore() *VaultDeltaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VaultDeltaUpsertOne) DoNothing() *VaultDeltaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VaultDeltaCreate.OnConflict
// documentation for more info.
func (u *VaultDeltaUpsertOne) Update(set func(*VaultDeltaUpsert)) *VaultDeltaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VaultDeltaUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *VaultDeltaUpsertOne) SetType(v string) *VaultDeltaUpsertOne {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *VaultDeltaUpsertOne) UpdateType() *VaultDeltaUpsertOne {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.UpdateType()
	})
}

// SetVault sets the "vault" field.
func (u *VaultDeltaUpsertOne) SetVault(v string) *VaultDeltaUpsertOne {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.SetVault(v)
	})
}

// UpdateVault sets the "vault" field to the value that was provided on create.
func (u *VaultDeltaUpsertOne) UpdateVault() *VaultDeltaUpsertOne {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.UpdateVault()
	})
}

// SetUsdc sets the "usdc" field.
func (u *VaultDeltaUpsertOne) SetUsdc(v string) *VaultDeltaUpsertOne {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.SetUsdc(v)
	})
}

// UpdateUsdc sets the "usdc" field to the value that was provided on create.
func (u *VaultDeltaUpsertOne) UpdateUsdc() *VaultDeltaUpsertOne {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.UpdateUsdc()
	})
}

// SetTime sets the "time" field.
func (u *VaultDeltaUpsertOne) SetTime(v int64) *VaultDeltaUpsertOne {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *VaultDeltaUpsertOne) AddTime(v int64) *VaultDeltaUpsertOne {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *VaultDeltaUpsertOne) UpdateTime() *VaultDeltaUpsertOne {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.UpdateTime()
	})
}

// SetAddress sets the "address" field.
func (u *VaultDeltaUpsertOne) SetAddress(v string) *VaultDeltaUpsertOne {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *VaultDeltaUpsertOne) UpdateAddress() *VaultDeltaUpsertOne {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.UpdateAddress()
	})
}

// Exec executes the query.
func (u *VaultDeltaUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VaultDeltaCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VaultDeltaUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VaultDeltaUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VaultDeltaUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VaultDeltaCreateBulk is the builder for creating many VaultDelta entities in bulk.
type VaultDeltaCreateBulk struct {
	config
	err      error
	builders []*VaultDeltaCreate
	conflict []sql.ConflictOption
}

// Save creates the VaultDelta entities in the database.
func (vdcb *VaultDeltaCreateBulk) Save(ctx context.Context) ([]*VaultDelta, error) {
	if vdcb.err != nil {
		return nil, vdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vdcb.builders))
	nodes := make([]*VaultDelta, len(vdcb.builders))
	mutators := make([]Mutator, len(vdcb.builders))
	for i := range vdcb.builders {
		func(i int, root context.Context) {
			builder := vdcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VaultDeltaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vdcb *VaultDeltaCreateBulk) SaveX(ctx context.Context) []*VaultDelta {
	v, err := vdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vdcb *VaultDeltaCreateBulk) Exec(ctx context.Context) error {
	_, err := vdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdcb *VaultDeltaCreateBulk) ExecX(ctx context.Context) {
	if err := vdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VaultDelta.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VaultDeltaUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (vdcb *VaultDeltaCreateBulk) OnConflict(opts ...sql.ConflictOption) *VaultDeltaUpsertBulk {
	vdcb.conflict = opts
	return &VaultDeltaUpsertBulk{
		create: vdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VaultDelta.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vdcb *VaultDeltaCreateBulk) OnConflictColumns(columns ...string) *VaultDeltaUpsertBulk {
	vdcb.conflict = append(vdcb.conflict, sql.ConflictColumns(columns...))
	return &VaultDeltaUpsertBulk{
		create: vdcb,
	}
}

// VaultDeltaUpsertBulk is the builder for "upsert"-ing
// a bulk of VaultDelta nodes.
type VaultDeltaUpsertBulk struct {
	create *VaultDeltaCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VaultDelta.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VaultDeltaUpsertBulk) UpdateNewValues() *VaultDeltaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VaultDelta.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VaultDeltaUpsertBulk) Ignore() *VaultDeltaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VaultDeltaUpsertBulk) DoNothing() *VaultDeltaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VaultDeltaCreateBulk.OnConflict
// documentation for more info.
func (u *VaultDeltaUpsertBulk) Update(set func(*VaultDeltaUpsert)) *VaultDeltaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VaultDeltaUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *VaultDeltaUpsertBulk) SetType(v string) *VaultDeltaUpsertBulk {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *VaultDeltaUpsertBulk) UpdateType() *VaultDeltaUpsertBulk {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.UpdateType()
	})
}

// SetVault sets the "vault" field.
func (u *VaultDeltaUpsertBulk) SetVault(v string) *VaultDeltaUpsertBulk {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.SetVault(v)
	})
}

// UpdateVault sets the "vault" field to the value that was provided on create.
func (u *VaultDeltaUpsertBulk) UpdateVault() *VaultDeltaUpsertBulk {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.UpdateVault()
	})
}

// SetUsdc sets the "usdc" field.
func (u *VaultDeltaUpsertBulk) SetUsdc(v string) *VaultDeltaUpsertBulk {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.SetUsdc(v)
	})
}

// UpdateUsdc sets the "usdc" field to the value that was provided on create.
func (u *VaultDeltaUpsertBulk) UpdateUsdc() *VaultDeltaUpsertBulk {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.UpdateUsdc()
	})
}

// SetTime sets the "time" field.
func (u *VaultDeltaUpsertBulk) SetTime(v int64) *VaultDeltaUpsertBulk {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *VaultDeltaUpsertBulk) AddTime(v int64) *VaultDeltaUpsertBulk {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *VaultDeltaUpsertBulk) UpdateTime() *VaultDeltaUpsertBulk {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.UpdateTime()
	})
}

// SetAddress sets the "address" field.
func (u *VaultDeltaUpsertBulk) SetAddress(v string) *VaultDeltaUpsertBulk {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *VaultDeltaUpsertBulk) UpdateAddress() *VaultDeltaUpsertBulk {
	return u.Update(func(s *VaultDeltaUpsert) {
		s.UpdateAddress()
	})
}

// Exec executes the query.
func (u *VaultDeltaUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VaultDeltaCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VaultDeltaCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VaultDeltaUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
