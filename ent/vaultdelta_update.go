// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/predicate"
	"github.com/yoshiso/hypersync/ent/vaultdelta"
)

// VaultDeltaUpdate is the builder for updating VaultDelta entities.
type VaultDeltaUpdate struct {
	config
	hooks    []Hook
	mutation *VaultDeltaMutation
}

// Where appends a list predicates to the VaultDeltaUpdate builder.
func (vdu *VaultDeltaUpdate) Where(ps ...predicate.VaultDelta) *VaultDeltaUpdate {
	vdu.mutation.Where(ps...)
	return vdu
}

// SetType sets the "type" field.
func (vdu *VaultDeltaUpdate) SetType(s string) *VaultDeltaUpdate {
	vdu.mutation.SetType(s)
	return vdu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (vdu *VaultDeltaUpdate) SetNillableType(s *string) *VaultDeltaUpdate {
	if s != nil {
		vdu.SetType(*s)
	}
	return vdu
}

// SetVault sets the "vault" field.
func (vdu *VaultDeltaUpdate) SetVault(s string) *VaultDeltaUpdate {
	vdu.mutation.SetVault(s)
	return vdu
}

// SetNillableVault sets the "vault" field if the given value is not nil.
func (vdu *VaultDeltaUpdate) SetNillableVault(s *string) *VaultDeltaUpdate {
	if s != nil {
		vdu.SetVault(*s)
	}
	return vdu
}

// SetUsdc sets the "usdc" field.
func (vdu *VaultDeltaUpdate) SetUsdc(s string) *VaultDeltaUpdate {
	vdu.mutation.SetUsdc(s)
	return vdu
}

// SetNillableUsdc sets the "usdc" field if the given value is not nil.
func (vdu *VaultDeltaUpdate) SetNillableUsdc(s *string) *VaultDeltaUpdate {
	if s != nil {
		vdu.SetUsdc(*s)
	}
	return vdu
}

// SetTime sets the "time" field.
func (vdu *VaultDeltaUpdate) SetTime(i int64) *VaultDeltaUpdate {
	vdu.mutation.ResetTime()
	vdu.mutation.SetTime(i)
	return vdu
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (vdu *VaultDeltaUpdate) SetNillableTime(i *int64) *VaultDeltaUpdate {
	if i != nil {
		vdu.SetTime(*i)
	}
	return vdu
}

// AddTime adds i to the "time" field.
func (vdu *VaultDeltaUpdate) AddTime(i int64) *VaultDeltaUpdate {
	vdu.mutation.AddTime(i)
	return vdu
}

// SetAddress sets the "address" field.
func (vdu *VaultDeltaUpdate) SetAddress(s string) *VaultDeltaUpdate {
	vdu.mutation.SetAddress(s)
	return vdu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (vdu *VaultDeltaUpdate) SetNillableAddress(s *string) *VaultDeltaUpdate {
	if s != nil {
		vdu.SetAddress(*s)
	}
	return vdu
}

// Mutation returns the VaultDeltaMutation object of the builder.
func (vdu *VaultDeltaUpdate) Mutation() *VaultDeltaMutation {
	return vdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vdu *VaultDeltaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vdu.sqlSave, vdu.mutation, vdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vdu *VaultDeltaUpdate) SaveX(ctx context.Context) int {
	affected, err := vdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vdu *VaultDeltaUpdate) Exec(ctx context.Context) error {
	_, err := vdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdu *VaultDeltaUpdate) ExecX(ctx context.Context) {
	if err := vdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vdu *VaultDeltaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(vaultdelta.Table, vaultdelta.Columns, sqlgraph.NewFieldSpec(vaultdelta.FieldID, field.TypeInt))
	if ps := vdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vdu.mutation.GetType(); ok {
		_spec.SetField(vaultdelta.FieldType, field.TypeString, value)
	}
	if value, ok := vdu.mutation.Vault(); ok {
		_spec.SetField(vaultdelta.FieldVault, field.TypeString, value)
	}
	if value, ok := vdu.mutation.Usdc(); ok {
		_spec.SetField(vaultdelta.FieldUsdc, field.TypeString, value)
	}
	if value, ok := vdu.mutation.Time(); ok {
		_spec.SetField(vaultdelta.FieldTime, field.TypeInt64, value)
	}
	if value, ok := vdu.mutation.AddedTime(); ok {
		_spec.AddField(vaultdelta.FieldTime, field.TypeInt64, value)
	}
	if value, ok := vdu.mutation.Address(); ok {
		_spec.SetField(vaultdelta.FieldAddress, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vaultdelta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vdu.mutation.done = true
	return n, nil
}

// VaultDeltaUpdateOne is the builder for updating a single VaultDelta entity.
type VaultDeltaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VaultDeltaMutation
}

// SetType sets the "type" field.
func (vduo *VaultDeltaUpdateOne) SetType(s string) *VaultDeltaUpdateOne {
	vduo.mutation.SetType(s)
	return vduo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (vduo *VaultDeltaUpdateOne) SetNillableType(s *string) *VaultDeltaUpdateOne {
	if s != nil {
		vduo.SetType(*s)
	}
	return vduo
}

// SetVault sets the "vault" field.
func (vduo *VaultDeltaUpdateOne) SetVault(s string) *VaultDeltaUpdateOne {
	vduo.mutation.SetVault(s)
	return vduo
}

// SetNillableVault sets the "vault" field if the given value is not nil.
func (vduo *VaultDeltaUpdateOne) SetNillableVault(s *string) *VaultDeltaUpdateOne {
	if s != nil {
		vduo.SetVault(*s)
	}
	return vduo
}

// SetUsdc sets the "usdc" field.
func (vduo *VaultDeltaUpdateOne) SetUsdc(s string) *VaultDeltaUpdateOne {
	vduo.mutation.SetUsdc(s)
	return vduo
}

// SetNillableUsdc sets the "usdc" field if the given value is not nil.
func (vduo *VaultDeltaUpdateOne) SetNillableUsdc(s *string) *VaultDeltaUpdateOne {
	if s != nil {
		vduo.SetUsdc(*s)
	}
	return vduo
}

// SetTime sets the "time" field.
func (vduo *VaultDeltaUpdateOne) SetTime(i int64) *VaultDeltaUpdateOne {
	vduo.mutation.ResetTime()
	vduo.mutation.SetTime(i)
	return vduo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (vduo *VaultDeltaUpdateOne) SetNillableTime(i *int64) *VaultDeltaUpdateOne {
	if i != nil {
		vduo.SetTime(*i)
	}
	return vduo
}

// AddTime adds i to the "time" field.
func (vduo *VaultDeltaUpdateOne) AddTime(i int64) *VaultDeltaUpdateOne {
	vduo.mutation.AddTime(i)
	return vduo
}

// SetAddress sets the "address" field.
func (vduo *VaultDeltaUpdateOne) SetAddress(s string) *VaultDeltaUpdateOne {
	vduo.mutation.SetAddress(s)
	return vduo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (vduo *VaultDeltaUpdateOne) SetNillableAddress(s *string) *VaultDeltaUpdateOne {
	if s != nil {
		vduo.SetAddress(*s)
	}
	return vduo
}

// Mutation returns the VaultDeltaMutation object of the builder.
func (vduo *VaultDeltaUpdateOne) Mutation() *VaultDeltaMutation {
	return vduo.mutation
}

// Where appends a list predicates to the VaultDeltaUpdate builder.
func (vduo *VaultDeltaUpdateOne) Where(ps ...predicate.VaultDelta) *VaultDeltaUpdateOne {
	vduo.mutation.Where(ps...)
	return vduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vduo *VaultDeltaUpdateOne) Select(field string, fields ...string) *VaultDeltaUpdateOne {
	vduo.fields = append([]string{field}, fields...)
	return vduo
}

// Save executes the query and returns the updated VaultDelta entity.
func (vduo *VaultDeltaUpdateOne) Save(ctx context.Context) (*VaultDelta, error) {
	return withHooks(ctx, vduo.sqlSave, vduo.mutation, vduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vduo *VaultDeltaUpdateOne) SaveX(ctx context.Context) *VaultDelta {
	node, err := vduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vduo *VaultDeltaUpdateOne) Exec(ctx context.Context) error {
	_, err := vduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vduo *VaultDeltaUpdateOne) ExecX(ctx context.Context) {
	if err := vduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vduo *VaultDeltaUpdateOne) sqlSave(ctx context.Context) (_node *VaultDelta, err error) {
	_spec := sqlgraph.NewUpdateSpec(vaultdelta.Table, vaultdelta.Columns, sqlgraph.NewFieldSpec(vaultdelta.FieldID, field.TypeInt))
	id, ok := vduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VaultDelta.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vaultdelta.FieldID)
		for _, f := range fields {
			if !vaultdelta.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vaultdelta.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vduo.mutation.GetType(); ok {
		_spec.SetField(vaultdelta.FieldType, field.TypeString, value)
	}
	if value, ok := vduo.mutation.Vault(); ok {
		_spec.SetField(vaultdelta.FieldVault, field.TypeString, value)
	}
	if value, ok := vduo.mutation.Usdc(); ok {
		_spec.SetField(vaultdelta.FieldUsdc, field.TypeString, value)
	}
	if value, ok := vduo.mutation.Time(); ok {
		_spec.SetField(vaultdelta.FieldTime, field.TypeInt64, value)
	}
	if value, ok := vduo.mutation.AddedTime(); ok {
		_spec.AddField(vaultdelta.FieldTime, field.TypeInt64, value)
	}
	if value, ok := vduo.mutation.Address(); ok {
		_spec.SetField(vaultdelta.FieldAddress, field.TypeString, value)
	}
	_node = &VaultDelta{config: vduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vaultdelta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vduo.mutation.done = true
	return _node, nil
}
