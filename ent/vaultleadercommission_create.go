// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/vaultleadercommission"
)

// VaultLeaderCommissionCreate is the builder for creating a VaultLeaderCommission entity.
type VaultLeaderCommissionCreate struct {
	config
	mutation *VaultLeaderCommissionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUser sets the "user" field.
func (vlcc *VaultLeaderCommissionCreate) SetUser(s string) *VaultLeaderCommissionCreate {
	vlcc.mutation.SetUser(s)
	return vlcc
}

// SetUsdc sets the "usdc" field.
func (vlcc *VaultLeaderCommissionCreate) SetUsdc(s string) *VaultLeaderCommissionCreate {
	vlcc.mutation.SetUsdc(s)
	return vlcc
}

// SetTime sets the "time" field.
func (vlcc *VaultLeaderCommissionCreate) SetTime(i int64) *VaultLeaderCommissionCreate {
	vlcc.mutation.SetTime(i)
	return vlcc
}

// SetAddress sets the "address" field.
func (vlcc *VaultLeaderCommissionCreate) SetAddress(s string) *VaultLeaderCommissionCreate {
	vlcc.mutation.SetAddress(s)
	return vlcc
}

// Mutation returns the VaultLeaderCommissionMutation object of the builder.
func (vlcc *VaultLeaderCommissionCreate) Mutation() *VaultLeaderCommissionMutation {
	return vlcc.mutation
}

// Save creates the VaultLeaderCommission in the database.
func (vlcc *VaultLeaderCommissionCreate) Save(ctx context.Context) (*VaultLeaderCommission, error) {
	return withHooks(ctx, vlcc.sqlSave, vlcc.mutation, vlcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vlcc *VaultLeaderCommissionCreate) SaveX(ctx context.Context) *VaultLeaderCommission {
	v, err := vlcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vlcc *VaultLeaderCommissionCreate) Exec(ctx context.Context) error {
	_, err := vlcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vlcc *VaultLeaderCommissionCreate) ExecX(ctx context.Context) {
	if err := vlcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vlcc *VaultLeaderCommissionCreate) check() error {
	if _, ok := vlcc.mutation.User(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required field "VaultLeaderCommission.user"`)}
	}
	if _, ok := vlcc.mutation.Usdc(); !ok {
		return &ValidationError{Name: "usdc", err: errors.New(`ent: missing required field "VaultLeaderCommission.usdc"`)}
	}
	if _, ok := vlcc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "VaultLeaderCommission.time"`)}
	}
	if _, ok := vlcc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "VaultLeaderCommission.address"`)}
	}
	return nil
}

func (vlcc *VaultLeaderCommissionCreate) sqlSave(ctx context.Context) (*VaultLeaderCommission, error) {
	if err := vlcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vlcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vlcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vlcc.mutation.id = &_node.ID
	vlcc.mutation.done = true
	return _node, nil
}

func (vlcc *VaultLeaderCommissionCreate) createSpec() (*VaultLeaderCommission, *sqlgraph.CreateSpec) {
	var (
		_node = &VaultLeaderCommission{config: vlcc.config}
		_spec = sqlgraph.NewCreateSpec(vaultleadercommission.Table, sqlgraph.NewFieldSpec(vaultleadercommission.FieldID, field.TypeInt))
	)
	_spec.OnConflict = vlcc.conflict
	if value, ok := vlcc.mutation.User(); ok {
		_spec.SetField(vaultleadercommission.FieldUser, field.TypeString, value)
		_node.User = value
	}
	if value, ok := vlcc.mutation.Usdc(); ok {
		_spec.SetField(vaultleadercommission.FieldUsdc, field.TypeString, value)
		_node.Usdc = value
	}
	if value, ok := vlcc.mutation.Time(); ok {
		_spec.SetField(vaultleadercommission.FieldTime, field.TypeInt64, value)
		_node.Time = value
	}
	if value, ok := vlcc.mutation.Address(); ok {
		_spec.SetField(vaultleadercommission.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VaultLeaderCommission.Create().
//		SetUser(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VaultLeaderCommissionUpsert) {
//			SetUser(v+v).
//		}).
//		Exec(ctx)
func (vlcc *VaultLeaderCommissionCreate) OnConflict(opts ...sql.ConflictOption) *VaultLeaderCommissionUpsertOne {
	vlcc.conflict = opts
	return &VaultLeaderCommissionUpsertOne{
		create: vlcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VaultLeaderCommission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vlcc *VaultLeaderCommissionCreate) OnConflictColumns(columns ...string) *VaultLeaderCommissionUpsertOne {
	vlcc.conflict = append(vlcc.conflict, sql.ConflictColumns(columns...))
	return &VaultLeaderCommissionUpsertOne{
		create: vlcc,
	}
}

type (
	// VaultLeaderCommissionUpsertOne is the builder for "upsert"-ing
	//  one VaultLeaderCommission node.
	VaultLeaderCommissionUpsertOne struct {
		create *VaultLeaderCommissionCreate
	}

	// VaultLeaderCommissionUpsert is the "OnConflict" setter.
	VaultLeaderCommissionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUser sets the "user" field.
func (u *VaultLeaderCommissionUpsert) SetUser(v string) *VaultLeaderCommissionUpsert {
	u.Set(vaultleadercommission.FieldUser, v)
	return u
}

// UpdateUser sets the "user" field to the value that was provided on create.
func (u *VaultLeaderCommissionUpsert) UpdateUser() *VaultLeaderCommissionUpsert {
	u.SetExcluded(vaultleadercommission.FieldUser)
	return u
}

// SetUsdc sets the "usdc" field.
func (u *VaultLeaderCommissionUpsert) SetUsdc(v string) *VaultLeaderCommissionUpsert {
	u.Set(vaultleadercommission.FieldUsdc, v)
	return u
}

// UpdateUsdc sets the "usdc" field to the value that was provided on create.
func (u *VaultLeaderCommissionUpsert) UpdateUsdc() *VaultLeaderCommissionUpsert {
	u.SetExcluded(vaultleadercommission.FieldUsdc)
	return u
}

// SetTime sets the "time" field.
func (u *VaultLeaderCommissionUpsert) SetTime(v int64) *VaultLeaderCommissionUpsert {
	u.Set(vaultleadercommission.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *VaultLeaderCommissionUpsert) UpdateTime() *VaultLeaderCommissionUpsert {
	u.SetExcluded(vaultleadercommission.FieldTime)
	return u
}

// AddTime adds v to the "time" field.
func (u *VaultLeaderCommissionUpsert) AddTime(v int64) *VaultLeaderCommissionUpsert {
	u.Add(vaultleadercommission.FieldTime, v)
	return u
}

// SetAddress sets the "address" field.
func (u *VaultLeaderCommissionUpsert) SetAddress(v string) *VaultLeaderCommissionUpsert {
	u.Set(vaultleadercommission.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *VaultLeaderCommissionUpsert) UpdateAddress() *VaultLeaderCommissionUpsert {
	u.SetExcluded(vaultleadercommission.FieldAddress)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.VaultLeaderCommission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VaultLeaderCommissionUpsertOne) UpdateNewValues() *VaultLeaderCommissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VaultLeaderCommission.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VaultLeaderCommissionUpsertOne) Ignore() *VaultLeaderCommissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VaultLeaderCommissionUpsertOne) DoNothing() *VaultLeaderCommissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VaultLeaderCommissionCreate.OnConflict
// documentation for more info.
func (u *VaultLeaderCommissionUpsertOne) Update(set func(*VaultLeaderCommissionUpsert)) *VaultLeaderCommissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VaultLeaderCommissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUser sets the "user" field.
func (u *VaultLeaderCommissionUpsertOne) SetUser(v string) *VaultLeaderCommissionUpsertOne {
	return u.Update(func(s *VaultLeaderCommissionUpsert) {
		s.SetUser(v)
	})
}

// UpdateUser sets the "user" field to the value that was provided on create.
func (u *VaultLeaderCommissionUpsertOne) UpdateUser() *VaultLeaderCommissionUpsertOne {
	return u.Update(func(s *VaultLeaderCommissionUpsert) {
		s.UpdateUser()
	})
}

// SetUsdc sets the "usdc" field.
func (u *VaultLeaderCommissionUpsertOne) SetUsdc(v string) *VaultLeaderCommissionUpsertOne {
	return u.Update(func(s *VaultLeaderCommissionUpsert) {
		s.SetUsdc(v)
	})
}

// UpdateUsdc sets the "usdc" field to the value that was provided on create.
func (u *VaultLeaderCommissionUpsertOne) UpdateUsdc() *VaultLeaderCommissionUpsertOne {
	return u.Update(func(s *VaultLeaderCommissionUpsert) {
		s.UpdateUsdc()
	})
}

// SetTime sets the "time" field.
func (u *VaultLeaderCommissionUpsertOne) SetTime(v int64) *VaultLeaderCommissionUpsertOne {
	return u.Update(func(s *VaultLeaderCommissionUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *VaultLeaderCommissionUpsertOne) AddTime(v int64) *VaultLeaderCommissionUpsertOne {
	return u.Update(func(s *VaultLeaderCommissionUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *VaultLeaderCommissionUpsertOne) UpdateTime() *VaultLeaderCommissionUpsertOne {
	return u.Update(func(s *VaultLeaderCommissionUpsert) {
		s.UpdateTime()
	})
}

// SetAddress sets the "address" field.
func (u *VaultLeaderCommissionUpsertOne) SetAddress(v string) *VaultLeaderCommissionUpsertOne {
	return u.Update(func(s *VaultLeaderCommissionUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *VaultLeaderCommissionUpsertOne) UpdateAddress() *VaultLeaderCommissionUpsertOne {
	return u.Update(func(s *VaultLeaderCommissionUpsert) {
		s.UpdateAddress()
	})
}

// Exec executes the query.
func (u *VaultLeaderCommissionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VaultLeaderCommissionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VaultLeaderCommissionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VaultLeaderCommissionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VaultLeaderCommissionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VaultLeaderCommissionCreateBulk is the builder for creating many VaultLeaderCommission entities in bulk.
type VaultLeaderCommissionCreateBulk struct {
	config
	err      error
	builders []*VaultLeaderCommissionCreate
	conflict []sql.ConflictOption
}

// Save creates the VaultLeaderCommission entities in the database.
func (vlccb *VaultLeaderCommissionCreateBulk) Save(ctx context.Context) ([]*VaultLeaderCommission, error) {
	if vlccb.err != nil {
		return nil, vlccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vlccb.builders))
	nodes := make([]*VaultLeaderCommission, len(vlccb.builders))
	mutators := make([]Mutator, len(vlccb.builders))
	for i := range vlccb.builders {
		func(i int, root context.Context) {
			builder := vlccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VaultLeaderCommissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vlccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vlccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vlccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vlccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vlccb *VaultLeaderCommissionCreateBulk) SaveX(ctx context.Context) []*VaultLeaderCommission {
	v, err := vlccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vlccb *VaultLeaderCommissionCreateBulk) Exec(ctx context.Context) error {
	_, err := vlccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vlccb *VaultLeaderCommissionCreateBulk) ExecX(ctx context.Context) {
	if err := vlccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VaultLeaderCommission.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VaultLeaderCommissionUpsert) {
//			SetUser(v+v).
//		}).
//		Exec(ctx)
func (vlccb *VaultLeaderCommissionCreateBulk) OnConflict(opts ...sql.ConflictOption) *VaultLeaderCommissionUpsertBulk {
	vlccb.conflict = opts
	return &VaultLeaderCommissionUpsertBulk{
		create: vlccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VaultLeaderCommission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vlccb *VaultLeaderCommissionCreateBulk) OnConflictColumns(columns ...string) *VaultLeaderCommissionUpsertBulk {
	vlccb.conflict = append(vlccb.conflict, sql.ConflictColumns(columns...))
	return &VaultLeaderCommissionUpsertBulk{
		create: vlccb,
	}
}

// VaultLeaderCommissionUpsertBulk is the builder for "upsert"-ing
// a bulk of VaultLeaderCommission nodes.
type VaultLeaderCommissionUpsertBulk struct {
	create *VaultLeaderCommissionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VaultLeaderCommission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VaultLeaderCommissionUpsertBulk) UpdateNewValues() *VaultLeaderCommissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VaultLeaderCommission.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VaultLeaderCommissionUpsertBulk) Ignore() *VaultLeaderCommissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VaultLeaderCommissionUpsertBulk) DoNothing() *VaultLeaderCommissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VaultLeaderCommissionCreateBulk.OnConflict
// documentation for more info.
func (u *VaultLeaderCommissionUpsertBulk) Update(set func(*VaultLeaderCommissionUpsert)) *VaultLeaderCommissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VaultLeaderCommissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUser sets the "user" field.
func (u *VaultLeaderCommissionUpsertBulk) SetUser(v string) *VaultLeaderCommissionUpsertBulk {
	return u.Update(func(s *VaultLeaderCommissionUpsert) {
		s.SetUser(v)
	})
}

// UpdateUser sets the "user" field to the value that was provided on create.
func (u *VaultLeaderCommissionUpsertBulk) UpdateUser() *VaultLeaderCommissionUpsertBulk {
	return u.Update(func(s *VaultLeaderCommissionUpsert) {
		s.UpdateUser()
	})
}

// SetUsdc sets the "usdc" field.
func (u *VaultLeaderCommissionUpsertBulk) SetUsdc(v string) *VaultLeaderCommissionUpsertBulk {
	return u.Update(func(s *VaultLeaderCommissionUpsert) {
		s.SetUsdc(v)
	})
}

// UpdateUsdc sets the "usdc" field to the value that was provided on create.
func (u *VaultLeaderCommissionUpsertBulk) UpdateUsdc() *VaultLeaderCommissionUpsertBulk {
	return u.Update(func(s *VaultLeaderCommissionUpsert) {
		s.UpdateUsdc()
	})
}

// SetTime sets the "time" field.
func (u *VaultLeaderCommissionUpsertBulk) SetTime(v int64) *VaultLeaderCommissionUpsertBulk {
	return u.Update(func(s *VaultLeaderCommissionUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *VaultLeaderCommissionUpsertBulk) AddTime(v int64) *VaultLeaderCommissionUpsertBulk {
	return u.Update(func(s *VaultLeaderCommissionUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *VaultLeaderCommissionUpsertBulk) UpdateTime() *VaultLeaderCommissionUpsertBulk {
	return u.Update(func(s *VaultLeaderCommissionUpsert) {
		s.UpdateTime()
	})
}

// SetAddress sets the "address" field.
func (u *VaultLeaderCommissionUpsertBulk) SetAddress(v string) *VaultLeaderCommissionUpsertBulk {
	return u.Update(func(s *VaultLeaderCommissionUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *VaultLeaderCommissionUpsertBulk) UpdateAddress() *VaultLeaderCommissionUpsertBulk {
	return u.Update(func(s *VaultLeaderCommissionUpsert) {
		s.UpdateAddress()
	})
}

// Exec executes the query.
func (u *VaultLeaderCommissionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VaultLeaderCommissionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VaultLeaderCommissionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VaultLeaderCommissionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
