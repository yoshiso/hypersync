// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/predicate"
	"github.com/yoshiso/hypersync/ent/vaultleadercommission"
)

// VaultLeaderCommissionDelete is the builder for deleting a VaultLeaderCommission entity.
type VaultLeaderCommissionDelete struct {
	config
	hooks    []Hook
	mutation *VaultLeaderCommissionMutation
}

// Where appends a list predicates to the VaultLeaderCommissionDelete builder.
func (vlcd *VaultLeaderCommissionDelete) Where(ps ...predicate.VaultLeaderCommission) *VaultLeaderCommissionDelete {
	vlcd.mutation.Where(ps...)
	return vlcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vlcd *VaultLeaderCommissionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, vlcd.sqlExec, vlcd.mutation, vlcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vlcd *VaultLeaderCommissionDelete) ExecX(ctx context.Context) int {
	n, err := vlcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vlcd *VaultLeaderCommissionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(vaultleadercommission.Table, sqlgraph.NewFieldSpec(vaultleadercommission.FieldID, field.TypeInt))
	if ps := vlcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vlcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vlcd.mutation.done = true
	return affected, err
}

// VaultLeaderCommissionDeleteOne is the builder for deleting a single VaultLeaderCommission entity.
type VaultLeaderCommissionDeleteOne struct {
	vlcd *VaultLeaderCommissionDelete
}

// Where appends a list predicates to the VaultLeaderCommissionDelete builder.
func (vlcdo *VaultLeaderCommissionDeleteOne) Where(ps ...predicate.VaultLeaderCommission) *VaultLeaderCommissionDeleteOne {
	vlcdo.vlcd.mutation.Where(ps...)
	return vlcdo
}

// Exec executes the deletion query.
func (vlcdo *VaultLeaderCommissionDeleteOne) Exec(ctx context.Context) error {
	n, err := vlcdo.vlcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{vaultleadercommission.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vlcdo *VaultLeaderCommissionDeleteOne) ExecX(ctx context.Context) {
	if err := vlcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
