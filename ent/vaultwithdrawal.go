// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yoshiso/hypersync/ent/vaultwithdrawal"
)

// VaultWithdrawal is the model entity for the VaultWithdrawal schema.
type VaultWithdrawal struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Vault holds the value of the "vault" field.
	Vault string `json:"vault,omitempty"`
	// User holds the value of the "user" field.
	User string `json:"user,omitempty"`
	// RequestedUsd holds the value of the "requested_usd" field.
	RequestedUsd string `json:"requested_usd,omitempty"`
	// Commission holds the value of the "commission" field.
	Commission string `json:"commission,omitempty"`
	// ClosingCost holds the value of the "closing_cost" field.
	ClosingCost string `json:"closing_cost,omitempty"`
	// Basis holds the value of the "basis" field.
	Basis string `json:"basis,omitempty"`
	// NetWithdrawnUsd holds the value of the "net_withdrawn_usd" field.
	NetWithdrawnUsd string `json:"net_withdrawn_usd,omitempty"`
	// Time holds the value of the "time" field.
	Time int64 `json:"time,omitempty"`
	// Address holds the value of the "address" field.
	Address      string `json:"address,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VaultWithdrawal) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vaultwithdrawal.FieldID, vaultwithdrawal.FieldTime:
			values[i] = new(sql.NullInt64)
		case vaultwithdrawal.FieldVault, vaultwithdrawal.FieldUser, vaultwithdrawal.FieldRequestedUsd, vaultwithdrawal.FieldCommission, vaultwithdrawal.FieldClosingCost, vaultwithdrawal.FieldBasis, vaultwithdrawal.FieldNetWithdrawnUsd, vaultwithdrawal.FieldAddress:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VaultWithdrawal fields.
func (vw *VaultWithdrawal) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vaultwithdrawal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vw.ID = int(value.Int64)
		case vaultwithdrawal.FieldVault:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vault", values[i])
			} else if value.Valid {
				vw.Vault = value.String
			}
		case vaultwithdrawal.FieldUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user", values[i])
			} else if value.Valid {
				vw.User = value.String
			}
		case vaultwithdrawal.FieldRequestedUsd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field requested_usd", values[i])
			} else if value.Valid {
				vw.RequestedUsd = value.String
			}
		case vaultwithdrawal.FieldCommission:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field commission", values[i])
			} else if value.Valid {
				vw.Commission = value.String
			}
		case vaultwithdrawal.FieldClosingCost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field closing_cost", values[i])
			} else if value.Valid {
				vw.ClosingCost = value.String
			}
		case vaultwithdrawal.FieldBasis:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field basis", values[i])
			} else if value.Valid {
				vw.Basis = value.String
			}
		case vaultwithdrawal.FieldNetWithdrawnUsd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field net_withdrawn_usd", values[i])
			} else if value.Valid {
				vw.NetWithdrawnUsd = value.String
			}
		case vaultwithdrawal.FieldTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				vw.Time = value.Int64
			}
		case vaultwithdrawal.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				vw.Address = value.String
			}
		default:
			vw.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VaultWithdrawal.
// This includes values selected through modifiers, order, etc.
func (vw *VaultWithdrawal) Value(name string) (ent.Value, error) {
	return vw.selectValues.Get(name)
}

// Update returns a builder for updating this VaultWithdrawal.
// Note that you need to call VaultWithdrawal.Unwrap() before calling this method if this VaultWithdrawal
// was returned from a transaction, and the transaction was committed or rolled back.
func (vw *VaultWithdrawal) Update() *VaultWithdrawalUpdateOne {
	return NewVaultWithdrawalClient(vw.config).UpdateOne(vw)
}

// Unwrap unwraps the VaultWithdrawal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vw *VaultWithdrawal) Unwrap() *VaultWithdrawal {
	_tx, ok := vw.config.driver.(*txDriver)
	if !ok {
		panic("ent: VaultWithdrawal is not a transactional entity")
	}
	vw.config.driver = _tx.drv
	return vw
}

// String implements the fmt.Stringer.
func (vw *VaultWithdrawal) String() string {
	var builder strings.Builder
	builder.WriteString("VaultWithdrawal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vw.ID))
	builder.WriteString("vault=")
	builder.WriteString(vw.Vault)
	builder.WriteString(", ")
	builder.WriteString("user=")
	builder.WriteString(vw.User)
	builder.WriteString(", ")
	builder.WriteString("requested_usd=")
	builder.WriteString(vw.RequestedUsd)
	builder.WriteString(", ")
	builder.WriteString("commission=")
	builder.WriteString(vw.Commission)
	builder.WriteString(", ")
	builder.WriteString("closing_cost=")
	builder.WriteString(vw.ClosingCost)
	builder.WriteString(", ")
	builder.WriteString("basis=")
	builder.WriteString(vw.Basis)
	builder.WriteString(", ")
	builder.WriteString("net_withdrawn_usd=")
	builder.WriteString(vw.NetWithdrawnUsd)
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(fmt.Sprintf("%v", vw.Time))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(vw.Address)
	builder.WriteByte(')')
	return builder.String()
}

// VaultWithdrawals is a parsable slice of VaultWithdrawal.
type VaultWithdrawals []*VaultWithdrawal
