// Code generated by ent, DO NOT EDIT.

package vaultwithdrawal

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the vaultwithdrawal type in the database.
	Label = "vault_withdrawal"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVault holds the string denoting the vault field in the database.
	FieldVault = "vault"
	// FieldUser holds the string denoting the user field in the database.
	FieldUser = "user"
	// FieldRequestedUsd holds the string denoting the requested_usd field in the database.
	FieldRequestedUsd = "requested_usd"
	// FieldCommission holds the string denoting the commission field in the database.
	FieldCommission = "commission"
	// FieldClosingCost holds the string denoting the closing_cost field in the database.
	FieldClosingCost = "closing_cost"
	// FieldBasis holds the string denoting the basis field in the database.
	FieldBasis = "basis"
	// FieldNetWithdrawnUsd holds the string denoting the net_withdrawn_usd field in the database.
	FieldNetWithdrawnUsd = "net_withdrawn_usd"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// Table holds the table name of the vaultwithdrawal in the database.
	Table = "vault_withdrawals"
)

// Columns holds all SQL columns for vaultwithdrawal fields.
var Columns = []string{
	FieldID,
	FieldVault,
	FieldUser,
	FieldRequestedUsd,
	FieldCommission,
	FieldClosingCost,
	FieldBasis,
	FieldNetWithdrawnUsd,
	FieldTime,
	FieldAddress,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the VaultWithdrawal queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVault orders the results by the vault field.
func ByVault(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVault, opts...).ToFunc()
}

// ByUser orders the results by the user field.
func ByUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUser, opts...).ToFunc()
}

// ByRequestedUsd orders the results by the requested_usd field.
func ByRequestedUsd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestedUsd, opts...).ToFunc()
}

// ByCommission orders the results by the commission field.
func ByCommission(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommission, opts...).ToFunc()
}

// ByClosingCost orders the results by the closing_cost field.
func ByClosingCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClosingCost, opts...).ToFunc()
}

// ByBasis orders the results by the basis field.
func ByBasis(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBasis, opts...).ToFunc()
}

// ByNetWithdrawnUsd orders the results by the net_withdrawn_usd field.
func ByNetWithdrawnUsd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNetWithdrawnUsd, opts...).ToFunc()
}

// ByTime orders the results by the time field.
func ByTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTime, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}
