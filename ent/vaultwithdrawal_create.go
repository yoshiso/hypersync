// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/vaultwithdrawal"
)

// VaultWithdrawalCreate is the builder for creating a VaultWithdrawal entity.
type VaultWithdrawalCreate struct {
	config
	mutation *VaultWithdrawalMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetVault sets the "vault" field.
func (vwc *VaultWithdrawalCreate) SetVault(s string) *VaultWithdrawalCreate {
	vwc.mutation.SetVault(s)
	return vwc
}

// SetUser sets the "user" field.
func (vwc *VaultWithdrawalCreate) SetUser(s string) *VaultWithdrawalCreate {
	vwc.mutation.SetUser(s)
	return vwc
}

// SetRequestedUsd sets the "requested_usd" field.
func (vwc *VaultWithdrawalCreate) SetRequestedUsd(s string) *VaultWithdrawalCreate {
	vwc.mutation.SetRequestedUsd(s)
	return vwc
}

// SetCommission sets the "commission" field.
func (vwc *VaultWithdrawalCreate) SetCommission(s string) *VaultWithdrawalCreate {
	vwc.mutation.SetCommission(s)
	return vwc
}

// SetClosingCost sets the "closing_cost" field.
func (vwc *VaultWithdrawalCreate) SetClosingCost(s string) *VaultWithdrawalCreate {
	vwc.mutation.SetClosingCost(s)
	return vwc
}

// SetBasis sets the "basis" field.
func (vwc *VaultWithdrawalCreate) SetBasis(s string) *VaultWithdrawalCreate {
	vwc.mutation.SetBasis(s)
	return vwc
}

// SetNetWithdrawnUsd sets the "net_withdrawn_usd" field.
func (vwc *VaultWithdrawalCreate) SetNetWithdrawnUsd(s string) *VaultWithdrawalCreate {
	vwc.mutation.SetNetWithdrawnUsd(s)
	return vwc
}

// SetTime sets the "time" field.
func (vwc *VaultWithdrawalCreate) SetTime(i int64) *VaultWithdrawalCreate {
	vwc.mutation.SetTime(i)
	return vwc
}

// SetAddress sets the "address" field.
func (vwc *VaultWithdrawalCreate) SetAddress(s string) *VaultWithdrawalCreate {
	vwc.mutation.SetAddress(s)
	return vwc
}

// Mutation returns the VaultWithdrawalMutation object of the builder.
func (vwc *VaultWithdrawalCreate) Mutation() *VaultWithdrawalMutation {
	return vwc.mutation
}

// Save creates the VaultWithdrawal in the database.
func (vwc *VaultWithdrawalCreate) Save(ctx context.Context) (*VaultWithdrawal, error) {
	return withHooks(ctx, vwc.sqlSave, vwc.mutation, vwc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vwc *VaultWithdrawalCreate) SaveX(ctx context.Context) *VaultWithdrawal {
	v, err := vwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vwc *VaultWithdrawalCreate) Exec(ctx context.Context) error {
	_, err := vwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vwc *VaultWithdrawalCreate) ExecX(ctx context.Context) {
	if err := vwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vwc *VaultWithdrawalCreate) check() error {
	if _, ok := vwc.mutation.Vault(); !ok {
		return &ValidationError{Name: "vault", err: errors.New(`ent: missing required field "VaultWithdrawal.vault"`)}
	}
	if _, ok := vwc.mutation.User(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required field "VaultWithdrawal.user"`)}
	}
	if _, ok := vwc.mutation.RequestedUsd(); !ok {
		return &ValidationError{Name: "requested_usd", err: errors.New(`ent: missing required field "VaultWithdrawal.requested_usd"`)}
	}
	if _, ok := vwc.mutation.Commission(); !ok {
		return &ValidationError{Name: "commission", err: errors.New(`ent: missing required field "VaultWithdrawal.commission"`)}
	}
	if _, ok := vwc.mutation.ClosingCost(); !ok {
		return &ValidationError{Name: "closing_cost", err: errors.New(`ent: missing required field "VaultWithdrawal.closing_cost"`)}
	}
	if _, ok := vwc.mutation.Basis(); !ok {
		return &ValidationError{Name: "basis", err: errors.New(`ent: missing required field "VaultWithdrawal.basis"`)}
	}
	if _, ok := vwc.mutation.NetWithdrawnUsd(); !ok {
		return &ValidationError{Name: "net_withdrawn_usd", err: errors.New(`ent: missing required field "VaultWithdrawal.net_withdrawn_usd"`)}
	}
	if _, ok := vwc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "VaultWithdrawal.time"`)}
	}
	if _, ok := vwc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "VaultWithdrawal.address"`)}
	}
	return nil
}

func (vwc *VaultWithdrawalCreate) sqlSave(ctx context.Context) (*VaultWithdrawal, error) {
	if err := vwc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vwc.mutation.id = &_node.ID
	vwc.mutation.done = true
	return _node, nil
}

func (vwc *VaultWithdrawalCreate) createSpec() (*VaultWithdrawal, *sqlgraph.CreateSpec) {
	var (
		_node = &VaultWithdrawal{config: vwc.config}
		_spec = sqlgraph.NewCreateSpec(vaultwithdrawal.Table, sqlgraph.NewFieldSpec(vaultwithdrawal.FieldID, field.TypeInt))
	)
	_spec.OnConflict = vwc.conflict
	if value, ok := vwc.mutation.Vault(); ok {
		_spec.SetField(vaultwithdrawal.FieldVault, field.TypeString, value)
		_node.Vault = value
	}
	if value, ok := vwc.mutation.User(); ok {
		_spec.SetField(vaultwithdrawal.FieldUser, field.TypeString, value)
		_node.User = value
	}
	if value, ok := vwc.mutation.RequestedUsd(); ok {
		_spec.SetField(vaultwithdrawal.FieldRequestedUsd, field.TypeString, value)
		_node.RequestedUsd = value
	}
	if value, ok := vwc.mutation.Commission(); ok {
		_spec.SetField(vaultwithdrawal.FieldCommission, field.TypeString, value)
		_node.Commission = value
	}
	if value, ok := vwc.mutation.ClosingCost(); ok {
		_spec.SetField(vaultwithdrawal.FieldClosingCost, field.TypeString, value)
		_node.ClosingCost = value
	}
	if value, ok := vwc.mutation.Basis(); ok {
		_spec.SetField(vaultwithdrawal.FieldBasis, field.TypeString, value)
		_node.Basis = value
	}
	if value, ok := vwc.mutation.NetWithdrawnUsd(); ok {
		_spec.SetField(vaultwithdrawal.FieldNetWithdrawnUsd, field.TypeString, value)
		_node.NetWithdrawnUsd = value
	}
	if value, ok := vwc.mutation.Time(); ok {
		_spec.SetField(vaultwithdrawal.FieldTime, field.TypeInt64, value)
		_node.Time = value
	}
	if value, ok := vwc.mutation.Address(); ok {
		_spec.SetField(vaultwithdrawal.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VaultWithdrawal.Create().
//		SetVault(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VaultWithdrawalUpsert) {
//			SetVault(v+v).
//		}).
//		Exec(ctx)
func (vwc *VaultWithdrawalCreate) OnConflict(opts ...sql.ConflictOption) *VaultWithdrawalUpsertOne {
	vwc.conflict = opts
	return &VaultWithdrawalUpsertOne{
		create: vwc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VaultWithdrawal.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vwc *VaultWithdrawalCreate) OnConflictColumns(columns ...string) *VaultWithdrawalUpsertOne {
	vwc.conflict = append(vwc.conflict, sql.ConflictColumns(columns...))
	return &VaultWithdrawalUpsertOne{
		create: vwc,
	}
}

type (
	// VaultWithdrawalUpsertOne is the builder for "upsert"-ing
	//  one VaultWithdrawal node.
	VaultWithdrawalUpsertOne struct {
		create *VaultWithdrawalCreate
	}

	// VaultWithdrawalUpsert is the "OnConflict" setter.
	VaultWithdrawalUpsert struct {
		*sql.UpdateSet
	}
)

// SetVault sets the "vault" field.
func (u *VaultWithdrawalUpsert) SetVault(v string) *VaultWithdrawalUpsert {
	u.Set(vaultwithdrawal.FieldVault, v)
	return u
}

// UpdateVault sets the "vault" field to the value that was provided on create.
func (u *VaultWithdrawalUpsert) UpdateVault() *VaultWithdrawalUpsert {
	u.SetExcluded(vaultwithdrawal.FieldVault)
	return u
}

// SetUser sets the "user" field.
func (u *VaultWithdrawalUpsert) SetUser(v string) *VaultWithdrawalUpsert {
	u.Set(vaultwithdrawal.FieldUser, v)
	return u
}

// UpdateUser sets the "user" field to the value that was provided on create.
func (u *VaultWithdrawalUpsert) UpdateUser() *VaultWithdrawalUpsert {
	u.SetExcluded(vaultwithdrawal.FieldUser)
	return u
}

// SetRequestedUsd sets the "requested_usd" field.
func (u *VaultWithdrawalUpsert) SetRequestedUsd(v string) *VaultWithdrawalUpsert {
	u.Set(vaultwithdrawal.FieldRequestedUsd, v)
	return u
}

// UpdateRequestedUsd sets the "requested_usd" field to the value that was provided on create.
func (u *VaultWithdrawalUpsert) UpdateRequestedUsd() *VaultWithdrawalUpsert {
	u.SetExcluded(vaultwithdrawal.FieldRequestedUsd)
	return u
}

// SetCommission sets the "commission" field.
func (u *VaultWithdrawalUpsert) SetCommission(v string) *VaultWithdrawalUpsert {
	u.Set(vaultwithdrawal.FieldCommission, v)
	return u
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *VaultWithdrawalUpsert) UpdateCommission() *VaultWithdrawalUpsert {
	u.SetExcluded(vaultwithdrawal.FieldCommission)
	return u
}

// SetClosingCost sets the "closing_cost" field.
func (u *VaultWithdrawalUpsert) SetClosingCost(v string) *VaultWithdrawalUpsert {
	u.Set(vaultwithdrawal.FieldClosingCost, v)
	return u
}

// UpdateClosingCost sets the "closing_cost" field to the value that was provided on create.
func (u *VaultWithdrawalUpsert) UpdateClosingCost() *VaultWithdrawalUpsert {
	u.SetExcluded(vaultwithdrawal.FieldClosingCost)
	return u
}

// SetBasis sets the "basis" field.
func (u *VaultWithdrawalUpsert) SetBasis(v string) *VaultWithdrawalUpsert {
	u.Set(vaultwithdrawal.FieldBasis, v)
	return u
}

// UpdateBasis sets the "basis" field to the value that was provided on create.
func (u *VaultWithdrawalUpsert) UpdateBasis() *VaultWithdrawalUpsert {
	u.SetExcluded(vaultwithdrawal.FieldBasis)
	return u
}

// SetNetWithdrawnUsd sets the "net_withdrawn_usd" field.
func (u *VaultWithdrawalUpsert) SetNetWithdrawnUsd(v string) *VaultWithdrawalUpsert {
	u.Set(vaultwithdrawal.FieldNetWithdrawnUsd, v)
	return u
}

// UpdateNetWithdrawnUsd sets the "net_withdrawn_usd" field to the value that was provided on create.
func (u *VaultWithdrawalUpsert) UpdateNetWithdrawnUsd() *VaultWithdrawalUpsert {
	u.SetExcluded(vaultwithdrawal.FieldNetWithdrawnUsd)
	return u
}

// SetTime sets the "time" field.
func (u *VaultWithdrawalUpsert) SetTime(v int64) *VaultWithdrawalUpsert {
	u.Set(vaultwithdrawal.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *VaultWithdrawalUpsert) UpdateTime() *VaultWithdrawalUpsert {
	u.SetExcluded(vaultwithdrawal.FieldTime)
	return u
}

// AddTime adds v to the "time" field.
func (u *VaultWithdrawalUpsert) AddTime(v int64) *VaultWithdrawalUpsert {
	u.Add(vaultwithdrawal.FieldTime, v)
	return u
}

// SetAddress sets the "address" field.
func (u *VaultWithdrawalUpsert) SetAddress(v string) *VaultWithdrawalUpsert {
	u.Set(vaultwithdrawal.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *VaultWithdrawalUpsert) UpdateAddress() *VaultWithdrawalUpsert {
	u.SetExcluded(vaultwithdrawal.FieldAddress)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.VaultWithdrawal.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VaultWithdrawalUpsertOne) UpdateNewValues() *VaultWithdrawalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VaultWithdrawal.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VaultWithdrawalUpsertOne) Ignore() *VaultWithdrawalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VaultWithdrawalUpsertOne) DoNothing() *VaultWithdrawalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VaultWithdrawalCreate.OnConflict
// documentation for more info.
func (u *VaultWithdrawalUpsertOne) Update(set func(*VaultWithdrawalUpsert)) *VaultWithdrawalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VaultWithdrawalUpsert{UpdateSet: update})
	}))
	return u
}

// SetVault sets the "vault" field.
func (u *VaultWithdrawalUpsertOne) SetVault(v string) *VaultWithdrawalUpsertOne {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.SetVault(v)
	})
}

// UpdateVault sets the "vault" field to the value that was provided on create.
func (u *VaultWithdrawalUpsertOne) UpdateVault() *VaultWithdrawalUpsertOne {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.UpdateVault()
	})
}

// SetUser sets the "user" field.
func (u *VaultWithdrawalUpsertOne) SetUser(v string) *VaultWithdrawalUpsertOne {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.SetUser(v)
	})
}

// UpdateUser sets the "user" field to the value that was provided on create.
func (u *VaultWithdrawalUpsertOne) UpdateUser() *VaultWithdrawalUpsertOne {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.UpdateUser()
	})
}

// SetRequestedUsd sets the "requested_usd" field.
func (u *VaultWithdrawalUpsertOne) SetRequestedUsd(v string) *VaultWithdrawalUpsertOne {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.SetRequestedUsd(v)
	})
}

// UpdateRequestedUsd sets the "requested_usd" field to the value that was provided on create.
func (u *VaultWithdrawalUpsertOne) UpdateRequestedUsd() *VaultWithdrawalUpsertOne {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.UpdateRequestedUsd()
	})
}

// SetCommission sets the "commission" field.
func (u *VaultWithdrawalUpsertOne) SetCommission(v string) *VaultWithdrawalUpsertOne {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.SetCommission(v)
	})
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *VaultWithdrawalUpsertOne) UpdateCommission() *VaultWithdrawalUpsertOne {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.UpdateCommission()
	})
}

// SetClosingCost sets the "closing_cost" field.
func (u *VaultWithdrawalUpsertOne) SetClosingCost(v string) *VaultWithdrawalUpsertOne {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.SetClosingCost(v)
	})
}

// UpdateClosingCost sets the "closing_cost" field to the value that was provided on create.
func (u *VaultWithdrawalUpsertOne) UpdateClosingCost() *VaultWithdrawalUpsertOne {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.UpdateClosingCost()
	})
}

// SetBasis sets the "basis" field.
func (u *VaultWithdrawalUpsertOne) SetBasis(v string) *VaultWithdrawalUpsertOne {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.SetBasis(v)
	})
}

// UpdateBasis sets the "basis" field to the value that was provided on create.
func (u *VaultWithdrawalUpsertOne) UpdateBasis() *VaultWithdrawalUpsertOne {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.UpdateBasis()
	})
}

// SetNetWithdrawnUsd sets the "net_withdrawn_usd" field.
func (u *VaultWithdrawalUpsertOne) SetNetWithdrawnUsd(v string) *VaultWithdrawalUpsertOne {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.SetNetWithdrawnUsd(v)
	})
}

// UpdateNetWithdrawnUsd sets the "net_withdrawn_usd" field to the value that was provided on create.
func (u *VaultWithdrawalUpsertOne) UpdateNetWithdrawnUsd() *VaultWithdrawalUpsertOne {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.UpdateNetWithdrawnUsd()
	})
}

// SetTime sets the "time" field.
func (u *VaultWithdrawalUpsertOne) SetTime(v int64) *VaultWithdrawalUpsertOne {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *VaultWithdrawalUpsertOne) AddTime(v int64) *VaultWithdrawalUpsertOne {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *VaultWithdrawalUpsertOne) UpdateTime() *VaultWithdrawalUpsertOne {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.UpdateTime()
	})
}

// SetAddress sets the "address" field.
func (u *VaultWithdrawalUpsertOne) SetAddress(v string) *VaultWithdrawalUpsertOne {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *VaultWithdrawalUpsertOne) UpdateAddress() *VaultWithdrawalUpsertOne {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.UpdateAddress()
	})
}

// Exec executes the query.
func (u *VaultWithdrawalUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VaultWithdrawalCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VaultWithdrawalUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VaultWithdrawalUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VaultWithdrawalUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VaultWithdrawalCreateBulk is the builder for creating many VaultWithdrawal entities in bulk.
type VaultWithdrawalCreateBulk struct {
	config
	err      error
	builders []*VaultWithdrawalCreate
	conflict []sql.ConflictOption
}

// Save creates the VaultWithdrawal entities in the database.
func (vwcb *VaultWithdrawalCreateBulk) Save(ctx context.Context) ([]*VaultWithdrawal, error) {
	if vwcb.err != nil {
		return nil, vwcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vwcb.builders))
	nodes := make([]*VaultWithdrawal, len(vwcb.builders))
	mutators := make([]Mutator, len(vwcb.builders))
	for i := range vwcb.builders {
		func(i int, root context.Context) {
			builder := vwcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VaultWithdrawalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vwcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vwcb *VaultWithdrawalCreateBulk) SaveX(ctx context.Context) []*VaultWithdrawal {
	v, err := vwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vwcb *VaultWithdrawalCreateBulk) Exec(ctx context.Context) error {
	_, err := vwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vwcb *VaultWithdrawalCreateBulk) ExecX(ctx context.Context) {
	if err := vwcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VaultWithdrawal.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VaultWithdrawalUpsert) {
//			SetVault(v+v).
//		}).
//		Exec(ctx)
func (vwcb *VaultWithdrawalCreateBulk) OnConflict(opts ...sql.ConflictOption) *VaultWithdrawalUpsertBulk {
	vwcb.conflict = opts
	return &VaultWithdrawalUpsertBulk{
		create: vwcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VaultWithdrawal.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vwcb *VaultWithdrawalCreateBulk) OnConflictColumns(columns ...string) *VaultWithdrawalUpsertBulk {
	vwcb.conflict = append(vwcb.conflict, sql.ConflictColumns(columns...))
	return &VaultWithdrawalUpsertBulk{
		create: vwcb,
	}
}

// VaultWithdrawalUpsertBulk is the builder for "upsert"-ing
// a bulk of VaultWithdrawal nodes.
type VaultWithdrawalUpsertBulk struct {
	create *VaultWithdrawalCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VaultWithdrawal.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VaultWithdrawalUpsertBulk) UpdateNewValues() *VaultWithdrawalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VaultWithdrawal.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VaultWithdrawalUpsertBulk) Ignore() *VaultWithdrawalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VaultWithdrawalUpsertBulk) DoNothing() *VaultWithdrawalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VaultWithdrawalCreateBulk.OnConflict
// documentation for more info.
func (u *VaultWithdrawalUpsertBulk) Update(set func(*VaultWithdrawalUpsert)) *VaultWithdrawalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VaultWithdrawalUpsert{UpdateSet: update})
	}))
	return u
}

// SetVault sets the "vault" field.
func (u *VaultWithdrawalUpsertBulk) SetVault(v string) *VaultWithdrawalUpsertBulk {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.SetVault(v)
	})
}

// UpdateVault sets the "vault" field to the value that was provided on create.
func (u *VaultWithdrawalUpsertBulk) UpdateVault() *VaultWithdrawalUpsertBulk {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.UpdateVault()
	})
}

// SetUser sets the "user" field.
func (u *VaultWithdrawalUpsertBulk) SetUser(v string) *VaultWithdrawalUpsertBulk {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.SetUser(v)
	})
}

// UpdateUser sets the "user" field to the value that was provided on create.
func (u *VaultWithdrawalUpsertBulk) UpdateUser() *VaultWithdrawalUpsertBulk {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.UpdateUser()
	})
}

// SetRequestedUsd sets the "requested_usd" field.
func (u *VaultWithdrawalUpsertBulk) SetRequestedUsd(v string) *VaultWithdrawalUpsertBulk {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.SetRequestedUsd(v)
	})
}

// UpdateRequestedUsd sets the "requested_usd" field to the value that was provided on create.
func (u *VaultWithdrawalUpsertBulk) UpdateRequestedUsd() *VaultWithdrawalUpsertBulk {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.UpdateRequestedUsd()
	})
}

// SetCommission sets the "commission" field.
func (u *VaultWithdrawalUpsertBulk) SetCommission(v string) *VaultWithdrawalUpsertBulk {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.SetCommission(v)
	})
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *VaultWithdrawalUpsertBulk) UpdateCommission() *VaultWithdrawalUpsertBulk {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.UpdateCommission()
	})
}

// SetClosingCost sets the "closing_cost" field.
func (u *VaultWithdrawalUpsertBulk) SetClosingCost(v string) *VaultWithdrawalUpsertBulk {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.SetClosingCost(v)
	})
}

// UpdateClosingCost sets the "closing_cost" field to the value that was provided on create.
func (u *VaultWithdrawalUpsertBulk) UpdateClosingCost() *VaultWithdrawalUpsertBulk {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.UpdateClosingCost()
	})
}

// SetBasis sets the "basis" field.
func (u *VaultWithdrawalUpsertBulk) SetBasis(v string) *VaultWithdrawalUpsertBulk {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.SetBasis(v)
	})
}

// UpdateBasis sets the "basis" field to the value that was provided on create.
func (u *VaultWithdrawalUpsertBulk) UpdateBasis() *VaultWithdrawalUpsertBulk {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.UpdateBasis()
	})
}

// SetNetWithdrawnUsd sets the "net_withdrawn_usd" field.
func (u *VaultWithdrawalUpsertBulk) SetNetWithdrawnUsd(v string) *VaultWithdrawalUpsertBulk {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.SetNetWithdrawnUsd(v)
	})
}

// UpdateNetWithdrawnUsd sets the "net_withdrawn_usd" field to the value that was provided on create.
func (u *VaultWithdrawalUpsertBulk) UpdateNetWithdrawnUsd() *VaultWithdrawalUpsertBulk {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.UpdateNetWithdrawnUsd()
	})
}

// SetTime sets the "time" field.
func (u *VaultWithdrawalUpsertBulk) SetTime(v int64) *VaultWithdrawalUpsertBulk {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *VaultWithdrawalUpsertBulk) AddTime(v int64) *VaultWithdrawalUpsertBulk {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *VaultWithdrawalUpsertBulk) UpdateTime() *VaultWithdrawalUpsertBulk {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.UpdateTime()
	})
}

// SetAddress sets the "address" field.
func (u *VaultWithdrawalUpsertBulk) SetAddress(v string) *VaultWithdrawalUpsertBulk {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *VaultWithdrawalUpsertBulk) UpdateAddress() *VaultWithdrawalUpsertBulk {
	return u.Update(func(s *VaultWithdrawalUpsert) {
		s.UpdateAddress()
	})
}

// Exec executes the query.
func (u *VaultWithdrawalUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VaultWithdrawalCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VaultWithdrawalCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VaultWithdrawalUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
