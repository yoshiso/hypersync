// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/predicate"
	"github.com/yoshiso/hypersync/ent/vaultwithdrawal"
)

// VaultWithdrawalDelete is the builder for deleting a VaultWithdrawal entity.
type VaultWithdrawalDelete struct {
	config
	hooks    []Hook
	mutation *VaultWithdrawalMutation
}

// Where appends a list predicates to the VaultWithdrawalDelete builder.
func (vwd *VaultWithdrawalDelete) Where(ps ...predicate.VaultWithdrawal) *VaultWithdrawalDelete {
	vwd.mutation.Where(ps...)
	return vwd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vwd *VaultWithdrawalDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, vwd.sqlExec, vwd.mutation, vwd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vwd *VaultWithdrawalDelete) ExecX(ctx context.Context) int {
	n, err := vwd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vwd *VaultWithdrawalDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(vaultwithdrawal.Table, sqlgraph.NewFieldSpec(vaultwithdrawal.FieldID, field.TypeInt))
	if ps := vwd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vwd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vwd.mutation.done = true
	return affected, err
}

// VaultWithdrawalDeleteOne is the builder for deleting a single VaultWithdrawal entity.
type VaultWithdrawalDeleteOne struct {
	vwd *VaultWithdrawalDelete
}

// Where appends a list predicates to the VaultWithdrawalDelete builder.
func (vwdo *VaultWithdrawalDeleteOne) Where(ps ...predicate.VaultWithdrawal) *VaultWithdrawalDeleteOne {
	vwdo.vwd.mutation.Where(ps...)
	return vwdo
}

// Exec executes the deletion query.
func (vwdo *VaultWithdrawalDeleteOne) Exec(ctx context.Context) error {
	n, err := vwdo.vwd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{vaultwithdrawal.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vwdo *VaultWithdrawalDeleteOne) ExecX(ctx context.Context) {
	if err := vwdo.Exec(ctx); err != nil {
		panic(err)
	}
}
