// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/predicate"
	"github.com/yoshiso/hypersync/ent/vaultwithdrawal"
)

// VaultWithdrawalQuery is the builder for querying VaultWithdrawal entities.
type VaultWithdrawalQuery struct {
	config
	ctx        *QueryContext
	order      []vaultwithdrawal.OrderOption
	inters     []Interceptor
	predicates []predicate.VaultWithdrawal
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VaultWithdrawalQuery builder.
func (vwq *VaultWithdrawalQuery) Where(ps ...predicate.VaultWithdrawal) *VaultWithdrawalQuery {
	vwq.predicates = append(vwq.predicates, ps...)
	return vwq
}

// Limit the number of records to be returned by this query.
func (vwq *VaultWithdrawalQuery) Limit(limit int) *VaultWithdrawalQuery {
	vwq.ctx.Limit = &limit
	return vwq
}

// Offset to start from.
func (vwq *VaultWithdrawalQuery) Offset(offset int) *VaultWithdrawalQuery {
	vwq.ctx.Offset = &offset
	return vwq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vwq *VaultWithdrawalQuery) Unique(unique bool) *VaultWithdrawalQuery {
	vwq.ctx.Unique = &unique
	return vwq
}

// Order specifies how the records should be ordered.
func (vwq *VaultWithdrawalQuery) Order(o ...vaultwithdrawal.OrderOption) *VaultWithdrawalQuery {
	vwq.order = append(vwq.order, o...)
	return vwq
}

// First returns the first VaultWithdrawal entity from the query.
// Returns a *NotFoundError when no VaultWithdrawal was found.
func (vwq *VaultWithdrawalQuery) First(ctx context.Context) (*VaultWithdrawal, error) {
	nodes, err := vwq.Limit(1).All(setContextOp(ctx, vwq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{vaultwithdrawal.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vwq *VaultWithdrawalQuery) FirstX(ctx context.Context) *VaultWithdrawal {
	node, err := vwq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VaultWithdrawal ID from the query.
// Returns a *NotFoundError when no VaultWithdrawal ID was found.
func (vwq *VaultWithdrawalQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = vwq.Limit(1).IDs(setContextOp(ctx, vwq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{vaultwithdrawal.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vwq *VaultWithdrawalQuery) FirstIDX(ctx context.Context) int {
	id, err := vwq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VaultWithdrawal entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one VaultWithdrawal entity is found.
// Returns a *NotFoundError when no VaultWithdrawal entities are found.
func (vwq *VaultWithdrawalQuery) Only(ctx context.Context) (*VaultWithdrawal, error) {
	nodes, err := vwq.Limit(2).All(setContextOp(ctx, vwq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{vaultwithdrawal.Label}
	default:
		return nil, &NotSingularError{vaultwithdrawal.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vwq *VaultWithdrawalQuery) OnlyX(ctx context.Context) *VaultWithdrawal {
	node, err := vwq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VaultWithdrawal ID in the query.
// Returns a *NotSingularError when more than one VaultWithdrawal ID is found.
// Returns a *NotFoundError when no entities are found.
func (vwq *VaultWithdrawalQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = vwq.Limit(2).IDs(setContextOp(ctx, vwq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{vaultwithdrawal.Label}
	default:
		err = &NotSingularError{vaultwithdrawal.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vwq *VaultWithdrawalQuery) OnlyIDX(ctx context.Context) int {
	id, err := vwq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VaultWithdrawals.
func (vwq *VaultWithdrawalQuery) All(ctx context.Context) ([]*VaultWithdrawal, error) {
	ctx = setContextOp(ctx, vwq.ctx, ent.OpQueryAll)
	if err := vwq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*VaultWithdrawal, *VaultWithdrawalQuery]()
	return withInterceptors[[]*VaultWithdrawal](ctx, vwq, qr, vwq.inters)
}

// AllX is like All, but panics if an error occurs.
func (vwq *VaultWithdrawalQuery) AllX(ctx context.Context) []*VaultWithdrawal {
	nodes, err := vwq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VaultWithdrawal IDs.
func (vwq *VaultWithdrawalQuery) IDs(ctx context.Context) (ids []int, err error) {
	if vwq.ctx.Unique == nil && vwq.path != nil {
		vwq.Unique(true)
	}
	ctx = setContextOp(ctx, vwq.ctx, ent.OpQueryIDs)
	if err = vwq.Select(vaultwithdrawal.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vwq *VaultWithdrawalQuery) IDsX(ctx context.Context) []int {
	ids, err := vwq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vwq *VaultWithdrawalQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, vwq.ctx, ent.OpQueryCount)
	if err := vwq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, vwq, querierCount[*VaultWithdrawalQuery](), vwq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (vwq *VaultWithdrawalQuery) CountX(ctx context.Context) int {
	count, err := vwq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vwq *VaultWithdrawalQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, vwq.ctx, ent.OpQueryExist)
	switch _, err := vwq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (vwq *VaultWithdrawalQuery) ExistX(ctx context.Context) bool {
	exist, err := vwq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VaultWithdrawalQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vwq *VaultWithdrawalQuery) Clone() *VaultWithdrawalQuery {
	if vwq == nil {
		return nil
	}
	return &VaultWithdrawalQuery{
		config:     vwq.config,
		ctx:        vwq.ctx.Clone(),
		order:      append([]vaultwithdrawal.OrderOption{}, vwq.order...),
		inters:     append([]Interceptor{}, vwq.inters...),
		predicates: append([]predicate.VaultWithdrawal{}, vwq.predicates...),
		// clone intermediate query.
		sql:  vwq.sql.Clone(),
		path: vwq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Vault string `json:"vault,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VaultWithdrawal.Query().
//		GroupBy(vaultwithdrawal.FieldVault).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (vwq *VaultWithdrawalQuery) GroupBy(field string, fields ...string) *VaultWithdrawalGroupBy {
	vwq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &VaultWithdrawalGroupBy{build: vwq}
	grbuild.flds = &vwq.ctx.Fields
	grbuild.label = vaultwithdrawal.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Vault string `json:"vault,omitempty"`
//	}
//
//	client.VaultWithdrawal.Query().
//		Select(vaultwithdrawal.FieldVault).
//		Scan(ctx, &v)
func (vwq *VaultWithdrawalQuery) Select(fields ...string) *VaultWithdrawalSelect {
	vwq.ctx.Fields = append(vwq.ctx.Fields, fields...)
	sbuild := &VaultWithdrawalSelect{VaultWithdrawalQuery: vwq}
	sbuild.label = vaultwithdrawal.Label
	sbuild.flds, sbuild.scan = &vwq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a VaultWithdrawalSelect configured with the given aggregations.
func (vwq *VaultWithdrawalQuery) Aggregate(fns ...AggregateFunc) *VaultWithdrawalSelect {
	return vwq.Select().Aggregate(fns...)
}

func (vwq *VaultWithdrawalQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range vwq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, vwq); err != nil {
				return err
			}
		}
	}
	for _, f := range vwq.ctx.Fields {
		if !vaultwithdrawal.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if vwq.path != nil {
		prev, err := vwq.path(ctx)
		if err != nil {
			return err
		}
		vwq.sql = prev
	}
	return nil
}

func (vwq *VaultWithdrawalQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*VaultWithdrawal, error) {
	var (
		nodes = []*VaultWithdrawal{}
		_spec = vwq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*VaultWithdrawal).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &VaultWithdrawal{config: vwq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vwq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (vwq *VaultWithdrawalQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vwq.querySpec()
	_spec.Node.Columns = vwq.ctx.Fields
	if len(vwq.ctx.Fields) > 0 {
		_spec.Unique = vwq.ctx.Unique != nil && *vwq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, vwq.driver, _spec)
}

func (vwq *VaultWithdrawalQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(vaultwithdrawal.Table, vaultwithdrawal.Columns, sqlgraph.NewFieldSpec(vaultwithdrawal.FieldID, field.TypeInt))
	_spec.From = vwq.sql
	if unique := vwq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if vwq.path != nil {
		_spec.Unique = true
	}
	if fields := vwq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vaultwithdrawal.FieldID)
		for i := range fields {
			if fields[i] != vaultwithdrawal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := vwq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vwq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vwq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vwq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vwq *VaultWithdrawalQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vwq.driver.Dialect())
	t1 := builder.Table(vaultwithdrawal.Table)
	columns := vwq.ctx.Fields
	if len(columns) == 0 {
		columns = vaultwithdrawal.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vwq.sql != nil {
		selector = vwq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vwq.ctx.Unique != nil && *vwq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range vwq.predicates {
		p(selector)
	}
	for _, p := range vwq.order {
		p(selector)
	}
	if offset := vwq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vwq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// VaultWithdrawalGroupBy is the group-by builder for VaultWithdrawal entities.
type VaultWithdrawalGroupBy struct {
	selector
	build *VaultWithdrawalQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vwgb *VaultWithdrawalGroupBy) Aggregate(fns ...AggregateFunc) *VaultWithdrawalGroupBy {
	vwgb.fns = append(vwgb.fns, fns...)
	return vwgb
}

// Scan applies the selector query and scans the result into the given value.
func (vwgb *VaultWithdrawalGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vwgb.build.ctx, ent.OpQueryGroupBy)
	if err := vwgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VaultWithdrawalQuery, *VaultWithdrawalGroupBy](ctx, vwgb.build, vwgb, vwgb.build.inters, v)
}

func (vwgb *VaultWithdrawalGroupBy) sqlScan(ctx context.Context, root *VaultWithdrawalQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vwgb.fns))
	for _, fn := range vwgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vwgb.flds)+len(vwgb.fns))
		for _, f := range *vwgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vwgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vwgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// VaultWithdrawalSelect is the builder for selecting fields of VaultWithdrawal entities.
type VaultWithdrawalSelect struct {
	*VaultWithdrawalQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vws *VaultWithdrawalSelect) Aggregate(fns ...AggregateFunc) *VaultWithdrawalSelect {
	vws.fns = append(vws.fns, fns...)
	return vws
}

// Scan applies the selector query and scans the result into the given value.
func (vws *VaultWithdrawalSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vws.ctx, ent.OpQuerySelect)
	if err := vws.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VaultWithdrawalQuery, *VaultWithdrawalSelect](ctx, vws.VaultWithdrawalQuery, vws, vws.inters, v)
}

func (vws *VaultWithdrawalSelect) sqlScan(ctx context.Context, root *VaultWithdrawalQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(vws.fns))
	for _, fn := range vws.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*vws.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vws.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
