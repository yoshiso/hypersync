// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/predicate"
	"github.com/yoshiso/hypersync/ent/vaultwithdrawal"
)

// VaultWithdrawalUpdate is the builder for updating VaultWithdrawal entities.
type VaultWithdrawalUpdate struct {
	config
	hooks    []Hook
	mutation *VaultWithdrawalMutation
}

// Where appends a list predicates to the VaultWithdrawalUpdate builder.
func (vwu *VaultWithdrawalUpdate) Where(ps ...predicate.VaultWithdrawal) *VaultWithdrawalUpdate {
	vwu.mutation.Where(ps...)
	return vwu
}

// SetVault sets the "vault" field.
func (vwu *VaultWithdrawalUpdate) SetVault(s string) *VaultWithdrawalUpdate {
	vwu.mutation.SetVault(s)
	return vwu
}

// SetNillableVault sets the "vault" field if the given value is not nil.
func (vwu *VaultWithdrawalUpdate) SetNillableVault(s *string) *VaultWithdrawalUpdate {
	if s != nil {
		vwu.SetVault(*s)
	}
	return vwu
}

// SetUser sets the "user" field.
func (vwu *VaultWithdrawalUpdate) SetUser(s string) *VaultWithdrawalUpdate {
	vwu.mutation.SetUser(s)
	return vwu
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (vwu *VaultWithdrawalUpdate) SetNillableUser(s *string) *VaultWithdrawalUpdate {
	if s != nil {
		vwu.SetUser(*s)
	}
	return vwu
}

// SetRequestedUsd sets the "requested_usd" field.
func (vwu *VaultWithdrawalUpdate) SetRequestedUsd(s string) *VaultWithdrawalUpdate {
	vwu.mutation.SetRequestedUsd(s)
	return vwu
}

// SetNillableRequestedUsd sets the "requested_usd" field if the given value is not nil.
func (vwu *VaultWithdrawalUpdate) SetNillableRequestedUsd(s *string) *VaultWithdrawalUpdate {
	if s != nil {
		vwu.SetRequestedUsd(*s)
	}
	return vwu
}

// SetCommission sets the "commission" field.
func (vwu *VaultWithdrawalUpdate) SetCommission(s string) *VaultWithdrawalUpdate {
	vwu.mutation.SetCommission(s)
	return vwu
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (vwu *VaultWithdrawalUpdate) SetNillableCommission(s *string) *VaultWithdrawalUpdate {
	if s != nil {
		vwu.SetCommission(*s)
	}
	return vwu
}

// SetClosingCost sets the "closing_cost" field.
func (vwu *VaultWithdrawalUpdate) SetClosingCost(s string) *VaultWithdrawalUpdate {
	vwu.mutation.SetClosingCost(s)
	return vwu
}

// SetNillableClosingCost sets the "closing_cost" field if the given value is not nil.
func (vwu *VaultWithdrawalUpdate) SetNillableClosingCost(s *string) *VaultWithdrawalUpdate {
	if s != nil {
		vwu.SetClosingCost(*s)
	}
	return vwu
}

// SetBasis sets the "basis" field.
func (vwu *VaultWithdrawalUpdate) SetBasis(s string) *VaultWithdrawalUpdate {
	vwu.mutation.SetBasis(s)
	return vwu
}

// SetNillableBasis sets the "basis" field if the given value is not nil.
func (vwu *VaultWithdrawalUpdate) SetNillableBasis(s *string) *VaultWithdrawalUpdate {
	if s != nil {
		vwu.SetBasis(*s)
	}
	return vwu
}

// SetNetWithdrawnUsd sets the "net_withdrawn_usd" field.
func (vwu *VaultWithdrawalUpdate) SetNetWithdrawnUsd(s string) *VaultWithdrawalUpdate {
	vwu.mutation.SetNetWithdrawnUsd(s)
	return vwu
}

// SetNillableNetWithdrawnUsd sets the "net_withdrawn_usd" field if the given value is not nil.
func (vwu *VaultWithdrawalUpdate) SetNillableNetWithdrawnUsd(s *string) *VaultWithdrawalUpdate {
	if s != nil {
		vwu.SetNetWithdrawnUsd(*s)
	}
	return vwu
}

// SetTime sets the "time" field.
func (vwu *VaultWithdrawalUpdate) SetTime(i int64) *VaultWithdrawalUpdate {
	vwu.mutation.ResetTime()
	vwu.mutation.SetTime(i)
	return vwu
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (vwu *VaultWithdrawalUpdate) SetNillableTime(i *int64) *VaultWithdrawalUpdate {
	if i != nil {
		vwu.SetTime(*i)
	}
	return vwu
}

// AddTime adds i to the "time" field.
func (vwu *VaultWithdrawalUpdate) AddTime(i int64) *VaultWithdrawalUpdate {
	vwu.mutation.AddTime(i)
	return vwu
}

// SetAddress sets the "address" field.
func (vwu *VaultWithdrawalUpdate) SetAddress(s string) *VaultWithdrawalUpdate {
	vwu.mutation.SetAddress(s)
	return vwu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (vwu *VaultWithdrawalUpdate) SetNillableAddress(s *string) *VaultWithdrawalUpdate {
	if s != nil {
		vwu.SetAddress(*s)
	}
	return vwu
}

// Mutation returns the VaultWithdrawalMutation object of the builder.
func (vwu *VaultWithdrawalUpdate) Mutation() *VaultWithdrawalMutation {
	return vwu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vwu *VaultWithdrawalUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vwu.sqlSave, vwu.mutation, vwu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vwu *VaultWithdrawalUpdate) SaveX(ctx context.Context) int {
	affected, err := vwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vwu *VaultWithdrawalUpdate) Exec(ctx context.Context) error {
	_, err := vwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vwu *VaultWithdrawalUpdate) ExecX(ctx context.Context) {
	if err := vwu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vwu *VaultWithdrawalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(vaultwithdrawal.Table, vaultwithdrawal.Columns, sqlgraph.NewFieldSpec(vaultwithdrawal.FieldID, field.TypeInt))
	if ps := vwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vwu.mutation.Vault(); ok {
		_spec.SetField(vaultwithdrawal.FieldVault, field.TypeString, value)
	}
	if value, ok := vwu.mutation.User(); ok {
		_spec.SetField(vaultwithdrawal.FieldUser, field.TypeString, value)
	}
	if value, ok := vwu.mutation.RequestedUsd(); ok {
		_spec.SetField(vaultwithdrawal.FieldRequestedUsd, field.TypeString, value)
	}
	if value, ok := vwu.mutation.Commission(); ok {
		_spec.SetField(vaultwithdrawal.FieldCommission, field.TypeString, value)
	}
	if value, ok := vwu.mutation.ClosingCost(); ok {
		_spec.SetField(vaultwithdrawal.FieldClosingCost, field.TypeString, value)
	}
	if value, ok := vwu.mutation.Basis(); ok {
		_spec.SetField(vaultwithdrawal.FieldBasis, field.TypeString, value)
	}
	if value, ok := vwu.mutation.NetWithdrawnUsd(); ok {
		_spec.SetField(vaultwithdrawal.FieldNetWithdrawnUsd, field.TypeString, value)
	}
	if value, ok := vwu.mutation.Time(); ok {
		_spec.SetField(vaultwithdrawal.FieldTime, field.TypeInt64, value)
	}
	if value, ok := vwu.mutation.AddedTime(); ok {
		_spec.AddField(vaultwithdrawal.FieldTime, field.TypeInt64, value)
	}
	if value, ok := vwu.mutation.Address(); ok {
		_spec.SetField(vaultwithdrawal.FieldAddress, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vaultwithdrawal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vwu.mutation.done = true
	return n, nil
}

// VaultWithdrawalUpdateOne is the builder for updating a single VaultWithdrawal entity.
type VaultWithdrawalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VaultWithdrawalMutation
}

// SetVault sets the "vault" field.
func (vwuo *VaultWithdrawalUpdateOne) SetVault(s string) *VaultWithdrawalUpdateOne {
	vwuo.mutation.SetVault(s)
	return vwuo
}

// SetNillableVault sets the "vault" field if the given value is not nil.
func (vwuo *VaultWithdrawalUpdateOne) SetNillableVault(s *string) *VaultWithdrawalUpdateOne {
	if s != nil {
		vwuo.SetVault(*s)
	}
	return vwuo
}

// SetUser sets the "user" field.
func (vwuo *VaultWithdrawalUpdateOne) SetUser(s string) *VaultWithdrawalUpdateOne {
	vwuo.mutation.SetUser(s)
	return vwuo
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (vwuo *VaultWithdrawalUpdateOne) SetNillableUser(s *string) *VaultWithdrawalUpdateOne {
	if s != nil {
		vwuo.SetUser(*s)
	}
	return vwuo
}

// SetRequestedUsd sets the "requested_usd" field.
func (vwuo *VaultWithdrawalUpdateOne) SetRequestedUsd(s string) *VaultWithdrawalUpdateOne {
	vwuo.mutation.SetRequestedUsd(s)
	return vwuo
}

// SetNillableRequestedUsd sets the "requested_usd" field if the given value is not nil.
func (vwuo *VaultWithdrawalUpdateOne) SetNillableRequestedUsd(s *string) *VaultWithdrawalUpdateOne {
	if s != nil {
		vwuo.SetRequestedUsd(*s)
	}
	return vwuo
}

// SetCommission sets the "commission" field.
func (vwuo *VaultWithdrawalUpdateOne) SetCommission(s string) *VaultWithdrawalUpdateOne {
	vwuo.mutation.SetCommission(s)
	return vwuo
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (vwuo *VaultWithdrawalUpdateOne) SetNillableCommission(s *string) *VaultWithdrawalUpdateOne {
	if s != nil {
		vwuo.SetCommission(*s)
	}
	return vwuo
}

// SetClosingCost sets the "closing_cost" field.
func (vwuo *VaultWithdrawalUpdateOne) SetClosingCost(s string) *VaultWithdrawalUpdateOne {
	vwuo.mutation.SetClosingCost(s)
	return vwuo
}

// SetNillableClosingCost sets the "closing_cost" field if the given value is not nil.
func (vwuo *VaultWithdrawalUpdateOne) SetNillableClosingCost(s *string) *VaultWithdrawalUpdateOne {
	if s != nil {
		vwuo.SetClosingCost(*s)
	}
	return vwuo
}

// SetBasis sets the "basis" field.
func (vwuo *VaultWithdrawalUpdateOne) SetBasis(s string) *VaultWithdrawalUpdateOne {
	vwuo.mutation.SetBasis(s)
	return vwuo
}

// SetNillableBasis sets the "basis" field if the given value is not nil.
func (vwuo *VaultWithdrawalUpdateOne) SetNillableBasis(s *string) *VaultWithdrawalUpdateOne {
	if s != nil {
		vwuo.SetBasis(*s)
	}
	return vwuo
}

// SetNetWithdrawnUsd sets the "net_withdrawn_usd" field.
func (vwuo *VaultWithdrawalUpdateOne) SetNetWithdrawnUsd(s string) *VaultWithdrawalUpdateOne {
	vwuo.mutation.SetNetWithdrawnUsd(s)
	return vwuo
}

// SetNillableNetWithdrawnUsd sets the "net_withdrawn_usd" field if the given value is not nil.
func (vwuo *VaultWithdrawalUpdateOne) SetNillableNetWithdrawnUsd(s *string) *VaultWithdrawalUpdateOne {
	if s != nil {
		vwuo.SetNetWithdrawnUsd(*s)
	}
	return vwuo
}

// SetTime sets the "time" field.
func (vwuo *VaultWithdrawalUpdateOne) SetTime(i int64) *VaultWithdrawalUpdateOne {
	vwuo.mutation.ResetTime()
	vwuo.mutation.SetTime(i)
	return vwuo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (vwuo *VaultWithdrawalUpdateOne) SetNillableTime(i *int64) *VaultWithdrawalUpdateOne {
	if i != nil {
		vwuo.SetTime(*i)
	}
	return vwuo
}

// AddTime adds i to the "time" field.
func (vwuo *VaultWithdrawalUpdateOne) AddTime(i int64) *VaultWithdrawalUpdateOne {
	vwuo.mutation.AddTime(i)
	return vwuo
}

// SetAddress sets the "address" field.
func (vwuo *VaultWithdrawalUpdateOne) SetAddress(s string) *VaultWithdrawalUpdateOne {
	vwuo.mutation.SetAddress(s)
	return vwuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (vwuo *VaultWithdrawalUpdateOne) SetNillableAddress(s *string) *VaultWithdrawalUpdateOne {
	if s != nil {
		vwuo.SetAddress(*s)
	}
	return vwuo
}

// Mutation returns the VaultWithdrawalMutation object of the builder.
func (vwuo *VaultWithdrawalUpdateOne) Mutation() *VaultWithdrawalMutation {
	return vwuo.mutation
}

// Where appends a list predicates to the VaultWithdrawalUpdate builder.
func (vwuo *VaultWithdrawalUpdateOne) Where(ps ...predicate.VaultWithdrawal) *VaultWithdrawalUpdateOne {
	vwuo.mutation.Where(ps...)
	return vwuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vwuo *VaultWithdrawalUpdateOne) Select(field string, fields ...string) *VaultWithdrawalUpdateOne {
	vwuo.fields = append([]string{field}, fields...)
	return vwuo
}

// Save executes the query and returns the updated VaultWithdrawal entity.
func (vwuo *VaultWithdrawalUpdateOne) Save(ctx context.Context) (*VaultWithdrawal, error) {
	return withHooks(ctx, vwuo.sqlSave, vwuo.mutation, vwuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vwuo *VaultWithdrawalUpdateOne) SaveX(ctx context.Context) *VaultWithdrawal {
	node, err := vwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vwuo *VaultWithdrawalUpdateOne) Exec(ctx context.Context) error {
	_, err := vwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vwuo *VaultWithdrawalUpdateOne) ExecX(ctx context.Context) {
	if err := vwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vwuo *VaultWithdrawalUpdateOne) sqlSave(ctx context.Context) (_node *VaultWithdrawal, err error) {
	_spec := sqlgraph.NewUpdateSpec(vaultwithdrawal.Table, vaultwithdrawal.Columns, sqlgraph.NewFieldSpec(vaultwithdrawal.FieldID, field.TypeInt))
	id, ok := vwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VaultWithdrawal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vaultwithdrawal.FieldID)
		for _, f := range fields {
			if !vaultwithdrawal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vaultwithdrawal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vwuo.mutation.Vault(); ok {
		_spec.SetField(vaultwithdrawal.FieldVault, field.TypeString, value)
	}
	if value, ok := vwuo.mutation.User(); ok {
		_spec.SetField(vaultwithdrawal.FieldUser, field.TypeString, value)
	}
	if value, ok := vwuo.mutation.RequestedUsd(); ok {
		_spec.SetField(vaultwithdrawal.FieldRequestedUsd, field.TypeString, value)
	}
	if value, ok := vwuo.mutation.Commission(); ok {
		_spec.SetField(vaultwithdrawal.FieldCommission, field.TypeString, value)
	}
	if value, ok := vwuo.mutation.ClosingCost(); ok {
		_spec.SetField(vaultwithdrawal.FieldClosingCost, field.TypeString, value)
	}
	if value, ok := vwuo.mutation.Basis(); ok {
		_spec.SetField(vaultwithdrawal.FieldBasis, field.TypeString, value)
	}
	if value, ok := vwuo.mutation.NetWithdrawnUsd(); ok {
		_spec.SetField(vaultwithdrawal.FieldNetWithdrawnUsd, field.TypeString, value)
	}
	if value, ok := vwuo.mutation.Time(); ok {
		_spec.SetField(vaultwithdrawal.FieldTime, field.TypeInt64, value)
	}
	if value, ok := vwuo.mutation.AddedTime(); ok {
		_spec.AddField(vaultwithdrawal.FieldTime, field.TypeInt64, value)
	}
	if value, ok := vwuo.mutation.Address(); ok {
		_spec.SetField(vaultwithdrawal.FieldAddress, field.TypeString, value)
	}
	_node = &VaultWithdrawal{config: vwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vaultwithdrawal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vwuo.mutation.done = true
	return _node, nil
}
