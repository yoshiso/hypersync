// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yoshiso/hypersync/ent/predicate"
	"github.com/yoshiso/hypersync/ent/withdraw"
)

// WithdrawUpdate is the builder for updating Withdraw entities.
type WithdrawUpdate struct {
	config
	hooks    []Hook
	mutation *WithdrawMutation
}

// Where appends a list predicates to the WithdrawUpdate builder.
func (wu *WithdrawUpdate) Where(ps ...predicate.Withdraw) *WithdrawUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetUsdc sets the "usdc" field.
func (wu *WithdrawUpdate) SetUsdc(s string) *WithdrawUpdate {
	wu.mutation.SetUsdc(s)
	return wu
}

// SetNillableUsdc sets the "usdc" field if the given value is not nil.
func (wu *WithdrawUpdate) SetNillableUsdc(s *string) *WithdrawUpdate {
	if s != nil {
		wu.SetUsdc(*s)
	}
	return wu
}

// SetNonce sets the "nonce" field.
func (wu *WithdrawUpdate) SetNonce(i int64) *WithdrawUpdate {
	wu.mutation.ResetNonce()
	wu.mutation.SetNonce(i)
	return wu
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (wu *WithdrawUpdate) SetNillableNonce(i *int64) *WithdrawUpdate {
	if i != nil {
		wu.SetNonce(*i)
	}
	return wu
}

// AddNonce adds i to the "nonce" field.
func (wu *WithdrawUpdate) AddNonce(i int64) *WithdrawUpdate {
	wu.mutation.AddNonce(i)
	return wu
}

// SetFee sets the "fee" field.
func (wu *WithdrawUpdate) SetFee(s string) *WithdrawUpdate {
	wu.mutation.SetFee(s)
	return wu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (wu *WithdrawUpdate) SetNillableFee(s *string) *WithdrawUpdate {
	if s != nil {
		wu.SetFee(*s)
	}
	return wu
}

// SetTime sets the "time" field.
func (wu *WithdrawUpdate) SetTime(i int64) *WithdrawUpdate {
	wu.mutation.ResetTime()
	wu.mutation.SetTime(i)
	return wu
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (wu *WithdrawUpdate) SetNillableTime(i *int64) *WithdrawUpdate {
	if i != nil {
		wu.SetTime(*i)
	}
	return wu
}

// AddTime adds i to the "time" field.
func (wu *WithdrawUpdate) AddTime(i int64) *WithdrawUpdate {
	wu.mutation.AddTime(i)
	return wu
}

// SetAddress sets the "address" field.
func (wu *WithdrawUpdate) SetAddress(s string) *WithdrawUpdate {
	wu.mutation.SetAddress(s)
	return wu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (wu *WithdrawUpdate) SetNillableAddress(s *string) *WithdrawUpdate {
	if s != nil {
		wu.SetAddress(*s)
	}
	return wu
}

// Mutation returns the WithdrawMutation object of the builder.
func (wu *WithdrawUpdate) Mutation() *WithdrawMutation {
	return wu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WithdrawUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WithdrawUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WithdrawUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WithdrawUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wu *WithdrawUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(withdraw.Table, withdraw.Columns, sqlgraph.NewFieldSpec(withdraw.FieldID, field.TypeInt))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Usdc(); ok {
		_spec.SetField(withdraw.FieldUsdc, field.TypeString, value)
	}
	if value, ok := wu.mutation.Nonce(); ok {
		_spec.SetField(withdraw.FieldNonce, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.AddedNonce(); ok {
		_spec.AddField(withdraw.FieldNonce, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.Fee(); ok {
		_spec.SetField(withdraw.FieldFee, field.TypeString, value)
	}
	if value, ok := wu.mutation.Time(); ok {
		_spec.SetField(withdraw.FieldTime, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.AddedTime(); ok {
		_spec.AddField(withdraw.FieldTime, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.Address(); ok {
		_spec.SetField(withdraw.FieldAddress, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{withdraw.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WithdrawUpdateOne is the builder for updating a single Withdraw entity.
type WithdrawUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WithdrawMutation
}

// SetUsdc sets the "usdc" field.
func (wuo *WithdrawUpdateOne) SetUsdc(s string) *WithdrawUpdateOne {
	wuo.mutation.SetUsdc(s)
	return wuo
}

// SetNillableUsdc sets the "usdc" field if the given value is not nil.
func (wuo *WithdrawUpdateOne) SetNillableUsdc(s *string) *WithdrawUpdateOne {
	if s != nil {
		wuo.SetUsdc(*s)
	}
	return wuo
}

// SetNonce sets the "nonce" field.
func (wuo *WithdrawUpdateOne) SetNonce(i int64) *WithdrawUpdateOne {
	wuo.mutation.ResetNonce()
	wuo.mutation.SetNonce(i)
	return wuo
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (wuo *WithdrawUpdateOne) SetNillableNonce(i *int64) *WithdrawUpdateOne {
	if i != nil {
		wuo.SetNonce(*i)
	}
	return wuo
}

// AddNonce adds i to the "nonce" field.
func (wuo *WithdrawUpdateOne) AddNonce(i int64) *WithdrawUpdateOne {
	wuo.mutation.AddNonce(i)
	return wuo
}

// SetFee sets the "fee" field.
func (wuo *WithdrawUpdateOne) SetFee(s string) *WithdrawUpdateOne {
	wuo.mutation.SetFee(s)
	return wuo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (wuo *WithdrawUpdateOne) SetNillableFee(s *string) *WithdrawUpdateOne {
	if s != nil {
		wuo.SetFee(*s)
	}
	return wuo
}

// SetTime sets the "time" field.
func (wuo *WithdrawUpdateOne) SetTime(i int64) *WithdrawUpdateOne {
	wuo.mutation.ResetTime()
	wuo.mutation.SetTime(i)
	return wuo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (wuo *WithdrawUpdateOne) SetNillableTime(i *int64) *WithdrawUpdateOne {
	if i != nil {
		wuo.SetTime(*i)
	}
	return wuo
}

// AddTime adds i to the "time" field.
func (wuo *WithdrawUpdateOne) AddTime(i int64) *WithdrawUpdateOne {
	wuo.mutation.AddTime(i)
	return wuo
}

// SetAddress sets the "address" field.
func (wuo *WithdrawUpdateOne) SetAddress(s string) *WithdrawUpdateOne {
	wuo.mutation.SetAddress(s)
	return wuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (wuo *WithdrawUpdateOne) SetNillableAddress(s *string) *WithdrawUpdateOne {
	if s != nil {
		wuo.SetAddress(*s)
	}
	return wuo
}

// Mutation returns the WithdrawMutation object of the builder.
func (wuo *WithdrawUpdateOne) Mutation() *WithdrawMutation {
	return wuo.mutation
}

// Where appends a list predicates to the WithdrawUpdate builder.
func (wuo *WithdrawUpdateOne) Where(ps ...predicate.Withdraw) *WithdrawUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WithdrawUpdateOne) Select(field string, fields ...string) *WithdrawUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Withdraw entity.
func (wuo *WithdrawUpdateOne) Save(ctx context.Context) (*Withdraw, error) {
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WithdrawUpdateOne) SaveX(ctx context.Context) *Withdraw {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WithdrawUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WithdrawUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuo *WithdrawUpdateOne) sqlSave(ctx context.Context) (_node *Withdraw, err error) {
	_spec := sqlgraph.NewUpdateSpec(withdraw.Table, withdraw.Columns, sqlgraph.NewFieldSpec(withdraw.FieldID, field.TypeInt))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Withdraw.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, withdraw.FieldID)
		for _, f := range fields {
			if !withdraw.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != withdraw.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Usdc(); ok {
		_spec.SetField(withdraw.FieldUsdc, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Nonce(); ok {
		_spec.SetField(withdraw.FieldNonce, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.AddedNonce(); ok {
		_spec.AddField(withdraw.FieldNonce, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.Fee(); ok {
		_spec.SetField(withdraw.FieldFee, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Time(); ok {
		_spec.SetField(withdraw.FieldTime, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.AddedTime(); ok {
		_spec.AddField(withdraw.FieldTime, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.Address(); ok {
		_spec.SetField(withdraw.FieldAddress, field.TypeString, value)
	}
	_node = &Withdraw{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{withdraw.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
